package org.xxjr.store.web.action.account.xxxj.credit;

import java.io.Serializable;
import java.util.Date;

import javax.servlet.http.HttpServletRequest;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.exception.ExceptionUtil;
import org.ddq.common.util.LogerUtil;
import org.ddq.common.web.session.DuoduoSession;
import org.ddq.common.web.session.RequestUtil;
import org.llw.model.cache.RedisUtils;
import org.ddq.zk.service.RemoteInvoke;
import org.springframework.stereotype.Controller;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.xxjr.sys.util.NumberUtil;
import org.xxjr.sys.util.ServiceKey;

/**
 * 信用卡产品详情信息
 * @author zenghw
 *
 */
@Controller()
@RequestMapping("/account/xj/xjCreditDtl/")
public class XjCreditDtlAction {
	/**
	 * 查询信用卡详情列表
	 * @param request
	 * @return
	 */
	@RequestMapping("queryCreditDtlList")
	@ResponseBody
	public AppResult queryCreditDtlList(HttpServletRequest request){
		AppResult result = new AppResult();
		try{
			AppParam params = new AppParam("xjCreditDtlimgService","queryCreditDtlList");
			RequestUtil.setAttr(params, request);
			params.setOrderBy("indexNum");
			params.setOrderValue("ASC");
			params.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_XJ));
			result = RemoteInvoke.getInstance().callNoTx(params);
		}catch(Exception e){
			LogerUtil.error(XjCreditDtlAction.class, e, "queryCreditDtlList error");
			ExceptionUtil.setExceptionMessage(e, result,
					DuoduoSession.getShowLog());
		}
		return result;
	}
	
	
	/**
	 * 添加产品信息
	 * @param request
	 * @return
	 */
	@RequestMapping("addCreditDtl")
	@ResponseBody
	public AppResult addCreditDtl(HttpServletRequest request){
		AppResult result = new AppResult();
		String prodId = request.getParameter("prodId");
		if (StringUtils.isEmpty(prodId)) {
			result.setSuccess(false);
			result.setMessage("产品id为空");
			return result;
		}
		try{
			AppParam param = new AppParam("xjCreditDtlimgService","insert");
			RequestUtil.setAttr(param, request);
			param.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START
								+ ServiceKey.Key_XJ));
			result = RemoteInvoke.getInstance().call(param);
			int count = NumberUtil.getInt(result.getAttr(DuoduoConstant.DAO_Insert_SIZE),0);
			if(count > 0){
				//刷新产品详情缓存
				refreshXjProdDtl(prodId);
			}
		}catch(Exception e){
			LogerUtil.error(XjCreditDtlAction.class, e, "addCreditDtl error");
			ExceptionUtil.setExceptionMessage(e, result,
					DuoduoSession.getShowLog());
		}
		return result;
	}
	
	
	/**
	 * 编辑产品信息
	 * @param request
	 * @return
	 */
	@RequestMapping("editCreditDtl")
	@ResponseBody
	public AppResult editCreditDtl(HttpServletRequest request){
		AppResult result = new AppResult();
		String imgId = request.getParameter("imgId");
		if (StringUtils.isEmpty(imgId)) {
			result.setSuccess(false);
			result.setMessage("详情id为空");
			return result;
		}
		String prodId = request.getParameter("prodId");
		if (StringUtils.isEmpty(prodId)) {
			result.setSuccess(false);
			result.setMessage("产品id为空");
			return result;
		}
		try{
			AppParam param = new AppParam("xjCreditDtlimgService","update");
			RequestUtil.setAttr(param, request);
			param.addAttr("updateTime", new Date());
			param.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START
								+ ServiceKey.Key_XJ));
			result = RemoteInvoke.getInstance().call(param);
			int count = NumberUtil.getInt(result.getAttr(DuoduoConstant.DAO_Update_SIZE),0);
			if(count > 0){
				//刷新产品详情缓存
				refreshXjProdDtl(prodId);
			}
		}catch(Exception e){
			LogerUtil.error(XjCreditDtlAction.class, e, "editCreditDtl error");
			ExceptionUtil.setExceptionMessage(e, result,
					DuoduoSession.getShowLog());
		}
		return result;
	}
	
	/**
	 * 刷新指定产品详情缓存
	 * @param prodId
	 * @return
	 */
	public AppResult refreshXjProdDtl(String prodId){
		AppResult result = new AppResult();
		try{
			AppParam params = new AppParam("xjCreditDtlimgService","query");
			params.addAttr("prodId", prodId);
			params.setOrderBy("indexNum");
			params.setOrderValue("ASC");
			params.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START
								+ ServiceKey.Key_XJ));
			result = RemoteInvoke.getInstance().callNoTx(params);
			if(result.getRows().size() > 0){
				RedisUtils.getRedisService().set("key_all_xj_prod_dtl_"+prodId, (Serializable) result.getRows(), 60*60*24);
			}
		} catch(Exception e){
			LogerUtil.error(XjCreditDtlAction.class, e, "refreshXjProdDtl error");
			ExceptionUtil.setExceptionMessage(e, result,
					DuoduoSession.getShowLog());
		}
		
		return result;
	}
}
