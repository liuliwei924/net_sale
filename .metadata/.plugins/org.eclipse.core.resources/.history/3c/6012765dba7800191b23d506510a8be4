package org.xxjr.cust.fund;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import lombok.extern.slf4j.Slf4j;

import org.ddq.active.mq.message.CustMessageSend;
import org.ddq.active.mq.message.JpushMessageSend;
import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppResult;
import org.ddq.common.core.SpringAppContext;
import org.ddq.common.core.service.BaseService;
import org.ddq.common.core.service.SoaManager;
import org.ddq.common.exception.AppException;
import org.ddq.common.exception.DuoduoError;
import org.ddq.common.exception.SysException;
import org.ddq.common.util.DateUtil;
import org.ddq.common.util.StringUtil;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import org.xxjr.cust.util.CustConstant;
import org.xxjr.cust.util.info.CustomerIdentify;
import org.xxjr.cust.util.info.CustomerUtil;
import org.xxjr.cust.util.invite.CustInviteUtil;
import org.xxjr.cust.util.member.ScoreUtils;
import org.xxjr.cust.util.member.TicketConfigUtils;
import org.xxjr.sys.util.NumberUtil;
import org.xxjr.sys.util.message.MessageConstants;

import com.google.common.collect.Lists;

@Lazy
@Service
@Slf4j
public class CustTicketService extends BaseService {
	private static final String NAMESPACE = "CUSTTICKET";

	/**
	 * querys
	 * @param params
	 * @return
	 */
	public AppResult query(AppParam params) {
		return super.query(params, NAMESPACE);
	}
	
	/**
	 * queryByPage
	 * @param params
	 * @return
	 */
	public AppResult queryByPage(AppParam params) {
		return super.queryByPage(params, NAMESPACE);
	}
	
	
	/**
	 * queryCount
	 * @param params
	 * @return
	 */
	public AppResult queryCount(AppParam params) {
		int size = getDao().count(NAMESPACE, super.COUNT,params.getAttr(),params.getDataBase());
		AppResult result = new AppResult();
		result.putAttr(DuoduoConstant.TOTAL_SIZE, size);
		return result;
	}
	
	
	/**
	 * insert
	 * @param params
	 * @return
	 */
	public AppResult insert(AppParam params) {
		params.addAttr("createTime", new Date());
		return super.insert(params, NAMESPACE);
	}
	
	/**
	 * update
	 * @param params
	 * @return
	 */
	public AppResult update(AppParam params) {
		params.addAttr("updateTime", new Date());
		return super.update(params, NAMESPACE);
	}
	
	/**
	 * delete
	 * @param params
	 * @return
	 */
	public AppResult delete(AppParam params) {
		String ids = (String) params.getAttr("ids");
		AppResult  result = null;
		if (!StringUtils.isEmpty(ids)) {
			for (String id : ids.split(",")) {
				AppParam param = new AppParam();
				param.addAttr("ticketId", id);
				
				result = super.delete(param, NAMESPACE);
			}
		} else if (!StringUtils.isEmpty(params.getAttr("ticketId"))) {
			result = super.delete(params, NAMESPACE);
		} else {
			throw new AppException(DuoduoError.DELETE_NO_ID);
		}
		return result;
	}
	
	/**
	 * 批量插入
	 * @param params
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public AppResult directBatchInsert(AppParam params) {
		List<Map<String,Object>> list = (List<Map<String,Object>>)params.getAttr("list");
		AppResult result = new AppResult();
		int size = this.getDao().batchInsert(NAMESPACE, "batchInsert", list, params.getDataBase());
		result.putAttr(DuoduoConstant.DAO_Insert_SIZE, size);
		return result;
	}
	
	/**
	 * 
	 * @param params
	 * @return
	 */
	public AppResult batchInsert(AppParam params) {
		AppResult result = new AppResult();
		Object customerId = params.getAttr("customerId");
		Object rewardType = params.getAttr("rewardType");
		Object rewardValue = params.getAttr("rewardValue");
		Object createDesc = params.getAttr("createDesc");
		if(StringUtils.isEmpty(customerId) || StringUtils.isEmpty(rewardType)
				 || StringUtils.isEmpty(rewardValue)
				 || StringUtils.isEmpty(createDesc)){
			throw new SysException(DuoduoError.UPDATE_NO_PARAMS);
		}
		List<Map<String,Object>> list = TicketConfigUtils.getSendTicketList(customerId, rewardValue.toString(), rewardType.toString(), createDesc.toString());
		int size = 0;
		if(list.size() > 0){
			for (Map<String,Object> map : list) {
				map.put("kf", params.getAttr("kf"));
				map.put("activityType", params.getAttr("activityType"));
			}
			size = this.getDao().batchInsert(NAMESPACE, "batchInsert", list, params.getDataBase());
		}
		result.putAttr(DuoduoConstant.DAO_Insert_SIZE, size);
		return result;
	}
	
	/**
	 * 奖励抢单券、抵扣券
	 * @param context
	 * @return
	 */
	public AppResult insertActivity(AppParam context) {
		AppResult result = new AppResult();
		Object createDesc = context.getAttr("createDesc");// 劵描述
		Object type = context.getAttr("type");// 劵类型
		Object customerId = context.getAttr("customerId");
		String activityType = StringUtil.getString(context.getAttr("activityType"));//活动类型 0-其他  1-送免单券 2-邀请有奖
		String rewardValue = StringUtil.getString(context.getAttr("rewardValue"));// 奖励规则
		String infoType = StringUtil.getString(context.getAttr("infoType"));// 获取劵信息类型：1表示根据configId去获取劵信息
		if(StringUtils.isEmpty(rewardValue)){
			log.info("rewardValue is null!" + context.getAttr().toString());
			return result;
		}
		List<Map<String,Object>> list = new ArrayList<Map<String,Object>>();
		if("1".equals(infoType)){
			Map<String,Object> rewardMap = new HashMap<String, Object>();
			rewardMap.put("customerId", customerId);
			rewardMap.put("type", type);
			rewardMap.put("createDesc", createDesc);
			rewardMap.put("activityType", activityType);
			list = TicketConfigUtils.getTicketConfigIdList(rewardValue, rewardMap);
		}else{
			list = TicketConfigUtils.getSendTicketList(customerId, rewardValue.toString(), type.toString(), createDesc.toString());
		}
		int size = 0;
		// 批量插入劵记录
		if(list.size() > 0){
			size = this.getDao().batchInsert(NAMESPACE, "batchInsert", list, context.getDataBase());
		}
		Object newRewardType = context.getAttr("newRewardType");// 2 工作认证  3首次抢单
		if(size > 0){
			// 插入奖励记录
			if(!StringUtils.isEmpty(context.getAttr("selfId")) && !"2".equals(activityType)){
				Object selfId = context.getAttr("selfId");
				// 修改奖励概况
				double sendSum = TicketConfigUtils.getSendSum(rewardValue);
				String rewardDesc = (int)sendSum + "元抢单券";
				AppParam params = new AppParam();
				params.setService("inviteRewardService");
				params.setMethod("insert");
				params.addAttr("customerId", customerId);
				params.addAttr("awardValue", sendSum);
				params.addAttr("sendStatus", "1");
				params.addAttr("rewardType", newRewardType);
				params.addAttr("awardType", "ticket");
				params.addAttr("sendTime", new Date());
				params.addAttr("friendId", context.getAttr("selfId"));
				params.addAttr("createDesc", context.getAttr("createDesc"));
				SoaManager.getInstance().invoke(params);
				
				AppParam updateParams = new AppParam();
				updateParams.setService("inviteRecordService");
				updateParams.setMethod("update");
				updateParams.addAttr("customerId", selfId);
				Map<String, Object> userMap = CustomerIdentify.getCustIdentify(selfId.toString());
				Object referer = userMap.get("referer");
				Object refererTwo = userMap.get("refererTwo");
				if(!StringUtils.isEmpty(referer) && customerId.equals(referer.toString())){
					// 奖励直接推荐人
					if("2".equals(newRewardType.toString())){
						updateParams.addAttr("refererCardIdentifyReward", rewardDesc);
					}else if("3".equals(newRewardType.toString())){
						updateParams.addAttr("refererFirstRobReward", rewardDesc);
					}
					SoaManager.getInstance().invoke(updateParams);
				}else if(!StringUtils.isEmpty(refererTwo) && customerId.equals(refererTwo.toString())){
					// 奖励间接推荐人,只有首次抢单才奖励单子
					if("2".equals(newRewardType.toString())){
						updateParams.addAttr("refererTwoCardIdentifyReward", rewardDesc);
					}else if("3".equals(newRewardType.toString())){
						updateParams.addAttr("refererTwoFirstRobReward", rewardDesc);
					}
					SoaManager.getInstance().invoke(updateParams);
				}
			}
			if ("2".equals(activityType)) {					
				//邀请有奖活动更新奖励记录
				CustomerUtil.updateRewardRecord(context);
				//发送通知
				Object smsContent = context.getAttr("smsContent");
				if (!StringUtils.isEmpty(smsContent)) {
					sendMsgBySendTicket(customerId, smsContent);
				}
			}
		}
		return result;
	}
	
	
	/**
	 * 查询用户打折劵列表
	 * @param params
	 * @return
	 */
	public AppResult queryTicketByPage(AppParam params) {
		return super.queryByPage(params, NAMESPACE, "queryTicket", "queryTicketCount");
	}
	
	/**
	 * 查询用户打折劵信息
	 * @param params
	 * @return
	 */
	public AppResult queryTicketDtl(AppParam params) {
		return super.query(params, NAMESPACE, "queryTicketDtl");
	}
	
	/**
	 * 查询用户打折劵数量
	 * @param params
	 * @return
	 */
	public AppResult queryTicketNum(AppParam params) {
		return super.query(params, NAMESPACE, "queryTicketNum");
	}
	
	/**
	 * 统计抢单券的日使用情况
	 */
	public AppResult queryTicketOfDate(AppParam params) {
		return super.query(params, NAMESPACE, "queryTicketOfDate");
	}
	
	/**
	 * 统计抢单券的日使用情况汇总
	 */
	public AppResult queryTicketOfDaySummary(AppParam params) {
		return super.query(params, NAMESPACE, "queryTicketOfDaySummary");
	}
	
	/**
	 * 积分兑换抢单劵
	 * @param params
	 * @return
	 */
	public AppResult exchange(AppParam params) {
		AppResult result = new AppResult();
		Object customerId = params.getAttr("customerId");
		Object configId = params.getAttr("configId");
		Object ticketScore = params.getAttr("ticketScore");
		if(StringUtils.isEmpty(customerId) || StringUtils.isEmpty(configId)
				 || StringUtils.isEmpty(ticketScore)){
			throw new SysException(DuoduoError.UPDATE_NO_PARAMS);
		}
		// 扣积分
		int score = Integer.valueOf(ticketScore.toString());
		result = ScoreUtils.scoreChangeCust(customerId.toString(), -score, 
				Integer.valueOf(CustConstant.SCORE_TYPE_23), "积分兑换抢单劵");
		if(result.isSuccess()){
			// 增加兑换记录
			Date date = new Date();
			AppParam exchangeParam = new AppParam();
			exchangeParam.addAttr("customerId", customerId);
			exchangeParam.addAttr("configId", configId);
			exchangeParam.addAttr("startDate", date);// 抢单劵可用起始日期
			// 积分兑换的有效期7天
			Map<String,Object> ticketInfo = TicketConfigUtils.getTickeConfig(configId.toString());// 获取抢单劵对应的有效期天数
			int validDay = Integer.valueOf(ticketInfo.get("validDay").toString());
			String endDate = DateUtil.toStringByParttern(
					DateUtil.getNextDay(date, validDay-1),
					DateUtil.DATE_PATTERN_YYYY_MM_DD);
			exchangeParam.addAttr("endDate", endDate);// 抢单劵失效日期
			exchangeParam.addAttr("status", "1");
			exchangeParam.addAttr("type", CustInviteUtil.TICKET_TYPE_INTEGRAL);
			exchangeParam.addAttr("spendScore", -score);
			exchangeParam.addAttr("createDesc", "积分兑换抢单劵");
			this.insert(exchangeParam);
		}
		return result;
	}
	
	
	/**
	 * 抢单劵自动过期
	 * @param params
	 * @return
	 */
	public AppResult batchCloseTicket(AppParam params) {
		AppResult result = new AppResult();
		int size = super.getDao().update(NAMESPACE, "batchUpdateTicketStatus", params.getAttr(), params.getDataBase());
		result.putAttr(DuoduoConstant.DAO_Update_SIZE, size);
		return result;
	}
	
	
	/**
	 * 删除一个月前过期的抢单券
	 */
	public AppResult delLastMonthTicket(AppParam params) {
		AppResult result = new AppResult();
		int size = super.getDao().delete(NAMESPACE, "delLastMonthTicket", params.getAttr(), params.getDataBase());
		result.putAttr(DuoduoConstant.DAO_Delete_SIZE, size);
		return result;
	}
	
	/**
	 * 客服修改信贷经理劵信息
	 * @param params
	 * @return
	 */
	public AppResult updateTicketInfo(AppParam params) {
		AppResult result = new AppResult();
		Object kfCustId = params.getAttr("kfCustId");
		Object ticketId = params.getAttr("ticketId");
		String startDate = StringUtil.getString(params.getAttr("startDate"));
		if (StringUtils.isEmpty(kfCustId) || StringUtils.isEmpty(ticketId)
				|| StringUtils.isEmpty(startDate)) {
			throw new AppException(DuoduoError.UPDATE_NO_PARAMS);
		}
		AppParam queryParam = new AppParam();
		queryParam.addAttr("ticketId", ticketId);
		AppResult queryTicket = this.queryTicketDtl(queryParam);
		if (queryTicket.getRows().size() == 0) {
			result.setSuccess(false);
	      	result.setMessage("信贷经理劵信息不存在！");
	      	return result;
		}
		
		Map<String,Object> ticketInfo = queryTicket.getRow(0);
		// 判断状态
		String status = StringUtil.getString(ticketInfo.get("status"));
		if (!"1".equals(status)) {
			result.setSuccess(false);
	      	result.setMessage("该劵为非有效抢单券，不能修改！");
	      	return result;
		}
		
		Date now = new Date();
		// 判断失效有效期是否有效
		String ticketStartDateStr = StringUtil.getString(ticketInfo.get("startDate"));
		Date ticketStartDate = DateUtil.toDateByString(ticketStartDateStr,DateUtil.DATE_PATTERN_YYYY_MM_DD);
		if(ticketStartDate.compareTo(now) < 0) {
			result.setSuccess(false);
			result.setMessage("抱歉该劵不在未生效日期内，不能修改！");
			return result;
		}
		// 劵的有效天数
		int validDay = Integer.valueOf(StringUtil.getString(ticketInfo.get("validDay")));
		//根据开始日期计算失效日期
		Date endDate = DateUtil.getNextDay(
				DateUtil.toDateByString(startDate,
				DateUtil.DATE_PATTERN_YYYY_MM_DD), validDay-1);
		AppParam updateParam = new AppParam();
		updateParam.addAttr("ticketId", ticketId);
		updateParam.addAttr("startDate", startDate);
		updateParam.addAttr("endDate", endDate);
		updateParam.addAttr("kf", kfCustId);
		return this.update(updateParam);
	}
	
	
	/**
	 * 客服拆分抢单劵
	 * @param params
	 * @return
	 */
	public AppResult splitTicket(AppParam params) {
		AppResult result = new AppResult();
		Object ticketId = params.getAttr("ticketId");
		String kfCustId = StringUtil.getString(params.getAttr("kfCustId"));// 客服Id
		String type = StringUtil.getString(params.getAttr("type"));// 拆分状态
		if (StringUtils.isEmpty(kfCustId) || StringUtils.isEmpty(ticketId)
				|| StringUtils.isEmpty(type)) {
			throw new AppException(DuoduoError.UPDATE_NO_PARAMS);
		}
		AppParam queryParam = new AppParam();
		queryParam.addAttr("ticketId", ticketId);
		AppResult queryTicket = this.queryTicketDtl(queryParam);
		if (queryTicket.getRows().size() == 0) {
			result.setSuccess(false);
	      	result.setMessage("信贷经理劵信息不存在！");
	      	return result;
		}
		Map<String,Object> ticketInfo = queryTicket.getRow(0);
		// 判断劵的状态
		String status = StringUtil.getString(ticketInfo.get("status"));
		if (!"1".equals(status)) {
			result.setSuccess(false);
	      	result.setMessage("该劵为非有效抢单券，不能修改！");
	      	return result;
		}
		// 判断是否为50元的抢单劵
		double maxDiscountAmount = NumberUtil.getDouble(ticketInfo.get("maxDiscountAmount"), 0);
		if (maxDiscountAmount != 50) {
			result.setSuccess(false);
	      	result.setMessage("抱歉！ 该劵不能拆分！");
	      	return result;
		}
		// 判断失效日期是否小于当前时间
		Date now = DateUtil.toDateByString(DateUtil.toStringByParttern(new Date(),
				DateUtil.DATE_PATTERN_YYYY_MM_DD),
				DateUtil.DATE_PATTERN_YYYY_MM_DD);
		
		Date ticketEndDate = DateUtil.toDateByString(
				StringUtil.getString(ticketInfo.get("endDate")),
				DateUtil.DATE_PATTERN_YYYY_MM_DD);
		
		if(ticketEndDate.compareTo(now) < 0) {
			result.setSuccess(false);
 	      	result.setMessage("抱歉该劵失效日期小于当前时间，不能拆分！");
	      	return result;
		}
		// 获取劵的开始日期
		Date ticketStartDate = DateUtil.toDateByString(
				StringUtil.getString(ticketInfo.get("startDate")),
				DateUtil.DATE_PATTERN_YYYY_MM_DD);
		// 拆分后的劵插入
		List<Map<String,Object>> ticketList = new ArrayList<Map<String,Object>>();
		int validDay = Integer.valueOf(StringUtil.getString(ticketInfo.get("validDay")));
		if ("1".equals(type)) {// 当状态为1时， 拆分为1张20,1张30
			List<String> list = Lists.newArrayList("20","30");
			for (String amount : list) {
				Map<String,Object> config = TicketConfigUtils.getRechargeTickeConfig(0, Double.valueOf(amount),validDay);
				if (config == null) {
					continue;
				}
				Map<String,Object> ticketMap = this.ticketSplitMap(ticketStartDate,ticketEndDate, kfCustId,ticketInfo, config);
				ticketList.add(ticketMap);
			}
		} else if ("2".equals(type)) {// 当状态为2时， 拆分为1张10,2张20
			List<String> list = Lists.newArrayList("10","20","20");
			for (String amount : list) {
				Map<String,Object> config = TicketConfigUtils.getRechargeTickeConfig(0, Double.valueOf(amount),validDay);
				if (config == null) {
					continue;
				}
				Map<String,Object> ticketMap = this.ticketSplitMap(ticketStartDate,ticketEndDate, kfCustId,ticketInfo, config);
				ticketList.add(ticketMap);
			}
		}
		int size = 0;
		if (ticketList.size() > 0) {
			size = this.getDao().batchInsert(NAMESPACE, "batchInsert", ticketList, params.getDataBase());
		}
		// 修改已拆分后劵的状态
		if (size > 0) {
			AppParam updateStatus = new AppParam();
			updateStatus.addAttr("ticketId", ticketId);
			updateStatus.addAttr("status", "4");
			result = this.update(updateStatus);
		}
		return result;
	}
	
	/**
	 * 获取拆分后抢单劵信息
	 * @param startDate
	 * @param endDate
	 * @param kfCustId //客服Id
	 * @param row
	 * @param config
	 * @return
	 */
	private Map<String,Object> ticketSplitMap(Date startDate,Date endDate,String kfCustId,Map<String,Object> row,Map<String,Object> config) {
		Map<String,Object> ticketMap = new HashMap<String, Object>();
		ticketMap.put("customerId", row.get("customerId"));
		ticketMap.put("configId", config.get("configId"));
		ticketMap.put("startDate", startDate);
		ticketMap.put("endDate", endDate);
		ticketMap.put("status", "1");
		ticketMap.put("kf", kfCustId);
		ticketMap.put("type", row.get("typeNum"));
		ticketMap.put("createDesc", "拆分50元抢单券");
		return ticketMap;
	}
	
	/**
	 * 客服给信贷经理送劵
	 * @param params
	 * @return
	 */
	public AppResult giveLendTicket(AppParam params) {
		AppResult result = new AppResult();
		Object customerId = params.getAttr("customerId");
		Object kfCustId = params.getAttr("kfCustId");
		String configIds = StringUtil.getString(params.getAttr("configIds"));
		if (StringUtils.isEmpty(customerId) || StringUtils.isEmpty(kfCustId)
				|| StringUtils.isEmpty(configIds)) {
			throw new AppException(DuoduoError.UPDATE_NO_PARAMS);
		}
		// 查看客服下面的信贷经理
		AppParam kfParam = new AppParam();
		kfParam.setService("kfCustService");
		kfParam.setMethod("query");
		kfParam.addAttr("customerId", customerId);
		kfParam.addAttr("kf", kfCustId);
		AppResult lendResult = SoaManager.getInstance().invoke(kfParam);
	    if (lendResult.getRows().size() == 0) {
	    	result.setSuccess(false);
	      	result.setMessage("信贷经理不属于该客服名下！");
	      	return result;
	    }
	    // 判断赠送总额是否赠送完
	    AppParam sendParam = new AppParam();
	    sendParam.setService("custCodeService");
	    sendParam.setMethod("querySendSummary");
	    sendParam.addAttr("customerId", customerId);
	    sendParam.addAttr("kf", kfCustId);
	    AppResult sendResult = SoaManager.getInstance().invoke(sendParam);
	    double totalAmt = NumberUtil.getDouble(sendResult.getRow(0).get("totalAmt"), 0);
	    double maxDiscountAmount = NumberUtil.getDouble(sendResult.getRow(0).get("maxDiscountAmount"), 0);
	    
	    double totalDiscountAmount = 0;
   		String[] configArr = configIds.split(",|，");
   		for (String configId : configArr) {
   			Map<String,Object> configInfo = TicketConfigUtils.getTickeConfig(configId);
	   		double ticketAmount = NumberUtil.getDouble(configInfo.get("maxDiscountAmount"), 0);
	   		totalDiscountAmount += ticketAmount;
	   	}
	    if (totalAmt - maxDiscountAmount < totalDiscountAmount) {
	    	result.setSuccess(false);
	      	result.setMessage("赠送金额不能大于赠送总额！");
	      	return result;
	    }
	    Date now = new Date();
	    List<Map<String,Object>> list = new ArrayList<Map<String,Object>>();
	    for (String configId : configArr) {
	    	Map<String,Object> map = new HashMap<>();
   			Map<String,Object> configInfo = TicketConfigUtils.getTickeConfig(configId);
   			int validDay = Integer.valueOf(StringUtil.getString(configInfo.get("validDay")));
	 	    String endDate =DateUtil.toStringByParttern(
	 				DateUtil.getNextDay(now, validDay-1),
	 				DateUtil.DATE_PATTERN_YYYY_MM_DD);
	 		map.put("customerId", customerId);
	 		map.put("configId", configId);
	 		map.put("startDate", now);// 抢单劵可用起始日期
	 		map.put("endDate", endDate);// 抢单劵失效日期
	 		map.put("kf", kfCustId);
	 		map.put("status", "1");
	 		map.put("type", CustInviteUtil.TICKET_TYPE_KF);
	 		map.put("createDesc", "客服赠送");
	 		list.add(map);
	   	}
	    // 抢单劵信息插入
	    if(list.size() > 0){
	    	int size = this.getDao().batchInsert(NAMESPACE, "batchInsert", list, params.getDataBase());
	    	result.putAttr(DuoduoConstant.DAO_Insert_SIZE, size);
	    }
		return result;
	}
	
	
	/**
	 * 客服给老客户送劵
	 * @param params
	 * @return
	 */
	public AppResult giveOldLendTicket(AppParam params) {
		AppResult result = new AppResult();
		String customerIds = StringUtil.getString(params.getAttr("customerIds"));// 赠送用户
		String configIds = StringUtil.getString(params.getAttr("configIds"));// 劵id
		String kfCustId = StringUtil.getString(params.getAttr("kfCustId"));// 客服id
		String sendDayStr = StringUtil.getString(params.getAttr("sendDay"));// 连续增添天数
		if (StringUtils.isEmpty(customerIds) || StringUtils.isEmpty(configIds)
				|| StringUtils.isEmpty(sendDayStr)) {
			throw new AppException(DuoduoError.UPDATE_NO_PARAMS);
		}
		int sendDay = NumberUtil.getInt(sendDayStr, 0);
		String[] customerIdArr = customerIds.split(",|，");
   		String[] configArr = configIds.split(",|，");
	    List<Map<String,Object>> list = new ArrayList<Map<String,Object>>();
	    Date now = new Date();
	    for (int i = 0; i < sendDay; i++) {
	    	// 赠送日期
	    	Date sendDate = DateUtil.toDateByString(DateUtil
					.toStringByParttern(
							DateUtil.getNextDay(now, i),
							DateUtil.DATE_PATTERN_YYYY_MM_DD),
					DateUtil.DATE_PATTERN_YYYY_MM_DD);
			for (String customerId : customerIdArr) {
		    	for (String configId : configArr) {
			    	Map<String,Object> map = new HashMap<>();
		   			Map<String,Object> configInfo = TicketConfigUtils.getTickeConfig(configId);
		   			int validDay = Integer.valueOf(StringUtil.getString(configInfo.get("validDay")));
			 	    String endDate =DateUtil.toStringByParttern(
			 				DateUtil.getNextDay(sendDate, validDay-1),
			 				DateUtil.DATE_PATTERN_YYYY_MM_DD);
			 		map.put("customerId", customerId);
			 		map.put("configId", configId);
			 		map.put("startDate", sendDate);// 抢单劵可用起始日期
			 		map.put("endDate", endDate);// 抢单劵失效日期
			 		map.put("activityType", "0");
			 		map.put("kf", kfCustId);
			 		map.put("status", "1");
			 		map.put("type", CustInviteUtil.TICKET_KF_SEND_OLD);
			 		map.put("createDesc", "老客户回归专属");
			 		list.add(map);
			   	}
		    }
		}
	    // 抢单劵信息插入
	    if(list.size() > 0){
	    	int size = this.getDao().batchInsert(NAMESPACE, "batchInsert", list, params.getDataBase());
	    	result.putAttr(DuoduoConstant.DAO_Insert_SIZE, size);
	    }
		return result;
	}
	
	
	/**
	 * 新用户领劵，插入抢单劵记录
	 * @param params
	 * methodName:方法名
	 * 	-- shareTicketInsert：分享红包领劵
	 * 	-- smsSendTicketInsert：短信推荐领劵
	 * @return
	 */
	public AppResult rewardTicketInsert(AppParam params) {
		Object customerId = params.getAttr("customerId");
		Object telephone = params.getAttr("telephone");
		String method = StringUtil.getString(params.getAttr("methodName"));// 领劵方法名
		if(StringUtils.isEmpty(customerId) || StringUtils.isEmpty(method)){
			throw new AppException(DuoduoError.UPDATE_NO_PARAMS);
		}
		AppResult result = new AppResult();
		int size = this.getDao().insert(NAMESPACE, method, params.getAttr(), params.getDataBase());
		if(size > 0){
			if (method.equals("shareTicketInsert")) {
				// 更新分享红包记录信息
				AppParam shareParam = new AppParam();
				shareParam.setService("ticketShareDtlService");
				shareParam.setMethod("updateCustInfo");
				shareParam.addAttr("customerId", customerId);
				shareParam.addAttr("telephone", telephone);
				SoaManager.getInstance().invoke(shareParam);
			} else if (method.equals("smsSendTicketInsert")) {
				// 更新短信推荐记录信息
				AppParam smsParam = new AppParam();
				smsParam.setService("smsTicketRecordService");
				smsParam.setMethod("updateCustInfo");
				smsParam.addAttr("customerId", customerId);
				smsParam.addAttr("telephone", telephone);
				SoaManager.getInstance().invoke(smsParam);
			}
			// 新用户领劵注册后发站内信
			try {
				Map<String,Object> paramsMap = new HashMap<String,Object>();
				paramsMap.put("customerId", customerId);
				CustMessageSend messageSend = SpringAppContext.getBean(CustMessageSend.class);
				messageSend.sendCustMessage(customerId.toString(), "sendIviteCoupons", paramsMap);
			} catch (Exception e) {
				log.error("shareTicketInsert error", e);
			}
		}
		return result;
	}
	
	/**
	 * 问卷调查领券
	 * @param params
	 * @return
	 */
	public AppResult quetionSendTicket(AppParam params){
		AppResult result = new AppResult();
		Object customerId = params.getAttr("customerId");
		Object configId = params.getAttr("configId");
		if (StringUtils.isEmpty(customerId) || StringUtils.isEmpty(configId)) {
			throw new AppException(DuoduoError.UPDATE_NO_PARAMS);
		}
		// 判断信贷经理是否已领过劵
		AppParam queryParam = new AppParam();
		queryParam.addAttr("customerId", customerId);
		queryParam.addAttr("type", CustInviteUtil.TICKET_TYPE_QUETION_SEND);
		AppResult queryResult = this.query(queryParam);
		if (queryResult.getRows().size() > 0) {
			// 若领过劵的用户，返回领劵信息
			Map<String,Object> ticketInfo = queryResult.getRow(0);
			result.putAttr("startDate", ticketInfo.get("startDate"));// 抢单劵有效开始日期
			result.putAttr("endDate", ticketInfo.get("endDate"));// 抢单劵有效结束日期
			result.setSuccess(false);
			result.setErrorCode("001");
			return result;
		}
		Map<String,Object> ticketInfo = TicketConfigUtils.getTickeConfig(configId.toString());// 获取抢单劵对应的有效期天数
		int validDay = Integer.valueOf(ticketInfo.get("validDay").toString());
		Date startDate = new Date();
		String endDate = DateUtil.toStringByParttern(
				DateUtil.getNextDay(startDate, validDay-1),
				DateUtil.DATE_PATTERN_YYYY_MM_DD);
		// 若用户存在，则记录抢单劵信息
		AppParam ticketParam = new AppParam();
		ticketParam.addAttr("customerId", customerId);
		ticketParam.addAttr("configId", configId);
		ticketParam.addAttr("startDate", startDate);// 抢单劵可用起始日期
		ticketParam.addAttr("endDate", endDate);// 抢单劵失效日期
		ticketParam.addAttr("status", "1");
		ticketParam.addAttr("type", CustInviteUtil.TICKET_TYPE_QUETION_SEND);
		ticketParam.addAttr("createDesc", "问卷调查获取");
		result = this.insert(ticketParam);
		if (result.isSuccess()) {
			result.putAttr("startDate", DateUtil.toStringByParttern(startDate,DateUtil.DATE_PATTERN_YYYY_MM_DD));
			result.putAttr("endDate", endDate);
		}
		return result;
	}
	
	/**
	 * 查询抢单券即将过期用户
	 * @param params
	 * @return
	 */
	public AppResult queryTicketOverdueInfo (AppParam params){
		return super.queryByPage(params, NAMESPACE, "queryTicketOverdueInfo", "queryTicketOverdueInfoCount");
	}
	
	/**
	 * 抢单赠送免单券
	 * @param params
	 * @return
	 */
	public void presentFreeTicket(AppParam params){
		String customerId = StringUtil.getString(params.getAttr("customerId"));
		Map<String,Object> custInfo = CustomerIdentify.getCustIdentify(customerId);
		if (custInfo == null || custInfo.isEmpty()) {
			return;
		}
		String referer = StringUtil.getString(custInfo.get("referer"));
		//查询抢单人与其推荐人是否有免单券配置
		AppParam queryParam = new AppParam();
		queryParam.setService("custRobConfigService");
		queryParam.setMethod("queryConfig");
		queryParam.addAttr("referer", referer);
		queryParam.addAttr("status", "1");
		queryParam.addAttr("customerId", customerId);
		AppResult configResult = SoaManager.getInstance().invoke(queryParam);
		
		if (configResult.getRows().size() > 0) {
			//保存抢单记录
			AppParam recordParam = new AppParam();
			recordParam.setService("custRobRecordService");
			recordParam.setMethod("insert");
			recordParam.addAttr("refererId", referer);
			recordParam.addAttr("customerId", customerId);
			recordParam.addAttr("borrowId", params.getAttr("borrowId"));
			SoaManager.getInstance().invoke(recordParam);
			
			Map<String, Object> freeTicketInfo = TicketConfigUtils.getFreeTicketConfig();
			if (freeTicketInfo == null || freeTicketInfo.isEmpty()) {
				log.info("freeTicketInfo is null");
				return;
			}
			int validDay = (Integer)freeTicketInfo.get("validDay");
			for (Map<String, Object> configMap : configResult.getRows()) {
				String custId= StringUtil.getString(configMap.get("customerId"));
				if (!StringUtils.isEmpty(referer) && referer.equals(custId)) {
					//奖励推荐人免单券
					int robNums = NumberUtil.getInt(configMap.get("robNums"),0);			//符合推荐人赠送券的数量
					int robCount = NumberUtil.getInt(configMap.get("friendRobCount"),0);	//好友抢单张数
					int presentCount = (robCount+1)%robNums;								//是否送推荐人券  0-送券
					if (presentCount == 0 && robNums > 0) {
						AppParam msgParams = new AppParam();
						msgParams.addAttr("customerId", referer);
						msgParams.addAttr("smsContent", "您邀请的好友（"+custInfo.get("realName")+"）抢单成功，现赠送您1张免单券，有效期"+validDay+"天，请尽快使用哦！");
						msgParams.addAttr("createDesc", "好友抢单超过"+robNums+"单赠送");
						sendFreeTicket(msgParams);
					}
				}
				
				//奖励抢单人免单券
				int isSelfRobReward = NumberUtil.getInt(configMap.get("isSelfRobReward"),0);//自己抢单是否赠送券  1-送
				if (customerId.equals(custId) && isSelfRobReward == 1) {
					AppParam msgParams = new AppParam();
					msgParams.addAttr("customerId", customerId);
					msgParams.addAttr("smsContent", "抢单成功，现赠送您1张免单券，有效期"+validDay+"天，请尽快使用哦！");
					msgParams.addAttr("createDesc", "抢单赠送");
					sendFreeTicket(msgParams);
				}
			}
		}
	}
	
	/**
	 * 赠送免单券
	 * @param params
	 */
	public void sendFreeTicket(AppParam params){
		Object customerId = params.getAttr("customerId");
		Map<String, Object> row = TicketConfigUtils.getFreeTicketConfig();
		if (!StringUtils.isEmpty(customerId) && row != null && !row.isEmpty()) {
			Date now = new Date();
			int validDay = (Integer)row.get("validDay");
			//奖励免单券
			AppParam ticketParam = new AppParam();
			ticketParam.addAttr("type", CustInviteUtil.TICKET_TYPE_FREE_TICKET);
			ticketParam.addAttr("startDate", now);
			ticketParam.addAttr("customerId", customerId);
			ticketParam.addAttr("configId", row.get("configId"));
			Object endDate = DateUtil.toStringByParttern(
					DateUtil.getNextDay(now, validDay-1),
					DateUtil.DATE_PATTERN_YYYY_MM_DD);
			ticketParam.addAttr("endDate", endDate);
			ticketParam.addAttr("activityType", "1");
			ticketParam.addAttr("createDesc", params.getAttr("createDesc"));
			AppResult ticketResult = this.insert(ticketParam);
			if (ticketResult.isSuccess() && !StringUtils.isEmpty(params.getAttr("smsContent"))) {
				//发送通知
				sendMsgBySendTicket(customerId, params.getAttr("smsContent"));
			}
		}
	}
	
	/**
	 * 奖励券时发送通知
	 * @param customerId 用户id
	 * @param smsContent 内容
	 */
	public void sendMsgBySendTicket(Object customerId,Object smsContent){
		Map<String,Object> msgParam = new HashMap<String, Object>();
		msgParam.put("smsContent", smsContent);	//发送的内容
		msgParam.put("jpushClientType", "xdjl");					//推送给信贷经理app
		msgParam.put("jpushType", MessageConstants.jpush_Type_1);
		try {
			CustMessageSend messageSend = SpringAppContext.getBean(CustMessageSend.class);
			JpushMessageSend jpushSend = SpringAppContext.getBean(JpushMessageSend.class);
			messageSend.sendCustMessage(customerId.toString(), "presentTicketTip", msgParam);
			jpushSend.sendCustMessage(customerId.toString(), "presentTicketTip", msgParam);
		} catch (Exception e) {
			log.error("presentTicket send message error", e);
		}
	}
}
