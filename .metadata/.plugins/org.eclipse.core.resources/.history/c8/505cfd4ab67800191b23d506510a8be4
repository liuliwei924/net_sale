package org.xxjr.goods.util;

import java.util.HashMap;
import java.util.Map;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.exception.AppException;
import org.ddq.common.exception.DuoduoError;
import org.ddq.common.exception.SysException;
import org.ddq.zk.service.RemoteInvoke;
import org.springframework.util.StringUtils;
import org.xxjr.cust.util.CustConstant;
import org.xxjr.cust.util.member.ScoreUtils;
import org.xxjr.fang.util.LotteryUtil;
import org.xxjr.sys.util.NumberUtil;

/**
 * 商品兑换工具
 * @author Administrator
 *
 */
public class ExchangeUtil {

	/**
	 * 商品兑换
	 * @param params
	 * @return
	 */
	public static AppResult exchange(AppParam params) {
		Object awardId = params.getAttr("awardId");
		Object openid = params.getAttr("openid");
		Object gzhId = params.getAttr("gzhId");
		if(StringUtils.isEmpty(awardId) || StringUtils.isEmpty(openid)
				|| StringUtils.isEmpty(gzhId)){
			throw new AppException(DuoduoError.UPDATE_NO_PARAMS);
		}
		int buyNum = NumberUtil.getInt(params.getAttr("buyNum"), 1);
		// 查剩余件数及个人兑换限额
		Map<String,Object> awardInfo = AwardUtil.queryAwardInfo(awardId);
		Integer perLimit = Integer.valueOf(awardInfo.get("perLimit").toString());
		// 查询用户该商品兑换总数量
		AppParam countParam = new AppParam();
		countParam.setService("custExchangeService");
		countParam.setMethod("query");
		countParam.addAttr("awardId", awardId);
		countParam.addAttr("openid", openid);
		countParam.addAttr("gzhId", gzhId);
		countParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + "shop"));
		AppResult countResult = RemoteInvoke.getInstance().call(countParam);
		if(perLimit != 0 && countResult.getRows().size() >= perLimit){
			// 超过个人限制兑换次数
			throw new SysException("您已达到最大兑换次数，不能再兑换该商品！");
		}
		if(perLimit != 0 && countResult.getRows().size() + buyNum > perLimit){
			// 超过个人限制兑换次数
			throw new SysException("您的兑换数量已达到个人最大兑换数量，请减少兑换数量！");
		}
		Integer leftNum = Integer.valueOf(awardInfo.get("leftNum").toString());
     	Integer salesNum =  Integer.valueOf(awardInfo.get("salesNum").toString());;
     	int score = Integer.valueOf(awardInfo.get("score").toString());
		if(leftNum <= 0){
			// 剩余兑换总数为0，不能兑换
			throw new SysException("该商品已兑换");
		}
		if(leftNum < buyNum){
			// 剩余兑换总数小于buyNum
			throw new SysException("兑换数量已超过该商品剩余可兑换数");
		}
		Object type = params.getAttr("type");
		// 修改用户积分
		if(StringUtils.isEmpty(type) || "1".equals(type.toString())){
			score = score * buyNum;
			ScoreUtils.scoreChangeOpenid(openid.toString(), gzhId.toString(), -score,
					Integer.valueOf(CustConstant.SCORE_TYPE_19), "积分兑换奖品");
		}
		// 增加兑换记录
		AppParam exchangeParam = new AppParam();
		exchangeParam.setService("custExchangeService");
		exchangeParam.setMethod("insert");
		exchangeParam.addAttr("gzhId", gzhId);
		exchangeParam.addAttr("openid", openid);
		exchangeParam.addAttr("partnerCode", params.getAttr("partnerCode"));
		exchangeParam.addAttr("score", score * buyNum);
		exchangeParam.addAttr("awardId", awardId);
		exchangeParam.addAttr("status", "0");
		exchangeParam.addAttrs(params.getAttr());
		exchangeParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + "shop"));
		AppResult exchangeResult = RemoteInvoke.getInstance().call(exchangeParam);
		if(exchangeResult.isSuccess()){
			// 修改奖品剩余数量
			AppParam awardParam = new AppParam();
			awardParam.setService("awardService");
			awardParam.setMethod("update");
			awardParam.addAttr("awardId", awardId);
			awardParam.addAttr("leftNum", (leftNum - buyNum));
			awardParam.addAttr("salesNum", (salesNum + buyNum));
			awardParam.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + "shop"));
			RemoteInvoke.getInstance().call(awardParam);
		}
		return exchangeResult;
	}
	
	/**
	 * 抽奖结果记录
	 * @param params
	 * @return
	 */
	public static AppResult lotteryRecord(AppParam params) {
		Object awardId = params.getAttr("awardId");
		Object openid = params.getAttr("openid");
		Object gzhId = params.getAttr("gzhId");
		if(StringUtils.isEmpty(awardId) || StringUtils.isEmpty(openid)
				|| StringUtils.isEmpty(gzhId)){
			throw new AppException(DuoduoError.UPDATE_NO_PARAMS);
		}
		Map<String,Object> conInfo =LotteryUtil.getConsigneeCfg(gzhId, openid);
		// 增加兑换记录
		AppParam exchangeParam = new AppParam();
		exchangeParam.setService("custExchangeService");
		exchangeParam.setMethod("insert");
		exchangeParam.addAttr("gzhId", gzhId);
		exchangeParam.addAttr("openid", openid);
		exchangeParam.addAttr("awardId", awardId);
		exchangeParam.addAttr("receiveName", conInfo.get("conName"));
		exchangeParam.addAttr("receiveTelephone", conInfo.get("telephone"));
		exchangeParam.addAttr("receiveAddress", conInfo.get("address"));
		exchangeParam.addAttr("email", conInfo.get("email"));
		exchangeParam.addAttr("remark", conInfo.get("conLines"));
		exchangeParam.addAttr("status", "0");
		exchangeParam.addAttr("type", "0");
		exchangeParam.addAttrs(params.getAttr());
		exchangeParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + "shop"));
		return RemoteInvoke.getInstance().call(exchangeParam);
	}
	
	/**
	 * 查询订单信息
	 * @param orderId
	 * @return
	 */
	public static Map<String,Object> queryOrderInfo(Object orderId){
		AppParam param = new AppParam();
		param.setService("wxpayOrderService");
		param.setMethod("queryDtl");
		param.addAttr("orderId", orderId);
		param.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + "shop"));
		AppResult result = RemoteInvoke.getInstance().call(param);
		if(result.getRows().size() > 0){
			return result.getRow(0);
		}
		return new HashMap<String, Object>();
	}
}
