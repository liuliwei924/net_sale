package org.xxjr.busi.store.record;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import lombok.extern.slf4j.Slf4j;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppResult;
 import org.common.core.service.BaseService;
import org.ddq.common.core.service.SoaManager;
import org.ddq.common.exception.AppException;
import org.ddq.common.exception.DuoduoError;
import org.ddq.common.util.StringUtil;
import org.llw.model.cache.RedisUtils;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import org.xxjr.busi.util.BorrowConstant;
import org.xxjr.busi.util.StoreConstant;
import org.xxjr.busi.utils.StoreOptUtil;
import org.xxjr.cust.util.FundConstant;
import org.xxjr.cust.util.fund.CustAmountUtil;
import org.xxjr.store.util.StoreApplyUtils;
import org.xxjr.sys.util.NumberUtil;

@Lazy
@Service
@Slf4j
public class BorrowStoreRecordService extends BaseService {
	private static final String NAMESPACE = "BORROWSTORERECORD";

	/**
	 * 查询跟单记录
	 * @param params
	 * @return
	 */
	public AppResult queryStoreRecord(AppParam params) {
		AppResult result = new AppResult();
		String curDate = StringUtil.getString(params.getAttr("curDate"));
		String tableName = StoreOptUtil.getTableName(curDate);
		params.addAttr("tableName", tableName);
		String lastMonth = StringUtil.getString(params.getAttr("lastMonth"));
		String lastTwoMonth = StringUtil.getString(params.getAttr("lastTwoMonth"));
		if(!StringUtils.isEmpty(lastMonth)){
			params.addAttr("tableName1", StoreOptUtil.getTableName(lastMonth));
		}
		if(!StringUtils.isEmpty(lastTwoMonth)){
			params.addAttr("tableName2", StoreOptUtil.getTableName(lastTwoMonth));
		}
		
		try{
			result = super.queryByPage(params, NAMESPACE,"queryStoreRecord","queryStoreRecordCount");
		}catch(Exception e){
			// 出现插入异常
			boolean havTable = this.isExsitTable(params);
			if(!havTable){
				createNewTable(params);
				//进行查询操作
				result = super.queryByPage(params, NAMESPACE,"queryStoreRecord","queryStoreRecordCount");
			}
		}
		return result;
	}
	
	/**
	 * querys
	 * @param params
	 * @return
	 */
	public AppResult query(AppParam params) {
		
		AppResult result = new AppResult();
		String curDate = StringUtil.getString(params.getAttr("curDate"));
		String tableName = StoreOptUtil.getTableName(curDate);
		params.addAttr("tableName", tableName);
		try{
			result = super.query(params, NAMESPACE);
		}catch(Exception e){
			// 出现插入异常
			boolean havTable = this.isExsitTable(params);
			if(!havTable){
				createNewTable(params);
				//进行查询操作
				result = super.query(params, NAMESPACE);
			}
		}
		return result;
	}
	
	/**
	 * queryByPage
	 * @param params
	 * @return
	 */
	public AppResult queryByPage(AppParam params) {
		params.addAttr("tableName", StoreOptUtil.getTableName(null));
		return super.queryByPage(params, NAMESPACE);
	}
	
	/**
	 * queryShowByPage
	 * @param params
	 * @return
	 */
	public AppResult queryShowByPage(AppParam params) {
		params.addAttr("tableName", StoreOptUtil.getTableName(null));
		return super.queryByPage(params, NAMESPACE, "queryShow", "queryShowCount");
	}
	
	/**门店处理相关的查询列表
	 * queryStoreHandleList
	 * @param params
	 * @return
	 */
	public AppResult queryStoreHandleList(AppParam params) {
		params.addAttr("tableName", StoreOptUtil.getTableName(null));
		return super.queryByPage(params, NAMESPACE, "queryStoreHandleList", "queryStoreHandleCount");
	}
	
	/**反馈列表
	 * feedbackList
	 * @param params
	 * @return
	 */
	public AppResult feedbackList(AppParam params) {
		params.addAttr("tableName", StoreOptUtil.getTableName(null));
		return super.queryByPage(params, NAMESPACE, "feedbackList", "feedbackCount");
	}
	
	/**
	 * queryCount
	 * @param params
	 * @return
	 */
	public AppResult queryCount(AppParam params) {
		AppResult result = new AppResult();
		try{
			int size = getDao().count(NAMESPACE, super.COUNT,params.getAttr(),params.getDataBase());
			result.putAttr(DuoduoConstant.TOTAL_SIZE, size);
		}catch(Exception e){
			// 出现插入异常
			boolean havTable = this.isExsitTable(params);
			if(!havTable){
				createNewTable(params);
				//进行查询操作
				int size = getDao().count(NAMESPACE, super.COUNT,params.getAttr(),params.getDataBase());
				result.putAttr(DuoduoConstant.TOTAL_SIZE, size);
			}
		}
		
		
		
		return result;
	}
	
	
	/***
	 * 判断是否存在表
	 * @param params
	 * @return
	 */
	public boolean isExsitTable(AppParam params){
		int count = getDao().count(NAMESPACE, "isExsitTable" ,params.getAttr(),params.getDataBase());
		return count > 0 ? true : false;
	}
	
	/***
	 * 创建表
	 * @param params
	 * @return
	 */
	public int createNewTable(AppParam params){
		int size = getDao().update(NAMESPACE, "createNewTable", params.getAttr(), params.getDataBase());
		return size;
	}
	
	/**
	 * insert
	 * @param params
	 * @return
	 */
	public AppResult insert(AppParam params) {
		AppResult result = new AppResult();
		int totalSize = 0; 
		try{
			params.addAttr("createTime", new Date());
			params.addAttr("tableName", StoreOptUtil.getTableName(null));
			totalSize = getDao().insert(NAMESPACE, "insert", params.getAttr(), params.getDataBase());
		}catch(Exception e){
			// 出现插入异常
			boolean havTable = this.isExsitTable(params);
			if(!havTable){
				createNewTable(params);
				//进行插入操作
				totalSize = getDao().insert(NAMESPACE, "insert", params.getAttr(), params.getDataBase());
			}
			log.error("insert error", e);
		}
		
		if(totalSize > 0){
			// 删除当月缓存
			RedisUtils.getRedisService().del(StoreApplyUtils.STORE_FOLLOW_RECORD 
					+ params.getAttr("applyId") + "_"+ StoreConstant.QUERY_DATE_FLAG_0
						+ StoreConstant.IS_ADMIN_TRUE);
			RedisUtils.getRedisService().del(StoreApplyUtils.STORE_FOLLOW_RECORD
					+ params.getAttr("applyId") + "_"+ StoreConstant.QUERY_DATE_FLAG_0
					+ StoreConstant.IS_ADMIN_FALSE);
		}
		
		result.putAttr(DuoduoConstant.TOTAL_SIZE, totalSize);
		return result;
	}
	
	/**
	 * update
	 * @param params
	 * @return
	 */
	public AppResult update(AppParam params) {
		String tableName = StoreOptUtil.getTableName(null);
		params.addAttr("tableName", tableName);
		return super.update(params, NAMESPACE);
	}
	
	/**更新为已读
	 * updateReadFlag
	 * @param params
	 * @return
	 */
	public AppResult updateReadFlag(AppParam params) {
		int size = getDao().update(NAMESPACE, "updateReadFlag", params.getAttr(), params.getDataBase());
		AppResult backContext = new AppResult();
		backContext.putAttr(DuoduoConstant.DAO_Update_SIZE, size);
		return backContext;
	}
	
	/**查询退款信息
	 * queryBackInfo
	 * @param params
	 * @return
	 */
	public AppResult queryBackInfo(AppParam params) {
		return super.query(params, NAMESPACE,"queryBackInfo");
	}
	
	
	/**门店退回审核
	 * storeBackCheck
	 * @param params
	 * @return
	 */
	public AppResult storeBackCheck(AppParam params) {
		//0-待审   1- 审核通过 2-审核不通过
		int backStatus = NumberUtil.getInt(params.getAttr("backStatus"));
		String applyIds = params.getAttr("applyIds").toString();
		String[] applyIdArr = applyIds.split(",");
		StringBuilder sb = new StringBuilder();
	//	CustMessageSend messageSend = (CustMessageSend) SpringAppContext.getBean(CustMessageSend.class);
		for(String applyId : applyIdArr){
			
			AppParam backParam = new AppParam();
			backParam.addAttr("applyId", applyId);
			AppResult result = this.queryBackInfo(backParam);
			int size = result.getRows().size();
			if(size == 0 && backStatus ==1){
				sb.append("applyId:" + applyId + ",没有抢单记录，不能进行退单成功操作");
				continue;
			}
			Map<String,Object> backMap = new HashMap<String, Object>();
			if(size > 0){
				backMap = result.getRow(0);
			}
			
			int rbackStatus = NumberUtil.getInt(backMap.get("backStatus"),0);
			if(rbackStatus !=0){
				sb.append("applyId:" + applyId + ",此单退单状态不是待审状态，不能进行退单操作");
				continue;
			}
			
			AppParam updateParam = new AppParam("borrowApplyService","update");
			if(backStatus == 1 || backStatus == 2){
				updateParam.addAttr("applyId", applyId);
				updateParam.addAttr("backStatus", backStatus);
				result = SoaManager.getInstance().invoke(updateParam);
				if(!StringUtils.isEmpty(backMap.get("storeBy"))){
					//插入门店人员记录
					updateParam = new AppParam();
					updateParam.addAttr("applyId", applyId);
					updateParam.addAttr("storeBy", backMap.get("storeBy"));
					updateParam.addAttr("handleType", backStatus ==1 ? BorrowConstant.STORE_OPER_7 : BorrowConstant.STORE_OPER_8);
					updateParam.addAttr("handleDesc", backStatus ==1 ? "退款成功" : "退款失败,原因：" + params.getAttr("handleDesc"));
					updateParam.addAttr("readFlag", 1);
					this.insert(updateParam);
				}

				// 插入客服跟进记录
				AppParam recordParam = new AppParam();
				recordParam.setService("borrowKfRecordService");
				recordParam.setMethod("insert");
				recordParam.addAttr("applyId", applyId);
				recordParam.addAttr("handleDesc", params.getAttr("handleDesc"));
				recordParam.addAttr("kf", params.getAttr("kf"));
				recordParam.addAttr("handleType", BorrowConstant.KEFU_OPER_11);
				SoaManager.getInstance().invoke(recordParam);
				
				
			}
			
			Object customerId = backMap.get("storeBy");
			if(result.isSuccess() && !StringUtils.isEmpty(customerId)){
				//审核通过，需要退款
				if(backStatus == 1 && NumberUtil.getDouble(backMap.get("amount"), 0) >0){
					//修改金额
					AppParam amtParam = new AppParam();
					amtParam.addAttr("customerId", customerId);
					amtParam.addAttr("amount", backMap.get("amount"));
					amtParam.addAttr("recordDesc", "门店退款");
					amtParam.addAttr("orderId", applyId);
					amtParam.addAttr("fundType", FundConstant.FundType_store_back);
					CustAmountUtil.updateSeniorAmount(amtParam);
					CustAmountUtil.refershAmount(customerId.toString());
				}
				/*Map<String, Object> msgParam = new HashMap<String, Object>();
				Object realName = CustomerIdentify.getCustIdentify(customerId.toString()).get("realName");
				msgParam.put("realName", realName);
				msgParam.put("applyName", backMap.get("applyName"));
				msgParam.put("amount", backMap.get("amount"));
				msgParam.put("handleDesc", params.getAttr("handleDesc"));
				messageSend.sendCustMessage(customerId.toString(), (backStatus ==1 ? "storeSucBackMsg" : "storeFailBackMsg"), msgParam);*/
				
			}
			
		}
		String errMsg = sb.toString();
		AppResult result = new AppResult();
		if(StringUtils.hasText(errMsg)){
			result.setSuccess(false);
			result.setMessage(errMsg);
		}
		
		return result;
	}
	
	/**
	 * delete
	 * @param params
	 * @return
	 */
	public AppResult delete(AppParam params) {
		String ids = (String) params.getAttr("ids");
		String curDate = (String)params.getAttr("curDate");
		params.addAttr("tableName", StoreOptUtil.getTableName(curDate));
		AppResult  result = null;
		if (!StringUtils.isEmpty(ids)) {
			for (String id : ids.split(",")) {
				AppParam param = new AppParam();
				param.addAttr("recordId", id);
				
				result = super.delete(param, NAMESPACE);
			}
		} else if (!StringUtils.isEmpty(params.getAttr("recordId"))) {
			result = super.delete(params, NAMESPACE);
		} else {
			throw new AppException(DuoduoError.DELETE_NO_ID);
		}
		return result;
	}
	
	
	/**
	 * deleteByApplyId
	 * @param params
	 * @return
	 */
	public AppResult deleteByApplyId(AppParam params) {
		AppResult result = new AppResult();
		String curDate = (String)params.getAttr("curDate");
		params.addAttr("tableName", StoreOptUtil.getTableName(curDate));
		super.getDao().delete(NAMESPACE, "deleteByApplyId", params.getAttr(),params.getDataBase());
		return result;
	}
	
	/***
	 * 查询门店的待处理，上门量，签单量，成功量等统计
	 * @return
	 */
	public AppResult queryOrderCount(AppParam params){
		params.addAttr("tableName", StoreOptUtil.getTableName(null));
		return super.query(params, NAMESPACE,"queryOrderCount");
	}
	
	/***
	 * 查询门店人员的接单记录
	 * @return
	 */
	public AppResult queryStoreRecRecord(AppParam params){
		String curDate = StringUtil.getString(params.getAttr("startReceviceDate"));
		String tableName = StoreOptUtil.getTableName(curDate);
		params.addAttr("tableName", tableName);
		return super.queryByPage(params, NAMESPACE,"queryStoreRecRecord","queryStoreRecRecordCount");
	}
	
	/***
	 * 查询门店分单量
	 * @param params
	 * @return
	 */
	public AppResult queryOrgAllotCount(AppParam params){
		AppResult result = new AppResult();
		params.addAttr("tableName", StoreOptUtil.getTableName(null));
		try{
			int size = getDao().count(NAMESPACE, "queryOrgAllotCount",params.getAttr(),params.getDataBase());
			result.putAttr(DuoduoConstant.TOTAL_SIZE, size);
		}catch(Exception e){
			// 出现插入异常
			boolean havTable = this.isExsitTable(params);
			if(!havTable){
				createNewTable(params);
				//进行查询操作
				int size = getDao().count(NAMESPACE, "queryOrgAllotCount",params.getAttr(),params.getDataBase());
				result.putAttr(DuoduoConstant.TOTAL_SIZE, size);
			}
		}
		
		return result;
	}
	
	/**
	 * 查询用户接单记录（获取最近的一条记录）
	 * queryCustAllotRecord
	 * @param params
	 * @return
	 */
	public AppResult queryCustAllotRecord(AppParam params) {
		AppResult result = new AppResult();
		String curDate = StringUtil.getString(params.getAttr("curDate"));
		String tableName = StoreOptUtil.getTableName(curDate);
		params.addAttr("tableName", tableName);
		try{
			result = super.query(params, NAMESPACE,"queryCustAllotRecord");
		}catch(Exception e){
			// 出现插入异常
			boolean havTable = this.isExsitTable(params);
			if(!havTable){
				createNewTable(params);
				//进行查询操作
				result = super.query(params, NAMESPACE,"queryCustAllotRecord");
			}
		}
		return result;
	}

}
