package org.xxjr.cust.util.info;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.text.ParseException;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.temporal.TemporalAdjusters;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.time.DateUtils;
import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.exception.DuoduoError;
import org.ddq.common.exception.SysException;
import org.ddq.common.util.DateUtil;
import org.ddq.common.util.LogerUtil;
import org.ddq.common.util.StringUtil;
import org.ddq.zk.service.RemoteInvoke;
import org.springframework.util.StringUtils;
import org.xxjr.cust.util.fund.CustAmountUtil;
import org.xxjr.fx.util.FxCustomerUtil;
import org.xxjr.sys.util.NumberUtil;
import org.xxjr.sys.util.ServiceKey;
import org.xxjr.sys.util.SysParamsUtil;

public class MjbCustFundUtil {

	/**
	 * 提现申请
	 * @param params
	 * @return
	 */
	public static AppResult withdrawApply(AppParam params) {
		AppResult result = new AppResult();
		if(StringUtils.isEmpty(params.getAttr("customerId"))
				|| StringUtils.isEmpty(params.getAttr("amount"))){
			result.setSuccess(false);
			result.setMessage("缺少提现申请参数");
			return result;
		}
		String customerId = params.getAttr("customerId").toString();
		double amount = Double.valueOf(params.getAttr("amount").toString());
		// 判断实名
		Map<String,Object> userInfo = MjbCustomerIdentify.getCustIdentify(customerId);
		if(StringUtils.isEmpty(userInfo.get("realName"))){
			result.setSuccess(Boolean.FALSE);
			result.setMessage("您当前尚未实名，不能进行提现操作，请先实名认证");
			return result;
		}
		if(StringUtils.isEmpty(userInfo.get("company"))){
			result.setSuccess(Boolean.FALSE);
			result.setMessage("请先做个人信息认证才能抢单！");
			return result;
		}
		// 判断是否已还清
		Map<String,Object> userAmount = CustAmountUtil.getCustAmount(customerId);
		if(NumberUtil.getDouble(userAmount.get("leftRepayAmount")) > 0){
			return CustomerUtil.retErrorMsg("你还有资金未还清，不能进行提现操作");
		}
		if (Double.valueOf(userAmount.get("seniorAmount").toString()) < amount) {
			return CustomerUtil.retErrorMsg("提现金额 不能大于当前可用余额：" + userAmount.get("seniorAmount"));
		}
		Map<String,Object> bankCardInfo = queryBankCard(customerId);
		// 保存提现申请
		AppParam withdrawParam = new AppParam();
		withdrawParam.setService("withdrawService");
		withdrawParam.setMethod("tjWithdraw");
		withdrawParam.addAttr("customerId", customerId);
		withdrawParam.addAttr("amount", amount);
		withdrawParam.addAttr("poundage", SysParamsUtil.getIntParamByKey("defaultWithdrawPoundage", 2));
		withdrawParam.addAttrs(bankCardInfo);
		withdrawParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_mjb));
		return RemoteInvoke.getInstance().call(withdrawParam);
	}
	
	/**
	 * 查询用户银行卡信息
	 */
	public static Map<String, Object> queryBankCard(String customerId){
		AppParam bankCard = new AppParam();
		bankCard.setService("custBankService");
		bankCard.setMethod("query");
		bankCard.addAttr("customerId", customerId);
		bankCard.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_mjb));
		 AppResult result=RemoteInvoke.getInstance().call(bankCard);
		 if(result.getRows().size()>0){
			 return result.getRow(0);
		 }
		 return new HashMap<String, Object>();
	}
	
	/**
	 * 抢单时查询打折券信息
	 */
	public static Map<String, Object> queryCustTicket(String customerId, String ticketId){
		AppParam ticketParam = new AppParam();
		ticketParam.setService("custTicketService");
		ticketParam.setMethod("queryTicketDtl");
		ticketParam.addAttr("customerId", customerId);
		ticketParam.addAttr("ticketId", ticketId);
		ticketParam.addAttr("status", "1");
		ticketParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_mjb));
		 AppResult result=RemoteInvoke.getInstance().callNoTx(ticketParam);
		 if(result.getRows().size()>0){
			 return result.getRow(0);
		 }
		 return null;
	}
	
	/**
	 * 判断是否过有效期
	 * 
	 * @param customerId
	 * @return
	 */
	public static boolean canUse(String startDate,String endDate) {
		if (!StringUtils.isEmpty(startDate) && !StringUtils.isEmpty(endDate)) {
			Date now = new Date();
			try {
				Date startTime = DateUtils.parseDate(startDate
						+ " 00:00:00", new String[]{DateUtil.DATE_PATTERN_YYYY_MM_DD_HHMMSS});
				Date endTime = DateUtils.parseDate(endDate
						+ " 23:59:59", new String[]{DateUtil.DATE_PATTERN_YYYY_MM_DD_HHMMSS});
				if (startTime.compareTo(now) < 0 && endTime.compareTo(now) > 0) {
					return true;
				}
			} catch (ParseException e) {
				LogerUtil.error(CustInfoUtil.class, e, "parseDate error");
			}
		}
		return false;
	}
	
	/**
	 * 查询用户未使用的赠送金额
	 * @param customerId
	 * @param usableAmount
	 * @return
	 */
	public static double getUnusedAmount(String customerId, Object usableAmount) {
		double differ = 0;// 还未用完的赠送金额
		AppParam param = new AppParam();
		param.setService("rechargeService");
		param.setMethod("queryRechargeRecords");
		param.addAttr("startDate", SysParamsUtil.getStringParamByKey("rechargeActivityDate", "2018-02-28"));
		param.addAttr("customerId", customerId);
		param.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_mjb));
		AppResult result = RemoteInvoke.getInstance().callNoTx(param);
		List<Map<String,Object>> records = result.getRows();
		double custUsableAmount = NumberUtil.getDouble(usableAmount, 0);
		if (records.size() == 0 && custUsableAmount > 0) {
			differ = custUsableAmount;
		}else{
			Map<String,Object> rechargeSummary = records.get(0);
			double totalAmount = NumberUtil.getDouble(rechargeSummary.get("totalAmount"), 0);
			if(totalAmount <= 0){
				differ = custUsableAmount;
			}else{
				if(custUsableAmount > totalAmount){
					differ = custUsableAmount - totalAmount;
				}
			}
		}
		return differ;
	}

	
	/**
	 * 推荐贷款提现申请
	 */
	public static AppResult tjWithdrawApply(AppParam params) {
		AppResult result = new AppResult();
		String customerId = StringUtil.getString(params.getAttr("customerId"));
		String amountStr = StringUtil.getString(params.getAttr("amount"));
		if(StringUtils.isEmpty(customerId) || StringUtils.isEmpty(amountStr)){
			result.setSuccess(false);
			result.setMessage("缺少提现申请参数");
			return result;
		}
		double amount = NumberUtil.getDouble(amountStr, 0);
		// 判断最低提现金额
		int minWithdrawAmt = SysParamsUtil.getIntParamByKey("minWithdrawAmt", 100);
		if(amount < minWithdrawAmt){
			result.setSuccess(false);
			result.setMessage("低于" + minWithdrawAmt + "元不能进行提现操作！");
			return result;
		}
		// 判断是否实名认证
		Map<String,Object> custInfo = MjbCustomerIdentify.getCustIdentify(customerId);
		String identifyStatus = StringUtil.getString(custInfo.get("identifyStatus"));
		if(!"1".equals(identifyStatus)){
			result.setSuccess(false);
			result.setMessage("您当前尚未实名，不能进行提现操作，请先实名认证");
			return result;
		}
		// 判断提现金额是否大于佣金金额
		Map<String, Object> amtMap = CustAmountUtil.getCustAmount(customerId);
		double rewardAmount = NumberUtil.getDouble(amtMap.get("rewardAmount"), 0);
		if (rewardAmount < amount) {
			result.setSuccess(false);
			result.setMessage("提现金额 不能大于佣金金额：" + rewardAmount);
			return result;
		}
		// 判断是否绑卡
		AppParam bankParam = new AppParam();
		bankParam.addAttr("customerId", customerId);
		AppResult bankResult = BaoFooRealBindDealUtil.queryBindBankCardInfo(bankParam);
		if (bankResult.getRows().size() == 0) {
			result.setSuccess(false);
			result.setMessage("您尚未绑定银行卡，无法进行提现操作！");
			return result;
		}
		Map<String,Object> bankCardInfo = bankResult.getRow(0);
		// 保存提现申请
		AppParam withdrawParam = new AppParam();
		withdrawParam.setService("withdrawService");
		withdrawParam.setMethod("tjWithdraw");
		withdrawParam.addAttr("customerId", customerId);
		withdrawParam.addAttr("amount", amount);
		withdrawParam.addAttr("bankCode", bankCardInfo.get("bankCode"));// 银行编号
		withdrawParam.addAttr("bankName", bankCardInfo.get("bankName"));// 银行名称
		withdrawParam.addAttr("cardCode", bankCardInfo.get("bankCardNo"));// 提现账号
		withdrawParam.addAttr("poundage", SysParamsUtil.getIntParamByKey("tjDefaultWithdrawPoundage", 1));// 提现手续费
		withdrawParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_mjb));
		return RemoteInvoke.getInstance().call(withdrawParam);
	}
	
	
	/**
	 * 批量发放佣金
	 * @param withdrawIds
	 * @return
	 */
	public static AppResult batchSendReward(String withdrawIds,String realName){
		for(String withdrawId : withdrawIds.split(",|，")){
			sendReward(withdrawId,realName);
		}
		return new AppResult();
	}
	
	/**
	 * 批量查询佣金发放状态
	 * @param withdrawIds
	 * @return
	 */
	public static AppResult batchQueryRewardStatus(String withdrawIds){
		for(String withdrawId : withdrawIds.split(",|，")){
			queryRewardStatus(withdrawId);
		}
		return new AppResult();
	}
	
	
	/**
	 * 推荐贷款佣金发放
	 * @param withdrawId
	 * @return
	 */
	private static AppResult sendReward(String withdrawId,String realName){
		// 查询提现记录
		AppParam queryParam = new AppParam("withdrawService", "query");
		queryParam.addAttr("withdrawId", withdrawId);
		queryParam.addAttr("withdrawType", "tj");// 推荐贷款类型
		queryParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_mjb));
		AppResult queryResult = RemoteInvoke.getInstance().callNoTx(queryParam);
		if(queryResult.getRows().size() <= 0){
			throw new SysException(DuoduoError.UPDATE_DATA_IS_NOTEXISTS);
		}
		Map<String,Object> withdrawInfo = queryResult.getRow(0);
		String status = StringUtil.getString(withdrawInfo.get("status"));
		if("4".equals(status)){
			throw new SysException("当前提现记录" + withdrawId + "已发放成功");
		}
		if(!"1".equals(status)){
			throw new SysException("当前状态不允许发放佣金");
		}
		
		// 提现日期
		Date createTime = DateUtil.toDateByString(StringUtil.getString(withdrawInfo.get("createTime")),
				DateUtil.DATE_PATTERN_YYYY_MM_DD_HHMMSS);
		
		// 每月25号结算上月佣金
		Date now = new Date();
		String settlementDateStr = SysParamsUtil.getStringParamByKey("settlementDate","-25");
		String curMonth = DateUtil.toStringByParttern(now, "yyyy-MM");
		Date twentyFiveDay = DateUtil.toDateByString(curMonth + settlementDateStr, DateUtil.DATE_PATTERN_YYYY_MM_DD);
		
		// 如果当天时间小于25号，则取上个月的1号，否则取当前时间
		Date settlementDate = now.getTime() < twentyFiveDay.getTime() ? DateUtil
				.minu(LocalDateTime.now().with(TemporalAdjusters.firstDayOfMonth())
						.with(LocalTime.MIN), 1, DateUtil.ChronoUnit_MONTHS)
				: now;
		
		if (createTime.getTime() > settlementDate.getTime()) {
			throw new SysException("当前提现记录" + withdrawId + "未到结算日不能发放！");
		}
		// 判断账户余额是否够发放佣金
		AppParam amountParam = new AppParam();
		amountParam.setService("fxAccountInfoService");
		amountParam.setMethod("queryAmtSummary");
		amountParam.addAttr("type", FxCustomerUtil.ACCOUNT_TYPE);
		amountParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sho));
		AppResult amountResult = RemoteInvoke.getInstance().callNoTx(amountParam);
		if(amountResult.getRows().size() == 0){
			throw new SysException("充值账户尚未进行初始化！");
		}
		Map<String,Object> amtMap = amountResult.getRow(0);
		double tjAmt = NumberUtil.getDouble(amtMap.get("tjAmt"), 0);// 推荐贷款账户余额
		double tradingAmt = NumberUtil.getDouble(amtMap.get("tradingAmt"), 0);
		
		// 手续费
		BigDecimal amount = new BigDecimal(withdrawInfo.get("amount").toString()).setScale(2, RoundingMode.HALF_UP);
		BigDecimal poundage = new BigDecimal(withdrawInfo.get("poundage").toString()).setScale(2, RoundingMode.HALF_UP);

		if(tjAmt - tradingAmt < amount.doubleValue()){
			throw new SysException("对公充值账户余额已不足发放佣金！");
		}
		
		AppParam param = new AppParam();
		param.addAttr("bankName", withdrawInfo.get("bankName"));// 银行名称
		param.addAttr("cardCode", withdrawInfo.get("cardCode"));// 提现账号
		param.addAttr("amount", amount);//  提现金额
		param.addAttr("poundage", poundage);// 提现手续费
		Map<String,Object> custInfo = MjbCustomerIdentify.getCustIdentify(withdrawInfo.get("customerId").toString());
		param.addAttr("telephone", custInfo.get("telephone"));
		param.addAttr("realName", custInfo.get("realName"));
		param.addAttr("cardNo", custInfo.get("cardNo"));
		param.addAttr("remark", "推荐贷款提现");
		Map<String,Object> resultMap = callAgentPay(param);
		
		String payStatus = resultMap.get("status").toString();
		// 修改提现状态
		AppParam updateParam = new AppParam("withdrawService", "update");
		updateParam.addAttr("withdrawId", withdrawId);
		updateParam.addAttr("status", "3");
		if("-1".equals(payStatus)){
			updateParam.addAttr("status", "5");
		}
		updateParam.addAttr("returnCode", resultMap.get("errorCode"));
		updateParam.addAttr("returnMsg", resultMap.get("errorMsg"));
		BigDecimal realAmount = new BigDecimal(amount.doubleValue()- poundage.doubleValue()).setScale(2, RoundingMode.HALF_UP);
		updateParam.addAttr("realAmount", realAmount);// 真实提现金额
		updateParam.addAttr("orderNo", resultMap.get("orderNo"));
		updateParam.addAttr("backTime", now);// 回调时间
		updateParam.addAttr("checkBy", realName);// 发放人
		updateParam.addAttr("checkTime", now);// 发放时间
		updateParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_mjb));
		return RemoteInvoke.getInstance().call(updateParam);
	}
	
	/**
	 * 查询佣金发放状态
	 * @param withdrawId
	 * @return
	 */
	public static AppResult queryRewardStatus(String withdrawId){
		AppResult result = new AppResult();
		// 查询记录
		AppParam queryParam = new AppParam();
		queryParam.setService("withdrawService");
		queryParam.setMethod("query");
		queryParam.addAttr("withdrawId", withdrawId);
		queryParam.addAttr("withdrawType", "tj");// 推荐贷款类型
		queryParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_mjb));
		AppResult queryResult = RemoteInvoke.getInstance().callNoTx(queryParam);
		if(queryResult.getRows().size() <= 0){
			throw new SysException(DuoduoError.UPDATE_DATA_IS_NOTEXISTS);
		}
		Map<String,Object> withdrawInfo = queryResult.getRow(0);
		String tranStatus = StringUtil.getString(withdrawInfo.get("status"));
		if (!"3".equals(tranStatus)) {
			throw new SysException("当前状态不允许交易查询");
		}
		
		// 调用宝付接口查询状态
		Object orderNo = withdrawInfo.get("orderNo");
		Map<String,Object> resultMap = callQueryAgentPayStatus(orderNo);
		
		// 修改提现状态
		String status = org.ddq.common.util.StringUtil.getString(resultMap.get("status"));
		AppParam updateParam = new AppParam("withdrawService", "queryStatusSuccess");
		if("1".equals(status)){
			updateParam.addAttr("status", "4");// 提现成功
		}else if("-1".equals(status)){
			updateParam.addAttr("status", "5");// 提现失败
			updateParam.addAttr("returnCode", resultMap.get("errorCode"));
			updateParam.addAttr("returnMsg", resultMap.get("errorMsg"));
		}
		updateParam.addAttr("fromStatus", "3");
		updateParam.addAttr("orderNo", orderNo);
		updateParam.addAttr("withdrawId", withdrawId);
		updateParam.addAttr("amount", withdrawInfo.get("amount"));
		updateParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_mjb));
		result = RemoteInvoke.getInstance().call(updateParam);
		if (result.isSuccess()) {
			// 代付成功修改分公司金额
			String infoId = StringUtil.getString(FxCustomerUtil.getRechargeAmount((FxCustomerUtil.ACCOUNT_TYPE)).get("infoId"));
			AppParam amountParam = new AppParam();
			amountParam.setService("fxAccountInfoService");
			amountParam.setMethod("updateAccountInfo");
			amountParam.addAttr("method", "sendTjRewardSuccess");// 推荐贷款佣金发放
			amountParam.addAttr("infoId", infoId);
			amountParam.addAttr("amount", withdrawInfo.get("amount"));
			amountParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_sho));
			RemoteInvoke.getInstance().call(amountParam);
			
			// 刷新充值金额缓存
			FxCustomerUtil.refershRechargeAmount(infoId);
		}
		return result;
	}
	
	/**
	 * 宝付代付接口
	 * @param param
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public static Map<String,Object> callAgentPay(AppParam param){
		AppParam payParam = new AppParam("paymentService","rechargeBackPay");
		payParam.addAttr("payType", "baofoo");
		payParam.addAttr("bankCardNo", param.getAttr("cardCode"));// 提现账号
		payParam.addAttr("bankName", param.getAttr("bankName"));
		payParam.addAttr("amount", param.getAttr("amount"));
		payParam.addAttr("payFee", param.getAttr("poundage"));// 手续费
		payParam.addAttr("telephone", param.getAttr("telephone"));
		payParam.addAttr("holderName",  param.getAttr("realName"));
		payParam.addAttr("identityNo", param.getAttr("cardNo"));
		payParam.addAttr("remark", param.getAttr("remark"));
		payParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_col));
		AppResult payResult = RemoteInvoke.getInstance().call(payParam);
		Map<String,Object> resultMap = (Map<String,Object>)payResult.getAttr("resultMap");
		if(StringUtils.isEmpty(resultMap)){
			throw new SysException("付款发放请求接口失败");
		}
		LogerUtil.log("payResult resultMap:" + resultMap.toString());
		return resultMap;
	}
	
	/**
	 * 宝付代付接口
	 * @param param
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public static Map<String,Object> callQueryAgentPayStatus(Object orderNo){
		AppParam payParam = new AppParam("paymentService","queryAgentPayStatus");
		payParam.addAttr("payType", "baofoo");
		payParam.addAttr("orderNo", orderNo);
		payParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_col));
		AppResult payResult = RemoteInvoke.getInstance().call(payParam);
		Map<String,Object> resultMap = (Map<String,Object>)payResult.getAttr("resultMap");
		if(StringUtils.isEmpty(resultMap)){
			throw new SysException("查询付款发放状态接口失败");
		}
		LogerUtil.log("queryAgentPayStatus payResult resultMap:" + resultMap.toString());
		return resultMap;
	}
	
	public static void main(String[] args) {
		System.out.println(DateUtil
				.minu(LocalDateTime.now().with(TemporalAdjusters.firstDayOfMonth())
						.with(LocalTime.MIN), 1, DateUtil.ChronoUnit_MONTHS));
	}
}
