package org.xxjr.goods.util;

import java.awt.AlphaComposite;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.geom.Ellipse2D;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Serializable;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.imageio.ImageIO;

import org.apache.commons.io.FileUtils;
import org.ddq.common.context.AppProperties;
import org.ddq.common.exception.SysException;
import org.ddq.common.util.DateUtil;
import org.ddq.common.util.JsonUtil;
import org.ddq.common.util.LogerUtil;
import org.ddq.common.util.StringUtil;
import org.ddq.common.web.util.QRCodeUtils;
import org.ddq.model.cache.RedisUtils;
import org.springframework.util.StringUtils;
import org.xxjr.busi.util.kf.D35LoanApplyUtil;
import org.xxjr.fx.util.FxCustomerUtil;
import org.xxjr.sys.util.SysParamsUtil;
import org.xxjr.wx.message.WXMaterialUtil;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.EncodeHintType;
import com.google.zxing.MultiFormatWriter;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;

/**
 * 图片处理工具类
 * 功能：缩放图像、切割图像、图像类型转换、彩色转黑白、文字水印、图片水印
 */
public class FxImageUtil {
    
    /**
     * 生成海报图片
     * @param posterConfig
     * @param headImg
     * @param nameText
     * @param prodImg
     * @param qrCodeUrl
     * @return
     */
    public final static BufferedImage generatePoster(String custId, String prodId, Map<String, Object> posterConfig,
    		Object prodImg, Object qrCodeUrl){
    	List<Map<String,Object>> paramList = new ArrayList<Map<String,Object>>();
		Map<String, Object> custInfo = FxCustomerUtil.getCustIdentify(custId);
		String headImg = StringUtil.getString(custInfo.get("headImgUrl"));
    	if(StringUtils.isEmpty(headImg)){
    		headImg = SysParamsUtil.getStringParamByKey("fxPosterDefaultHeadImg", "https://sys.xxjr.com/images/icon/1fxmr.png");
    	}
    	headImg = headImg.toString().replace("https", "http");
    	if(prodImg != null){
    		prodImg = prodImg.toString().replace("https", "http");
    	}
    	if(!StringUtils.isEmpty(headImg)){ // 头像
    		Map<String,Object> headMap = new HashMap<String, Object>();
    		headMap.put("pressImgPath", headImg);
    		headMap.put("shape", "1"); // 是否切图成圆形
    		headMap.put("paramKey", "image");
    		headMap.put("beginX", posterConfig.get("headImgMarginLeft"));
    		headMap.put("beginY", posterConfig.get("headImgMarginTop"));
    		headMap.put("fontSize", posterConfig.get("headImgSize"));
    		paramList.add(headMap);
    	}
    	String nameText = StringUtil.getString(custInfo.get("realName"));
    	Map<String,Object> nameMap = new HashMap<String, Object>();
    	nameMap.put("paramKey", "text");
    	nameMap.put("beginX", posterConfig.get("nameMarginLeft"));
    	nameMap.put("beginY", posterConfig.get("nameMarginTop"));
    	nameMap.put("fontSize", posterConfig.get("nameSize"));
    	nameMap.put("nameColor", posterConfig.get("nameColor"));
    	if(!StringUtils.isEmpty(nameText)){ // 姓名
    		nameMap.put("textcont", FxCustomerUtil.hideName(nameText));
    	}else{
    		nameMap.put("textcont", custInfo.get("telephone"));
    	}
    	paramList.add(nameMap);
    	if(!StringUtils.isEmpty(qrCodeUrl)){ // 二维码
    		Map<String,Object> qrCodeMap = new HashMap<String, Object>();
    		qrCodeMap.put("pressImgPath", qrCodeUrl);
    		qrCodeMap.put("qrCodeUrl", qrCodeUrl);
    		qrCodeMap.put("paramKey", "image");
    		qrCodeMap.put("beginX", posterConfig.get("qrcodeMarginLeft"));
    		qrCodeMap.put("beginY", posterConfig.get("qrcodeMarginTop"));
    		qrCodeMap.put("fontSize", posterConfig.get("qrcodeSize"));
    		qrCodeMap.put("type", "qrcode");
    		paramList.add(qrCodeMap);
    	}
    	//工号
    	String workNo = StringUtil.getString(custInfo.get("workNo"));
    	if(!StringUtils.isEmpty(workNo)){
    		Map<String,Object> workNoMap = new HashMap<String, Object>();
    		String workNoText = "工号：" + workNo;
    		workNoMap.put("textcont", workNoText);
    		workNoMap.put("paramKey", "text");
    		workNoMap.put("beginX", posterConfig.get("workNoMarginLeft"));
    		workNoMap.put("beginY", posterConfig.get("workNoMarginTop"));
    		workNoMap.put("fontSize", posterConfig.get("workNoSize"));
    		workNoMap.put("nameColor", posterConfig.get("workNoColor"));
    		paramList.add(workNoMap);
    	}
		return generatePoster(custId, prodId, StringUtil.getString(posterConfig.get("posterBgImg")), paramList);
    }
    
    /**
     * 在背景图片进行绘制
     * @param srcImageFile
     * @param param
     * @return
     */
    private static BufferedImage generatePoster(String custId, String prodId, String posterBgImg, List<Map<String,Object>> param){
    	BufferedImage image = null;
    	ByteArrayOutputStream qrcodeOut = null;
    	FileOutputStream posterOutStream = null;
    	File posterFile = null;
    	InputStream is = null;
    	HttpURLConnection urlC = null;
        try {
        	Image src = null;
        	if(posterBgImg.startsWith("http")){
        		URL imageURL = new URL(posterBgImg);
        		urlC = (HttpURLConnection) imageURL.openConnection();
        		is = urlC.getInputStream();
        		src = ImageIO.read(is);
        	}else{
        		String bgPath = AppProperties.getProperties("upload.path.image") + posterBgImg;
        		src = ImageIO.read(new File(bgPath));
        	}
            int width = src.getWidth(null);
            int height = src.getHeight(null);
            image = new BufferedImage(width, height,
                    BufferedImage.TYPE_INT_RGB);
            Graphics2D g = image.createGraphics();
            g.drawImage(src, 0, 0, width, height, null);
            for(Map<String,Object> map : param){
            	String paramKey = map.get("paramKey").toString();
        		int x = Integer.valueOf(map.get("beginX").toString());
        		int y = Integer.valueOf(map.get("beginY").toString());
        		int fontSize = Integer.valueOf(map.get("fontSize").toString());
            	if("image".equals(paramKey)){
            		if(StringUtils.isEmpty(map.get("pressImgPath"))){
            			continue;
            		}
            		String pressImg = map.get("pressImgPath").toString();
            		BufferedImage src_biao = null;
            		pressImg = pressImg.replace("https", "http");
        			if(pressImg.startsWith("http://") || pressImg.startsWith("https://")){
        				if("qrcode".equals(StringUtil.getString(map.get("type")))){
        					qrcodeOut = new ByteArrayOutputStream();
        					String qrCodeUrl = StringUtil.getString(map.get("qrCodeUrl"));
        					int modifyFxQrcodeFlag = SysParamsUtil.getIntParamByKey("modifyFxQrcodeFlag", 0);
        					if(modifyFxQrcodeFlag == 1){
        						int fxQrcodeSize = SysParamsUtil.getIntParamByKey("fxQrcodeDefaultSize", 320);
        						generateQRCode(qrcodeOut, qrCodeUrl, fxQrcodeSize, 1);
        					}else{
        						QRCodeUtils.generateQRCode(qrcodeOut, qrCodeUrl, 300);
        					}
        					src_biao = ImageIO.read(new ByteArrayInputStream(qrcodeOut.toByteArray()));
        				}else{
        					src_biao = ImageIO.read(new URL(pressImg));
        				}
        			}else{
        				src_biao = ImageIO.read(new File(pressImg));
        			}
                    g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_ATOP, 1f));
                    
                    if(!pressImg.endsWith("fxmr.png") && "1".equals(StringUtil.getString(map.get("shape")))){
                    	BufferedImage bi1 = src_biao;
                    	int tempWidth = bi1.getWidth();
                    	int tempHeight = bi1.getHeight();
                    	// 新画布bi2
                    	BufferedImage bi2 = new BufferedImage(tempWidth, tempHeight, BufferedImage.TYPE_INT_ARGB);
                    	Ellipse2D.Double shape = new Ellipse2D.Double(0, 0, bi1.getWidth(), bi1
                    			.getHeight());
                    	Graphics2D tempG2 = bi2.createGraphics();
                    	tempG2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_ATOP, 1.0f));// 1.0f为透明度 ，值从0-1.0，依次变得不透明 
//                		g2.setBackground(new Color(255, 0, 0));
                    	tempG2.fill(new Rectangle(bi2.getWidth(), bi2.getHeight()));
                    	tempG2.setClip(shape);
                    	tempG2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER));
                    	tempG2.drawImage(bi1, 0, 0, null);
                    	tempG2.dispose();
                    	
                    	g.drawImage(bi2, x, y, fontSize, fontSize, null);
                    }else{
                    	g.drawImage(src_biao, x, y, fontSize, fontSize, null);
                    }
            	}else if("text".equals(paramKey)){
            		if(StringUtils.isEmpty(map.get("textcont"))){
            			continue;
            		}
            		Font font = null;
            		int loadLocalFont = SysParamsUtil.getIntParamByKey("loadLocalFont", 1);
            		if(loadLocalFont == 1){
            			String fontName = SysParamsUtil.getStringParamByKey("fxAllPosterFontName", "/nfsfile/mall/font/msyh.ttf");
						font = loadFont(fontName, fontSize);
            		}else{
            			font = new Font("宋体", Font.BOLD, fontSize);
            		}
            		if(font == null){
        				continue;
        			}
            		g.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_LCD_HRGB);
            		g.setColor(Color.black);
            		if(!StringUtils.isEmpty(map.get("nameColor"))){
            			String nameColor = StringUtil.getString(map.get("nameColor")).replaceAll("#", "");
            			g.setColor(new Color(Integer.parseInt(nameColor, 16)));
            		}
            		g.setFont(font); 
            		g.drawString(map.get("textcont").toString(), x, y);
            	}
            }
            g.dispose();
            
    		String imagePath = AppProperties.getRealPath() +"/" + UUID.randomUUID().toString() + ".png";
    		posterOutStream = new FileOutputStream(imagePath); 
            ImageIO.write(image, "JPG", posterOutStream);
        } catch (Exception e) {
        	LogerUtil.error(FxImageUtil.class, e, "pressTextStream error!");
        } finally{
        	if(null != qrcodeOut){
        		try {
					qrcodeOut.close();
				} catch (IOException e) {
					LogerUtil.error(FxImageUtil.class, e, "qrcodeOut close error!");
				}
        	}
        	if(null != posterOutStream){
        		try {
        			posterOutStream.close();
				} catch (IOException e) {
					LogerUtil.error(FxImageUtil.class, e, "posterOutStream close error!");
				}
        	}
        	FileUtils.deleteQuietly(posterFile);
        }
        return image;
    }

    
    /**
     * 加载字体文件创建新字体
     * @param fontFileName
     * @param fontSize
     * @return
     */
	private static Font loadFont(String fontFileName, float fontSize) {
		try {
			File file = new File(fontFileName);
			FileInputStream aixing = new FileInputStream(file);
			Font dynamicFont = Font.createFont(Font.TRUETYPE_FONT, aixing);
			Font dynamicFontPt = dynamicFont.deriveFont(fontSize);
			aixing.close();
			return dynamicFontPt;
		} catch (Exception e) {
			LogerUtil.error(FxImageUtil.class, e, "loadFont error!");
			return new Font("宋体", Font.PLAIN, 20);
		}
	}
    
	
	 /**
	 * 根据城市获取天气信息
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public static Map<String, Object> getWeatherInfo(String cityName){
		if (StringUtils.isEmpty(cityName)){
			return new HashMap<String, Object>();
		}
		Calendar cal = Calendar.getInstance();
		int dayOfMonth = cal.get(Calendar.DAY_OF_MONTH);
		Map<String, Object> weatherInfo = (Map<String, Object>) RedisUtils.getRedisService().get("fxWeatherPoster_"+cityName+dayOfMonth);
		if(weatherInfo != null && !weatherInfo.isEmpty()){
			// 判断是否
			return weatherInfo;
		}
		Map<String, Object> basicInfo = new HashMap<String, Object>();
		String week = getWeekOfDate();// 周几
		String today = DateUtil.toStringByParttern(cal.getTime(), "MM.dd");// 当天日期
		// 请求天气信息参数
		String weatherUrl = "http://api.map.baidu.com/telematics/v3/weather";
		Map<String, Object> reqMap = new HashMap<String, Object>();
		reqMap.put("location", cityName);// 城市
		reqMap.put("output", "json");// json格式
		reqMap.put("ak", "53SGFmTekwIIbcOuoUHsSQBjUy5rV8dn");// 请求密匙
		try {
			String backData = D35LoanApplyUtil.net(weatherUrl, reqMap, "GET");// 百度返回结果集
			Map<String, Object> backMap = JsonUtil.getInstance().json2Object(backData, Map.class);
			String backStatus = StringUtil.getString(backMap.get("status"));// 返回状态，success表示成功返回
			String results = StringUtil.getString(backMap.get("results"));
			if (!StringUtils.isEmpty(backData) && "success".equals(backStatus)) {
				List<Map<String, Object>> resultList = JsonUtil.getInstance().json2Object(results, List.class);
				if (resultList !=null && resultList.size() > 0) {
					// 返回天气信息结果集
					List<Map<String, Object>> weatherList = (List<Map<String, Object>>)resultList.get(0).get("weather_data");
					Map<String, Object> weatherMap = weatherList.get(0);
					if (weatherMap!=null && weatherMap.size() > 0) {
						basicInfo.put("temperature", weatherMap.get("temperature"));// 温度
						basicInfo.put("weather", weatherMap.get("weather"));// 天气气候
						basicInfo.put("date", week + "  " + today + "  " + cityName);// 日期
						RedisUtils.getRedisService().set("fxWeatherPoster_" + cityName+dayOfMonth, (Serializable)basicInfo, 3600*24);
					}
				}
			}
		} catch (Exception e) {
			LogerUtil.error(FxImageUtil.class, e, "getWeatherInfo error");
		}
		return basicInfo;
	}
	
	/**
	 * 获取周数
	 * @return
	 */
    public static String getWeekOfDate() {
        String[] weekDays = {"周日", "周一", "周二", "周三", "周四", "周五", "周六"};
        Calendar cal = Calendar.getInstance();
        return weekDays[cal.get(Calendar.DAY_OF_WEEK) - 1];
    }
    
    /**
     * 生成二维码
     * @param ot
     * @param url
     * @param size
     */
    public static void generateQRCode(OutputStream ot, String url,int size, int margin) {
		MultiFormatWriter multiFormatWriter = new MultiFormatWriter();
		Map<EncodeHintType,Object> hints = new HashMap<EncodeHintType,Object>();
		hints.put(EncodeHintType.CHARACTER_SET, "UTF-8");
		hints.put(EncodeHintType.MARGIN, margin);
		BitMatrix bitMatrix;
		try {
			bitMatrix = multiFormatWriter.encode(url, BarcodeFormat.QR_CODE,
					size, size, hints);
			MatrixToImageWriter.writeToStream(bitMatrix, "jpg", ot);
		} catch (Exception e) {
			LogerUtil.error(QRCodeUtils.class, e, "generateQRCode error!");
			throw new SysException(e.getMessage());
		}
	}
  
    
    /**
	 * 获取天气海报配置
	 * 0-不展示 1-展示
	 */
	public static String[] getWeatherImageCfg(){
		String fxWeatherImageCfg = SysParamsUtil.getStringParamByKey("fxWeatherImageCfg","1,1,1,1,1,1,1,1,1,1");
		return fxWeatherImageCfg.split(",");
	}
	
	
	 /**
	 * 获取客服精选海报配置
	 * 0-不展示 1-展示
	 */
	public static String[] getChooseImageCfg(){
		String fxChooseImageCfg = SysParamsUtil.getStringParamByKey("fxChooseImageCfg","1,1,1,1,0,0,0,0,0,0");
		return fxChooseImageCfg.split(",");
	}
	
	/**
	 * 生成小小攒钱临时推广二维码
	 * @param customerId
	 * @param wxqrcodeUrl
	 * @param accessToken
	 * @return
	 */
	public final static BufferedImage generateXxzqQrcode(String customerId, String wxqrcodeUrl, String accessToken){
		Object mediaId = RedisUtils.getRedisService().get("xdjlXxzqPosterMediaId" + customerId);
    	if(mediaId != null){
    		byte[] fileByte = WXMaterialUtil.downloadFile(accessToken, mediaId.toString());
    		ByteArrayInputStream in = new ByteArrayInputStream(fileByte);
    		try {
    			BufferedImage image = ImageIO.read(in);
				return image;
			} catch (IOException e) {
				LogerUtil.error(FxImageUtil.class, e, "get by mediaId error!");
			}
    	}
    	File posterFile = null;
    	FileOutputStream posterOutStream = null;
    	// 
		try {
			BufferedImage qrcode = ImageIO.read(new URL(wxqrcodeUrl));
			String headImg = SysParamsUtil.getStringParamByKey(
					"fxPosterDefaultImg",
					"https://sys.xxjr.com/wxtools/images/tool/credit_logo.png");
			int scale = 3;
			BufferedImage bufImg = ImageIO.read(new URL(headImg)); // 读取图片
			int width = bufImg.getWidth() / scale; // 得到源图宽
			int height = bufImg.getHeight() / scale; // 得到源图长
			Image Itemp = bufImg.getScaledInstance(width, height,
					BufferedImage.SCALE_SMOOTH);// 设置缩放目标图片模板
			BufferedImage bi = mergeImage(qrcode, bu(Itemp));
			if(!AppProperties.isDebug()){
				String imagePath = AppProperties.getRealPath() +"/" + UUID.randomUUID().toString() + ".png";
            	posterOutStream = new FileOutputStream(imagePath); 
                ImageIO.write(bi, "JPG", posterOutStream);
                posterFile = new File(imagePath);
            	mediaId = WXMaterialUtil.uploadImage(accessToken, posterFile);
            	RedisUtils.getRedisService().set("xdjlXxzqPosterMediaId" + customerId, (Serializable)mediaId, 3600*2);
            }
			return bi;
		} catch (Exception e) {
			LogerUtil.error(FxImageUtil.class, e, "");
		} finally {
			if(null != posterOutStream){
        		try {
        			posterOutStream.close();
				} catch (IOException e) {
					LogerUtil.error(FxImageUtil.class, e, "posterOutStream close error!");
				}
        	}
			FileUtils.deleteQuietly(posterFile);
		}
		return null;
	}
	
	/**
	 * image转BufferedImage
	 * @param image
	 * @return
	 */
	private static BufferedImage bu(Image image){
		int width = image.getWidth(null); 
		int height = image.getHeight(null); 
		BufferedImage bufferedImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB); 
		Graphics g = bufferedImage.getGraphics(); 
		//通过 BufferedImage 绘制图像并保存在其对象中 
		g.drawImage(image, 0, 0, width, height, null); 
		g.dispose(); 
		return bufferedImage; 
	}
	
	/**
	 * 在image1图片上画image2
	 * @param image1
	 * @param image2
	 * @param x  image2在image1上的横坐标
	 * @param y  image2在image1上的纵坐标
	 * @return
	 */
	private static BufferedImage mergeImage(BufferedImage image1, BufferedImage image2){
		int width1 = image1.getWidth();
        int height1 = image1.getHeight();
        
        int width2 = image2.getWidth();
        int height2 = image2.getHeight();
        
        BufferedImage bi = new BufferedImage(width1 , height1, BufferedImage.TYPE_INT_RGB);
        Graphics g = bi.getGraphics();
        g.setColor(Color.WHITE);//设置笔刷白色
        g.fillRect(0, 0, width1, height1);
    	g.drawImage(image1, 0, 0, null);
    	
    	int x = (width1 - width2) / 2;
    	int y = (height1 - height2) / 2;
    	g.drawImage(image2, x, y, null);
        g.dispose();
        return bi;
	}
	
}