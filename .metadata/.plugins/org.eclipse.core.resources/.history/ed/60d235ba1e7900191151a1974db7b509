package org.xxjr.busi.util;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.core.SpringAppContext;
import org.ddq.common.core.service.RemoteInvoke;
import org.ddq.common.core.service.SoaManager;
import org.ddq.common.util.DateUtil;
import org.llw.model.cache.RedisUtils;
import org.xxjr.sys.util.ServiceKey;

public class RecruitCfgUtil {
	/** 置顶费用信息  **/
	private final static String KEY_RECRUIT_TOP_CONFIG = "key_recruit_top_config";
	
	/** banner信息  **/
	private final static String KEY_RECRUIT_BANNER = "key_recruit_banner";
	
	/**
	 * 查询置顶配置信息
	 */
	@SuppressWarnings("unchecked")
	public static Map<String, Object> getRecruitTopCfg(){
		Map<String, Object> topConfig = (Map<String, Object>) RedisUtils
				.getRedisService().get(KEY_RECRUIT_TOP_CONFIG);
		if(topConfig == null){
			topConfig = refreshRecruitTopCfg();
		}
		return topConfig;
	}
		
	/**
	 * 刷新置顶配置信息
	 * @return
	 */
	public static Map<String, Object> refreshRecruitTopCfg(){
		AppParam param = new AppParam();
		param.setService("recruitTopConfigService");
		param.setMethod("query");
		param.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_zx));
		//若没有相应的对象，使用远程调用 
		AppResult result = new AppResult();
		if (SpringAppContext.getBean("recruitTopConfigService") == null) {
			result = RemoteInvoke.getInstance().call(param);
		}else{
			result = SoaManager.getInstance().invoke(param);
		}
		if(result.getRows().size() > 0){
			Map<String,Object> config = result.getRow(0);
			RedisUtils.getRedisService().set(KEY_RECRUIT_TOP_CONFIG, (Serializable)config, 3600 * 24 *7);
			return config;
		}
		return null;
	}
	
	/**
	 * 查询banner信息
	 */
	@SuppressWarnings("unchecked")
	public static List<Map<String, Object>> getRecruitBanner(){
		List<Map<String, Object>> info = (List<Map<String, Object>>) RedisUtils
				.getRedisService().get(KEY_RECRUIT_BANNER);
		if(info == null){
			info = refreshRecruitBanner();
		}
		Date now = new Date();
		List<Map<String, Object>> bannerInfo = new ArrayList<Map<String,Object>>();
		for (Map<String,Object> row : info) {
			Date validStartTime = DateUtil.toDateByString(row.get("validStartTime").toString(), "yyyy-MM-dd HH:mm:ss");
		    Date validEndTime = DateUtil.toDateByString(row.get("validEndTime").toString(), "yyyy-MM-dd HH:mm:ss");
		    if(now.compareTo(validStartTime) >=0 && now.compareTo(validEndTime) <= 0){
		    	bannerInfo.add(row);
		    }
		}
		return bannerInfo;
	}
		
	/**
	 * 刷新置顶配置信息
	 * @return
	 */
	public static List<Map<String, Object>> refreshRecruitBanner(){
		AppParam param = new AppParam();
		param.setService("recruitBannerService");
		param.setMethod("query");
		param.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_zx));
		param.addAttr("status", 1);
		param.setOrderBy("indexNum");
		param.setOrderValue("asc");
		//若没有相应的对象，使用远程调用 
		AppResult result = new AppResult();
		if (SpringAppContext.getBean("recruitBannerService") == null) {
			result = RemoteInvoke.getInstance().call(param);
		}else{
			result = SoaManager.getInstance().invoke(param);
		}
		List<Map<String, Object>> info = result.getRows();
		RedisUtils.getRedisService().set(KEY_RECRUIT_BANNER, (Serializable)info, 3600 * 24 *7);
		return info;
	}

}
