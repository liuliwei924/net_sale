package org.xxjr.job.listener.fx;

import java.util.Date;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.util.DateUtil;
import org.ddq.common.util.LogerUtil;
import org.ddq.job.core.BaseExecteJob;
import org.ddq.job.util.JobConstant;
import org.ddq.job.util.JobUtil;
import org.ddq.common.core.service.RemoteInvoke;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;
import org.xxjr.sys.util.ServiceKey;

/**
 * 统计分销系统每日情况，每一个小时执行一次
 * @author Administrator
 *
 */
@Lazy
@Component
public class DaySummaryStatJob implements BaseExecteJob {

	@Override
	public AppResult executeJob(AppParam param) {
		AppResult result = new AppResult();
		Object processId = param.getAttr(JobConstant.KEY_processId);
		LogerUtil.debug("start DaySummaryStatJob");
		
		//
		statFxDaySummary(processId);

		return result;
	}
	
	/**
	 * 分销系统每日情况
	 * @param day :某天
	 * @return
	 */
	private AppResult statFxDaySummary(Object processId){
		AppResult result = new AppResult();
		Date day = new Date();
		String recordDate = DateUtil.toStringByParttern(day, DateUtil.DATE_PATTERN_YYYY_MM_DD);
		try{	
			result = statSingleDaySummary(recordDate);
			//当前是插入操作,说明当前是当天第一次操作，同时刷新昨天的数据
			int optSize = (int) result.getAttr(DuoduoConstant.DAO_Insert_SIZE);
			if(optSize == 1){
				Date yesterday = DateUtil.getNextDay(day, -1);
				recordDate = DateUtil.toStringByParttern(yesterday, DateUtil.DATE_PATTERN_YYYY_MM_DD);
				result = statSingleDaySummary(recordDate);
			}
		}catch(Exception e){
			LogerUtil.error(this.getClass(), e, "statFxDaySummary executeJob error");
			JobUtil.addProcessExecute(processId, "统计分销每日数据 报错：" + e.getMessage() );
		}
		return result;
	}
	
	/**
	 * 统计单天情况
	 * @param  day :天
	 * @return {@link AppResult}
	 */
	private AppResult statSingleDaySummary(String recordDate){
		AppResult result = new AppResult();
		
		AppParam params = new AppParam("fxCustService","statSummary");
		params.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_sho));
		params.addAttr("recordDate", recordDate);
		AppResult sumResult = RemoteInvoke.getInstance().callNoTx(params);
		try {
			//保存到统计表
			AppParam saveParams = new AppParam("sumFxdayRecordService","save");
			saveParams.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_sum));
			saveParams.addAttr("recordDate", recordDate);
			saveParams.addAttrs(sumResult.getAttr());
			result = RemoteInvoke.getInstance().call(saveParams);
		} catch (Exception e) {
			LogerUtil.error(this.getClass(), e, "statSingleDaySummary query error");
		}
		return result;
	}
}
