package org.xxjr.busiIn.kf.ext;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppResult;
 import org.common.core.service.BaseService;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Service;

@Lazy
@Service
public class ChannelDtlMsSectionSumService extends BaseService {
	
	public static final String NAMESPACE = "CHANNELDTLMSSECTIONSUM";
	
	/**大渠道基本情况统计(跟进后)
	 * channelBase
	 * @param params
	 * @return
	 */
	public AppResult channelDtlBase(AppParam params) {
		return super.queryByPage(params, NAMESPACE, "channelBase", "channelBaseCount");
	}
	
	
	/**金额资质详细情况统计(跟进后)
	 * channelDtlAmount
	 * @param params
	 * @return
	 */
	public AppResult channelDtlAmount(AppParam params) {
		return super.queryByPage(params, NAMESPACE, "channelDtl", "channelBaseCount");
	}
	
	
	/**线索流向情况统计(跟进后)
	 * channelSale
	 * @param params
	 * @return
	 */
	public AppResult channelDtlSale(AppParam params) {
		return super.queryByPage(params, NAMESPACE, "channelSale", "channelBaseCount");
	}
	
	
	/**ROI情况统计(跟进后)
	 * channelROI
	 * @param params
	 * @return
	 */
	public AppResult channelROI(AppParam params) {
		return super.queryByPage(params, NAMESPACE, "channelROI", "channelBaseCount");
	}
	
	/**网销门店情况统计(跟进后)
	 * channelNet
	 * @param params
	 * @return
	 */
	public AppResult channelDtlNet (AppParam param) {
		return super.queryByPage(param, NAMESPACE, "channelNet", "channelBaseCount");
	}
	
	/**
	 * 共用的数量查询sql
	 * @param params
	 * @return
	 */
	public AppResult channelBaseCount(AppParam params) {
		int size = getDao().count(NAMESPACE, "channelBaseCount",params.getAttr(),params.getDataBase());
		AppResult result = new AppResult();
		result.putAttr(DuoduoConstant.TOTAL_SIZE, size);
		return result;
	}
	
	
	/**
	 * 共用的数量查询sql(原始的)
	 * @param params
	 * @return
	 */
	public AppResult channelOrigBaseCount(AppParam params) {
		int size = getDao().count(NAMESPACE, "channelOrigBaseCount",params.getAttr(),params.getDataBase());
		AppResult result = new AppResult();
		result.putAttr(DuoduoConstant.TOTAL_SIZE, size);
		return result;
	}
	
	/**大渠道基本情况统计(原始的)
	 * channelBase
	 * @param params
	 * @return
	 */
	public AppResult channelOrigBase(AppParam params) {
		return super.queryByPage(params, NAMESPACE, "channelOrigBase", "channelOrigBaseCount");
	}
	
	
	/**金额资质详细情况统计(原始的)
	 * channelDtl
	 * @param params
	 * @return
	 */
	public AppResult channelOrigDtl(AppParam params) {
		return super.queryByPage(params, NAMESPACE, "channelOrigDtl", "channelOrigBaseCount");
	}
	
	/**第三方渠道数据查询(对外)
	 * channelDtl
	 * @param params
	 * @return
	 */
	public AppResult thirdChannelSect(AppParam params) {
		return super.queryByPage(params, NAMESPACE, "thirdChannelSect", "thirdChannelSectCount");
	}
		
	public AppResult thirdChannelCount(AppParam params) {
		int size = getDao().count(NAMESPACE, "thirdChannelCount",params.getAttr(),params.getDataBase());
		AppResult result = new AppResult();
		result.putAttr(DuoduoConstant.TOTAL_SIZE, size);
		return result;
	}
	/**第三方渠道数据查询(对外)导出统一处理
	 * channelDtl
	 * @param params
	 * @return
	 */
	public AppResult thirdChannel(AppParam params) {
		return super.queryByPage(params, NAMESPACE, "thirdChannelSect", "thirdChannelSectCount");
	}
}
