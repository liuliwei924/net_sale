package org.xxjr.cust.util.auth.util;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.Serializable;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.List;
import java.util.Map;

import org.ddq.common.util.JsonUtil;
import org.ddq.common.util.LogerUtil;
import org.ddq.model.cache.RedisUtils;
import com.alibaba.fastjson.JSONObject;

/**
 * 获取token类
 */
public class GetAccessTokenUtil {

	/** access_token **/
	public static String CacheKey_ACCESS_TOKEN = "BaiduAccessToken";
	
	/** head access_token **/
	public static String CacheKey_HEAD_ACCESS_TOKEN = "BaiduHeadAccessToken";

	/** 数据保留时长为 29天 **/
	public static Integer ACCESS_TOKEN_TIME = 29 * 24 * 60 * 60;

	/**
	 * 获取权限token
	 * 
	 * @return 返回示例： { "access_token":
	 *         "24.460da4889caad24cccdb1fea17221975.2592000.1491995545.282335-1234567"
	 *         , "expires_in": 2592000 }
	 */
	public static String getAuth() {
		// 官网获取的 API Key 更新为你注册的
		String clientId = "m4h6dr9bVrFWmWTvXGHFa8uG";
		// 官网获取的 Secret Key 更新为你注册的
		String clientSecret = "7tm7Ko1l1uYbhWn5OpFivp72KxDjMxTH";
		return getAuth(clientId, clientSecret);
	}

	/**
	 * 头像认证获取权限token
	 * 
	 * @return 返回示例： { "access_token":
	 *         "24.460da4889caad24cccdb1fea17221975.2592000.1491995545.282335-1234567"
	 *         , "expires_in": 2592000 }
	 */
	public static String getHeadAuth() {
		// 官网获取的 API Key 更新为你注册的
		String clientId = "PwWqbuLTLhrzSky5dpTuVvlI";
		// 官网获取的 Secret Key 更新为你注册的
		String clientSecret = "u7ltfbzXcfCNfSqy9spqlBPBgbNvAltE";
		return getHeadAuth(clientId, clientSecret);
	}

	/**
	 * 获取API访问token 该token有一定的有效期，需要自行管理，当失效时需重新获取.
	 * 
	 * @param ak
	 *            - 百度云官网获取的 API Key
	 * @param sk
	 *            - 百度云官网获取的 Securet Key
	 * @return assess_token 示例：
	 *         "24.460da4889caad24cccdb1fea17221975.2592000.1491995545.282335-1234567"
	 */
	public static String getAuth(String ak, String sk) {
		// 获取token地址
		String authHost = "https://aip.baidubce.com/oauth/2.0/token?";
		String getAccessTokenUrl = authHost
				// 1. grant_type为固定参数
				+ "grant_type=client_credentials"
				// 2. 官网获取的 API Key
				+ "&client_id=" + ak
				// 3. 官网获取的 Secret Key
				+ "&client_secret=" + sk;
		try {
			URL realUrl = new URL(getAccessTokenUrl);
			// 打开和URL之间的连接
			HttpURLConnection connection = (HttpURLConnection) realUrl
					.openConnection();
			connection.setRequestMethod("GET");
			connection.connect();
			// 获取所有响应头字段
			Map<String, List<String>> map = connection.getHeaderFields();
			// 遍历所有的响应头字段
			for (String key : map.keySet()) {
				LogerUtil.out(key + "--->" + map.get(key));
			}
			// 定义 BufferedReader输入流来读取URL的响应
			BufferedReader in = new BufferedReader(new InputStreamReader(
					connection.getInputStream()));
			String result = "";
			String line;
			while ((line = in.readLine()) != null) {
				result += line;
			}
			LogerUtil.log("result:" + result);
			JSONObject jsonObject = JsonUtil.getInstance().json2Object(result, JSONObject.class);
			String access_token = jsonObject.getString("access_token");
			/**
			 * 设置缓存
			 */
			RedisUtils.getRedisService().set(CacheKey_ACCESS_TOKEN,
					(Serializable) access_token, ACCESS_TOKEN_TIME);
			return access_token;
		} catch (Exception e) {
			LogerUtil.error(GetAccessTokenUtil.class, e, "获取token失败！");
			e.printStackTrace();
		}
		return null;
	}
	
	/**
	 * 获取API访问头像认证token 该token有一定的有效期，需要自行管理，当失效时需重新获取.
	 * 
	 * @param ak
	 *            - 百度云官网获取的 API Key
	 * @param sk
	 *            - 百度云官网获取的 Securet Key
	 * @return assess_token 示例：
	 *         "24.460da4889caad24cccdb1fea17221975.2592000.1491995545.282335-1234567"
	 */
	public static String getHeadAuth(String ak, String sk) {
		// 获取token地址
		String authHost = "https://aip.baidubce.com/oauth/2.0/token?";
		String getAccessTokenUrl = authHost
				// 1. grant_type为固定参数
				+ "grant_type=client_credentials"
				// 2. 官网获取的 API Key
				+ "&client_id=" + ak
				// 3. 官网获取的 Secret Key
				+ "&client_secret=" + sk;
		try {
			URL realUrl = new URL(getAccessTokenUrl);
			// 打开和URL之间的连接
			HttpURLConnection connection = (HttpURLConnection) realUrl
					.openConnection();
			connection.setRequestMethod("GET");
			connection.connect();
			// 获取所有响应头字段
			Map<String, List<String>> map = connection.getHeaderFields();
			// 遍历所有的响应头字段
			for (String key : map.keySet()) {
				LogerUtil.out(key + "--->" + map.get(key));
			}
			// 定义 BufferedReader输入流来读取URL的响应
			BufferedReader in = new BufferedReader(new InputStreamReader(
					connection.getInputStream()));
			String result = "";
			String line;
			while ((line = in.readLine()) != null) {
				result += line;
			}
			LogerUtil.out("result:" + result);
			JSONObject jsonObject = JsonUtil.getInstance().json2Object(result, JSONObject.class);
			String access_token = jsonObject.getString("access_token");
			/**
			 * 设置缓存
			 */
			RedisUtils.getRedisService().set(CacheKey_HEAD_ACCESS_TOKEN,
					(Serializable) access_token, ACCESS_TOKEN_TIME);
			return access_token;
		} catch (Exception e) {
			LogerUtil.error(GetAccessTokenUtil.class, e, "获取token失败！");
			e.printStackTrace();
		}
		return null;
	}

	public static void main(String[] args) {
		getHeadAuth();
	}
}
