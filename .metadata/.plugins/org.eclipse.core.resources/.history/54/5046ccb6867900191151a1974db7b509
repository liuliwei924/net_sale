package org.xxjr.job.listener.busi.sum;

import java.util.Date;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.util.DateUtil;
import org.llw.ddq.job.core.BaseExecteJob;
import org.llw.ddq.job.util.JobConstant;
import org.llw.ddq.job.util.JobUtil;
import org.ddq.common.core.service.RemoteInvoke;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;
import org.xxjr.busi.util.push.PushPlatformUtils;
import org.xxjr.job.listener.busi.sum.util.AppSumUtil;
import org.xxjr.job.listener.busi.sum.util.BaseSumUtil;
import org.xxjr.job.listener.busi.sum.util.BookSumUtil;
import org.xxjr.job.listener.busi.sum.util.RetSumUtil;
import org.xxjr.job.listener.busi.sum.util.SaleSumUtil;
import org.xxjr.job.listener.busi.sum.util.SignSumUtil;
import org.xxjr.job.listener.busi.sum.util.SumTeamUtil;
import org.xxjr.job.listener.busi.sum.util.SumaryChannelUtil;
import org.xxjr.sys.util.ServiceKey;


/**
 * 实时统计数据
 *
 */
@Lazy
@Component
public class RealTimeSumJob implements BaseExecteJob {

	@Override
	public AppResult executeJob(AppParam param) {
		AppResult result = new AppResult();
		Object processId = param.getAttr(JobConstant.KEY_processId);
		String today = DateUtil.toStringByParttern(new Date(),DateUtil.DATE_PATTERN_YYYY_MM_DD);
		String toMonth = DateUtil.toStringByParttern(new Date(),"yyyy-MM");
		//查询需要统计的客服
		AppParam summaryKf = new AppParam("custRightService", "querySummary");
		summaryKf.setRmiServiceName(AppProperties.
				getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_cust));
		AppResult summaryResult = RemoteInvoke.getInstance().callNoTx(summaryKf);
		String isSummaryKf = null;
		if(summaryResult.getRows().size() > 0){
			isSummaryKf = summaryResult.getRow(0).get("customerIds").toString();
		}
		
		//基本数据统计
		BaseSumUtil.channelBase(processId, today);
		BaseSumUtil.kfBase(processId, today, isSummaryKf);
		//BaseSumUtil.kfLend(processId, today, isSummaryKf);
		BaseSumUtil.storeBase(processId, today);
		BaseSumUtil.orgBase(processId, today);
		BaseSumUtil.totalBase(processId, today);
		BaseSumUtil.storeBaseMonth(processId, toMonth);
		BaseSumUtil.riskBase(processId, today);
		
		//上门统计
		BookSumUtil.channelBook(processId, today);
		BookSumUtil.kfBook(processId, today, isSummaryKf);
		BookSumUtil.storeBook(processId, today);
		BookSumUtil.sumTotalBook(processId, today);
		BookSumUtil.storeBookMonth(processId, toMonth);
		
		//签单统计
		SignSumUtil.channelSign(processId, today);
		SignSumUtil.kfSign(processId, today, isSummaryKf);
		SignSumUtil.storeSign(processId, today);
		SignSumUtil.sumTotalSign(processId, today);
		SignSumUtil.storeSignMonth(processId, toMonth);
		
		//回款相关统计
		RetSumUtil.channelRet(processId, today);
		RetSumUtil.kfRet(processId, today, isSummaryKf);
		RetSumUtil.storeRet(processId, today);
		RetSumUtil.retByBase(processId, today);
		RetSumUtil.storeRetMonth(processId, toMonth);
		
		//挂卖相关统计
		SaleSumUtil.channelSale(processId, today);
		SaleSumUtil.kfSale(processId, today, isSummaryKf);
		SaleSumUtil.saleByBase(processId, today);
		//简单实时统计
		SumaryChannelUtil.simpleSummary(processId,today);
		
		//app渠道注册统计
		AppSumUtil.sumAppRegisterCount(processId,today);
		
		
		// kf跟进的信贷员充值统计
		BaseSumUtil.successChargeByKf(processId, today);
		BaseSumUtil.mjbSuccessChargeByKf(processId, today);
		//推送数据统计
		int count = PushPlatformUtils.sumPushData(today);
		JobUtil.addProcessExecute(processId, "推送数据插入成功" + count +" 条记录");
		PushPlatformUtils.sumChannelPushData(today);
		
		SumTeamUtil.sumBaseTeamData(processId, today);
		SumTeamUtil.updateFailSale(processId);
		
		//门店人员暂停分单统计
		BaseSumUtil.querystorePauseAddPool(processId);
		BaseSumUtil.storePauseAllotCount(processId);
		BaseSumUtil.storePauseAllotSum(processId);
		//门店操作记录统计
		BaseSumUtil.storeHandleRecordSum(processId);
		return result;
	}

}
