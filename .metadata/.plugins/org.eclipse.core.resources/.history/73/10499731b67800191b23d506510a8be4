package org.xxjr.busi.util.wd;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.ddq.active.mq.message.CustMessageSend;
import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.core.SpringAppContext;
import org.ddq.common.exception.SysException;
import org.ddq.common.util.DateUtil;
import org.ddq.common.util.LogerUtil;
import org.ddq.common.util.StringUtil;
import org.ddq.zk.service.RemoteInvoke;
import org.springframework.util.StringUtils;
import org.xxjr.cust.util.info.CustInfoUtil;
import org.xxjr.cust.util.info.CustomerUtil;
import org.xxjr.sys.util.ServiceKey;
import org.xxjr.sys.util.SysParamsUtil;

public class WdApplyUtil {
	
	//用户每天最大的贷款申请次数key
	private static final String MAX_APPLY_COUNT_KEY= "MAX_APPLY_COUNT";
	/**
	 * 申请成功发送消息通知信贷员
	 * @param applyId
	 * @return
	 */
	public static Map<String, Object> queryMessageInfo(String applyId){
		AppParam params = new AppParam("wdCreditApplyService", "queryMessageInfo");
		params.addAttr("applyId", applyId);
		params.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
		AppResult result = RemoteInvoke.getInstance().call(params);
		if(result.getRows().size() > 0){
			return result.getRow(0);
		}
		return new HashMap<String, Object>();
	}
	

	/**
	 * 贷款申请个数
	 * @param context 参数
	 * @param type 0-全部  1-今日申请  2-历史申请
	 * @return
	 */
	public static int wdApplyCount(String customerId, int type){
		AppParam params = new AppParam("wdCreditApplyService", "queryCount");
		params.addAttr("customerId", customerId);
		params.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
		String parttern = DateUtil.DATE_PATTERN_YYYY_MM_DD;
		if(type == 1) {
			Date date = new Date();
			params.addAttr("startTime", DateUtil.toStringByParttern(date, parttern)+" 00:00:00");
			params.addAttr("endTime", DateUtil.toStringByParttern(date, parttern)+" 23:59:59");
		}
		if(type == 2) {
			Date date = DateUtil.getNextDay(new Date(), -1);
			params.addAttr("endTime", DateUtil.toStringByParttern(date, parttern)+" 23:59:59");
		}
		AppResult result = RemoteInvoke.getInstance().call(params);
		int count = Integer.parseInt(result.getAttr(DuoduoConstant.TOTAL_SIZE).toString());
		result = null;
		return count;
	}
	
	/**
	 *查询客户申请的手机号码
	 * @param customerId
	 * @return String
	 */
	public static String  getCustApplyTel(String customerId){
		AppParam params = new AppParam("wdCreditApplyService", "getCustApplyTel");
		params.addAttr("customerId", customerId);
		params.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
		AppResult result = RemoteInvoke.getInstance().call(params);
		String telephone = "";
		if(result.getRows().size()>0){
			Object obj = result.getRow(0).get("telephone");
			if(!StringUtils.isEmpty(obj))
				telephone = obj.toString();
		}
		return telephone;
	}
	
	
	
	/**
	 * 查询微店产品贷款申请列表
	 * @param customerId
	 * @param  status 0-申请 1-等待放款 2-放款 3-等待还款  4-已还款
	 * @return
	 */
	public static AppResult applyList(AppParam params){
		params.setService("wdCreditApplyService");
		params.setMethod("queryView");
		params.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
		if(StringUtils.isEmpty(params.getOrderBy())){
			params.setOrderBy("createTime");
			params.setOrderValue("DESC");
		}
		return RemoteInvoke.getInstance().call(params);
	}
	
	/**
	 * 
	 * @param customerId
	 * @param  status 0-申请 1-等待放款 2-放款 3-等待还款  4-已还款
	 * @return
	 */
	public static AppResult queryShow(AppParam params){
		params.setService("wdCreditApplyService");
		params.setMethod("queryShow");
		params.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
		if(StringUtils.isEmpty(params.getOrderBy())){
			params.setOrderBy("createTime");
			params.setOrderValue("DESC");
		}
		return RemoteInvoke.getInstance().call(params);
	}
	
	/**
	 * 查询微店产品贷款申请的简要信息
	 * @param customerId
	 * @param  status 0
	 * @return
	 */
	public static AppResult applyLoan(AppParam params){
		AppResult result = new AppResult();
		AppParam  param1 =null;
		if(StringUtils.isEmpty(params.getAttr("applyCustId"))){
			//注册用户
			param1 = new AppParam();
			//用户类型默认为借款人
			param1.addAttr("userType", CustInfoUtil.UserType_2);
			param1.addAttr("telephone", params.getAttr("telephone"));
			param1.addAttr("referer", params.getAttr("referer"));
			//param1.addAttr("userName", params.getAttr("applyName"));
			param1.addAttr("sourceType", params.getAttr("sourceType"));
			param1.addAttr("cityName", params.getAttr("cityName"));
			param1.addAttr("openid", params.getAttr("openid"));
			param1.addAttr("gzhId", params.getAttr("gzhId"));
			String applyCustId = CustomerUtil.custAutoRegister(param1);

			params.addAttr("applyCustId", applyCustId);//申请人ID	
		}else{
			param1 = new AppParam();
			param1.addAttr("applyCustId", params.getAttr("applyCustId"));
			param1.addAttr("customerId", params.getAttr("customerId"));
			int size = queryApplyCount(param1);
			if(size > 0){
				result.setSuccess(false);
				result.setErrorCode("0002");
				result.setMessage("此信贷经理您已经申请过了，不能再次申请!");
				return result;
			}
		}
		params.setService("wdCreditApplyService");
		params.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
		params.setMethod("insert");
		result = RemoteInvoke.getInstance().call(params);
		if(result.isSuccess()){
			
			// 发送微信消息通知信贷员
			String applyId = result.getAttr("applyId").toString();
			Map<String, Object> applyInfo = WdApplyUtil
					.queryMessageInfo(applyId);
			try{
				CustMessageSend messageSend = SpringAppContext.getBean(CustMessageSend.class);
				messageSend.sendCustMessage(params.getAttr("customerId").toString(),
						"newApplyLoan", applyInfo);
			}catch(Exception e){
				LogerUtil.error(WdApplyUtil.class, e,"send message newApplyLoan");
			}
			try{
				WdShopUtil.refreshWdCache(params.getAttr("customerId").toString(), "wdInfo");
			}catch(Exception e){
				LogerUtil.error(WdApplyUtil.class, e,"refreshWdCache");
			}
		}
		return result;
	}
	
	/**
	 * 查看申请贷款信息
	 * @param customerId
	 * @param  status 0-申请 1-等待放款 2-放款 3-等待还款  4-已还款
	 * @return
	 */
	public static Map<String,Object> applyInfo(AppParam params){
		params.setService("wdCreditApplyService");
		params.setMethod("query");
		params.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
		AppResult result = RemoteInvoke.getInstance().call(params);
		return result.getRows().size()>0 ? result.getRow(0) : result.getAttr();
	}

	/**
	 * 查看申请个数
	 * @param customerId
	 * @param  status 0-申请 1-等待放款 2-放款 3-等待还款  4-已还款
	 * @return
	 */
	public static int queryApplyCount(AppParam params){
		params.setService("wdCreditApplyService");
		params.setMethod("queryCount");
		params.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
		AppResult result = RemoteInvoke.getInstance().call(params);
		int count = Integer.parseInt(result.getAttr(DuoduoConstant.TOTAL_SIZE).toString());
		
		result = null;
		return count;
	}

	
	/**
	 *检查申请是否合法
	 *合法 return null
	 *不合法 return 提示信息 
	 * @param params
	 * @return
	 */
	public static String  checkApply(String telephone, String productId){
		AppParam param1 = new AppParam();
		param1.addAttr("telephone", telephone);
		param1.addAttr("productId", productId);
		int count = 0;
		if(StringUtils.hasText(productId)){
			count = queryApplyCount(param1);
			if(count > 0){
				return "你已经申请过此产品，不能再申请!";
			}
			
		}
		
		param1.removeAttr("productId");
		param1.addAttr("startDate", DateUtil.toStringByParttern(new Date(), "yyyy-MM-dd"));
		count = queryApplyCount(param1);
		int maxCount = SysParamsUtil.getIntParamByKey(MAX_APPLY_COUNT_KEY, 3);
		
		if(count >= maxCount){
			return "你今天的申请次数已达到" + maxCount +"次，不能再申请";
		}
		
		return null;
		
	}
	
	/**
	 * 更新点击数
	 * @param request
	 * @return
	 */
	public static void updateClickCount(Object urlId){
		if(StringUtils.isEmpty(urlId)){
			throw new SysException("urlId不能为空");
		}
		AppParam updateParam = new AppParam("smsCustShorturlService", "update");
		updateParam.addAttr("urlId", urlId);
		updateParam.addAttr("addClickCount", "1");
		updateParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_busi));
		RemoteInvoke.getInstance().call(updateParam);
	}
	/**
	 * 获取信贷经理姓名
	 * @param request
	 * @return
	 */
	public static String queryCustName(Object urlId){
		AppResult result = new AppResult();
		if(StringUtils.isEmpty(urlId)){
			return null;
		}
		AppParam queryParam = new AppParam("smsCustShorturlService", "queryShow");
		queryParam.addAttr("urlId", urlId);
		queryParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_busi));
		result = RemoteInvoke.getInstance().callNoTx(queryParam);
		if (result.getRows().size() > 0) {
			return StringUtil.objectToStr(result.getRow(0).get("realName"));
		}
		return null;
	}

	/**
	 * 申请产品记录
	 * @param prodParam
	 * @return
	 */
	public static AppResult queryProdShow(AppParam prodParam) {
		prodParam.setService("daiBorrowService");
		prodParam.setMethod("queryLoanProdByPage");
		if(StringUtils.isEmpty(prodParam.getOrderBy())){
			prodParam.setOrderBy("createTime");
			prodParam.setOrderValue("DESC");
		}
		prodParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_busi));
		return RemoteInvoke.getInstance().callNoTx(prodParam);
	}
	
	
	
}
