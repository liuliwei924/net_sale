/**
 * 
 */
package org.xxjr.job.listener.xxxj;

import java.math.BigDecimal;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.util.DateUtil;
import org.ddq.common.util.LogerUtil;
import org.ddq.common.util.StringUtil;
import org.ddq.job.util.JobUtil;
import org.ddq.common.core.service.RemoteInvoke;
import org.xxjr.sys.util.NumberUtil;
import org.xxjr.sys.util.ServiceKey;
import org.xxjr.sys.util.SysParamsUtil;
import org.xxjr.xxxj.tran.TranOrderUtil;

/**
 * 天币网交易中心
 * @author zenghw
 *
 */
public class TranUtil {
	
	/**
	 * 生成天狗币交易行情价格
	 * 每1小时执行
	 * @return
	 */
	public static AppResult generateCoinPrice(Object processId){
		AppResult result = new AppResult();
		try{
			String coinPriceStr = SysParamsUtil.getStringParamByKey("tran_coin_price", "0.1");//默认定价
			BigDecimal sysPrice = NumberUtil.getBigDecimal(coinPriceStr,BigDecimal.ZERO);
			BigDecimal coinPrice = BigDecimal.ZERO;
			//查询今日已完成订单
			AppParam queryParam = new AppParam("tranTradeOrderService","queryOrderInfo");
			queryParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START
					+ ServiceKey.Key_XJ));
			queryParam.addAttr("tranStatus", "3");
			queryParam.addAttr("endTimeStr", "date");
			queryParam.setOrderBy("endTime");
			queryParam.setOrderValue("DESC");
			AppResult resultTmp = RemoteInvoke.getInstance().call(queryParam);
			int size = resultTmp.getRows().size();
			if(size > 0){
				if(size > 2){
					BigDecimal totalPrice = BigDecimal.ZERO;
					List<Map<String,Object>> orderList = resultTmp.getRows();
					for (int i = 0; i < orderList.size(); i++) {
						Map<String,Object> orderMap = orderList.get(i);
						BigDecimal price = NumberUtil.getBigDecimal(orderMap.get("price"),BigDecimal.ZERO);
						if(i < 3){
							totalPrice = totalPrice.add(price);
						}
					}
					coinPrice = totalPrice.divide(BigDecimal.valueOf(3),2);
				}else{
					Map<String,Object> orderMap = resultTmp.getRow(0);
					BigDecimal price = NumberUtil.getBigDecimal(orderMap.get("price"),BigDecimal.ZERO);
					if(size == 1){
						BigDecimal totalPrice = price.add(sysPrice).add(sysPrice);
						coinPrice = totalPrice.divide(BigDecimal.valueOf(3),2);
					}else if(size == 2){
						Map<String,Object> orderMap1 = resultTmp.getRow(1);
						BigDecimal price1 = NumberUtil.getBigDecimal(orderMap1.get("price"),BigDecimal.ZERO);
						BigDecimal totalPrice = price.add(price1).add(sysPrice);
						coinPrice = totalPrice.divide(BigDecimal.valueOf(3),2);
					}
				}
			}else{
				coinPrice = NumberUtil.getBigDecimal(coinPriceStr,BigDecimal.ZERO);
			}
			
			AppParam param = new AppParam("tranQuotationService", "insert");
			param.addAttr("coinPrice", coinPrice);
			param.addAttr("remark", "系统生成");
			param.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START
					+ ServiceKey.Key_XJ));
			result = RemoteInvoke.getInstance().call(param);
			LogerUtil.log("TranUtil generateCoinPrice >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> end");
		}catch(Exception ex){
			LogerUtil.error(TranUtil.class,ex, "TranUtil generateCoinPrice error");
			JobUtil.addProcessExecute(processId,"生成天狗币交易行情价格报错:" + ex.toString());
		}
		return result;
	}
	
	
	/**
	 * 订单超时取消交易
	 * 订单生成30分钟之后未付款自动取消交易订单
	 * 每5分钟执行一次
	 * @return
	 */
	public static AppResult autoCancelTrade(Object processId){
		AppResult result = new AppResult();
		try{
			Date date = new Date();
			//查询未付款订单
			AppParam querParam = new AppParam("tranTradeOrderService", "query");
			querParam.addAttr("tranStatus", "0");//未付款
			querParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START
					+ ServiceKey.Key_XJ));
			result = RemoteInvoke.getInstance().callNoTx(querParam);
			if(result.getRows().size() > 0){
				List<Map<String,Object>> orderList = result.getRows();
				for (Map<String, Object> orderMap : orderList) {
					String orderId = StringUtil.getString(orderMap.get("orderId"));
					String sellCustomerId = StringUtil.getString(orderMap.get("sellCustomerId"));
					String tranId = StringUtil.getString(orderMap.get("tranId"));
					String paymenTimeStr = StringUtil.getString(orderMap.get("paymenTime"));
					Date paymenTime = DateUtil.toDateByString(paymenTimeStr, DateUtil.DATE_PATTERN_YYYY_MM_DD_HHMMSS);
					if(date.getTime() > paymenTime.getTime()){//大于支付时间 订单超时未支付
						AppParam updateParam = new AppParam("tranTradeOrderService","update");
						updateParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START
								+ ServiceKey.Key_XJ));
						updateParam.addAttr("orderId", orderId);
						updateParam.addAttr("tranStatus", "4");//取消交易
						updateParam.addAttr("remark", "订单超时未支付自动取消");
						AppResult result2 = RemoteInvoke.getInstance().call(updateParam);
						int updateCount = NumberUtil.getInt(result2.getAttr(DuoduoConstant.DAO_Update_SIZE),0);
						if(updateCount > 0){
							Map<String,Object> tranMap = TranOrderUtil.getTradeInfoById(tranId);
							int num = NumberUtil.getInt(tranMap.get("num"),0);//交易币数量
							String type = StringUtil.getString(tranMap.get("type"));//0出售  1购买
							//挂单是购买单 取消之后卖家冻结币解冻
							if("1".equals(type)){
								//查询出售托管单
								AppParam queryEntruParam = new AppParam("tranEntrustCoinService","query");
								queryEntruParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START
										+ ServiceKey.Key_XJ));
								queryEntruParam.addAttr("tranId", tranId);
								queryEntruParam.addAttr("type", "1");//出售托管
								queryEntruParam.addAttr("orderId", orderId);
								AppResult queryEntruResult = RemoteInvoke.getInstance().call(queryEntruParam);
								if(queryEntruResult.getRows().size() > 0){
									num = NumberUtil.getInt(queryEntruResult.getRow(0).get("coin"),0);//交易币数量
									AppParam updateEntParam = new AppParam("tranEntrustCoinService","update");
									updateEntParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START
											+ ServiceKey.Key_XJ));
									updateEntParam.addAttr("entrustId", queryEntruResult.getRow(0).get("entrustId"));
									updateEntParam.addAttr("tradeStatus","2");//交易取消
									RemoteInvoke.getInstance().call(updateEntParam);
								}
								
								//更新交易币账户余额 冻结挂单(出售)金额
								AppParam updateAcoParam = new AppParam("tranCoinService","updateSubFreezeCoin");
								updateAcoParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START
										+ ServiceKey.Key_XJ));
								updateAcoParam.addAttr("customerId", sellCustomerId);
								updateAcoParam.addAttr("coinType", "0");//0天狗币
								updateAcoParam.addAttr("subFreezeCoin", num);
								updateAcoParam.addAttr("updateTime", new Date());
								RemoteInvoke.getInstance().call(updateAcoParam);
								
								//添加账户流水记录
								AppParam addRecParam = new AppParam("tranCoinRecordService","insert");
								addRecParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START
										+ ServiceKey.Key_XJ));
								addRecParam.addAttr("customerId", sellCustomerId);
								addRecParam.addAttr("type", "6");//取消交易
								addRecParam.addAttr("coinValue", num);
								addRecParam.addAttr("tradeFree", 0);
								addRecParam.addAttr("flag", "+");
								RemoteInvoke.getInstance().call(addRecParam);
							}
							
							//修改挂单状态为未交易
							AppParam upTradeAppParam = new AppParam("tranTradeService","update");
							upTradeAppParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START
									+ ServiceKey.Key_XJ));
							upTradeAppParam.addAttr("tranId", tranId);
							upTradeAppParam.addAttr("status", "0");//未交易
							RemoteInvoke.getInstance().call(upTradeAppParam);
						}
					}
				}
			}
			LogerUtil.log("TranUtil autoCancelTrade >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> end");
		}catch(Exception ex){
			LogerUtil.error(TranUtil.class,ex, "TranUtil autoCancelTrade error");
			JobUtil.addProcessExecute(processId,"订单超时取消交易报错:" + ex.toString());
		}
		return result;
	}
	
	/**
	 * 订单超时自动确认收款
	 * 买家购买币确定已付款，付款时间12小时后卖家未确认收款系统自动转币到买家账户
	 * 每5分钟执行一次
	 * @return
	 */
	public static AppResult autoTransferCoin(Object processId){
		AppResult result = new AppResult();
		try{
			Date date = new Date();
			//查询已付款订单
			AppParam querParam = new AppParam("tranTradeOrderService", "query");
			querParam.addAttr("tranStatus", "1");//已付款
			querParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START
					+ ServiceKey.Key_XJ));
			result = RemoteInvoke.getInstance().callNoTx(querParam);
			if(result.getRows().size() > 0){
				List<Map<String,Object>> orderList = result.getRows();
				for (Map<String, Object> orderMap : orderList) {
					String orderId = StringUtil.getString(orderMap.get("orderId"));
					String sellCustomerId = StringUtil.getString(orderMap.get("sellCustomerId"));//卖家编号
					String consingTimeStr = StringUtil.getString(orderMap.get("consingTime"));//自动转币时间
					Date consingTime = DateUtil.toDateByString(consingTimeStr, DateUtil.DATE_PATTERN_YYYY_MM_DD_HHMMSS);
					if(date.getTime() > consingTime.getTime()){//大于转币时间 订单超时卖家未确认收款
						AppParam updateParam = new AppParam("tranTradeOrderService","receivable");
						updateParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START
								+ ServiceKey.Key_XJ));
						updateParam.addAttr("orderId", orderId);
						updateParam.addAttr("customerId", sellCustomerId);//完成交易		
						updateParam.addAttr("autoFlag", "autoTransferCoin");
						RemoteInvoke.getInstance().call(updateParam);
					}
				}
			}
		}catch(Exception ex){
			LogerUtil.error(TranUtil.class,ex, "TranUtil autoTransferCoin error");
			JobUtil.addProcessExecute(processId," 订单超时自动确认收款报错:" + ex.toString());
		}
		return result;
	}
	
	
	/**
	 * 删除发送短信异常锁定手机号码
	 * 每5分钟执行一次
	 * @return
	 */
	public static AppResult deleteTranLockTel(Object processId){
		AppResult result = new AppResult();
		try{
			//号码锁定时长，默认5分钟
			int xjTelLockTime = SysParamsUtil.getIntParamByKey("tranTelLockTime", 5);
			//删除满足锁定时间号码记录
			AppParam param = new AppParam("tranSmsLockTelService", "deleteLockTel");
			param.addAttr("lockNum", xjTelLockTime);
			param.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START
					+ ServiceKey.Key_XJ));
			result = RemoteInvoke.getInstance().call(param);
			LogerUtil.log("TranUtil deleteTranLockTel >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> end");
		}catch(Exception ex){
			LogerUtil.error(TranUtil.class,ex, "TranUtil deleteTranLockTel error");
			JobUtil.addProcessExecute(processId,"删除交易中心用户锁定号码报错:" + ex.toString());
		}
		return result;
	}
}
