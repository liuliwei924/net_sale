package org.xxjr.cust.fund;

import java.util.Date;
import java.util.List;
import java.util.Map;
import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppResult;
import org.ddq.common.core.service.BaseService;
import org.ddq.common.exception.AppException;
import org.ddq.common.exception.DuoduoError;
import org.ddq.common.web.session.DuoduoSession;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import org.xxjr.sys.util.LotteryUtil;

@Lazy
@Service
public class KfCustService extends BaseService {
	private static final String NAMESPACE = "KFCUST";

	/**
	 * querys
	 * @param params
	 * @return
	 */
	public AppResult query(AppParam params) {
		return super.query(params, NAMESPACE);
	}
	
	/**
	 * queryBindingKf
	 */
	public AppResult queryBindingKf(AppParam params) {
		return super.query(params, NAMESPACE, "queryBindingKf");
	}
	/**
	 * 
	 * @param params
	 * @return
	 */
	public AppResult queryRelation(AppParam params) {
		return super.query(params, NAMESPACE, "queryRelation");
	}
	
	/**
	 * queryByPage
	 * @param params
	 * @return
	 */
	public AppResult queryByPage(AppParam params) {
		return super.queryByPage(params, NAMESPACE);
	}
	
	/**
	 * queryCount
	 * @param params
	 * @return
	 */
	public AppResult queryCount(AppParam params) {
		int size = getDao().count(NAMESPACE, super.COUNT,params.getAttr(),params.getDataBase());
		AppResult result = new AppResult();
		result.putAttr(DuoduoConstant.TOTAL_SIZE, size);
		return result;
	}
	
	
	/**
	 * insert
	 * @param params
	 * @return
	 */
	public AppResult insert(AppParam params) {
		params.addAttr("createTime", new Date());
		params.addAttr("createBy", DuoduoSession.getUserName());
		return super.insert(params, NAMESPACE);
	}
	
	/**
	 * 批量插入
	 * @param params
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public AppResult batchInsert(AppParam params) {
		AppResult result = new AppResult();
		List<Map<String, Object>> list = (List<Map<String, Object>>) params.getAttr("list");
		int size = super.getDao().batchInsert(NAMESPACE, "batchInsert", list, params.getDataBase());
		result.putAttr(DuoduoConstant.DAO_Insert_SIZE, size);
		return result;
	}
	
	/**
	 * 将当前客服的绑定用户重新随机分配
	 */
	@SuppressWarnings("unchecked")
	public AppResult kfRebind(AppParam params) {
		AppResult result = new AppResult();
		Map<String,Object> freeParam = (Map<String,Object>)params.getAttr("freeParam");
		Map<String,Object> vipParam = (Map<String,Object>)params.getAttr("vipParam");
        this.getDao().update(NAMESPACE, "batchReBindFree", freeParam, params.getDataBase());
        //随机分配会员给客服主管
        if(vipParam.get("vList") != null){
        	List<?> vList = LotteryUtil.splitList((List<?>)vipParam.get("vList"), 100);
        	for (int i = 0; i < vList.size(); i++) {
            	vipParam.put("list", vList.get(i));
                this.getDao().update(NAMESPACE, "batchReBindVip", vipParam, params.getDataBase());
			}

        }
		return result;
	}
	
	/**
	 * 批量重新绑定客服
	 * @param params
	 * @return
	 */
	public AppResult batchReBindKf(AppParam params) {
		AppResult result = new AppResult();
		int count = this.getDao().update(NAMESPACE, "batchReBindVip", params.getAttr(), params.getDataBase());
		result.putAttr(DuoduoConstant.DAO_Update_SIZE, count);
		return result;
	}
	
	/**
	 * 随机查询新的kf分配给当前离职客服的绑定用户
	 * @param params
	 * @return
	 */
	public AppResult queryKfManager(AppParam params) {
		return super.query(params, NAMESPACE, "queryKfManager");
	}
	
	/**
	 * update
	 * @param params
	 * @return
	 */
	public AppResult update(AppParam params) {
		return super.update(params, NAMESPACE);
	}
	
	
	/**
	 * saveOrUpdate
	 * @param params
	 * @return
	 */
	public AppResult saveOrUpdate(AppParam params) {
		AppResult updateResult = super.update(params, NAMESPACE);
		int count  = (Integer)updateResult.getAttr(DuoduoConstant.DAO_Update_SIZE);
		if(count <= 0){
			updateResult = this.insert(params);
		}
		return updateResult;
	}
	
	/**
	 * delete
	 * @param params
	 * @return
	 */
	public AppResult delete(AppParam params) {
		String ids = (String) params.getAttr("ids");
		AppResult  result = null;
		if (!StringUtils.isEmpty(ids)) {
			for (String id : ids.split(",")) {
				AppParam param = new AppParam();
				param.addAttr("customerId", id);
				
				result = super.delete(param, NAMESPACE);
			}
		} else if (!StringUtils.isEmpty(params.getAttr("customerId"))) {
			result = super.delete(params, NAMESPACE);
		} else {
			throw new AppException(DuoduoError.DELETE_NO_ID);
		}
		return result;
	}
	
	/**
	 * 客户与客服关系绑定
	 * @param params
	 * @return 
	 */
	public AppResult uniqueInsert(AppParam params){
		AppResult result = new AppResult();
		params.addAttr("createTime", new Date());
		int size = getDao().insert(NAMESPACE, "uniqueInsert", params.getAttr(), params.getDataBase());
		result.putAttr(DuoduoConstant.DAO_Insert_SIZE, size);
		return result;
	}
	
	/**
	 * 批量 replace 插入
	 * @param params
	 * @return
	 */
	public AppResult batchReplaceInsert(AppParam params){
		AppResult result = new AppResult();
		int size = getDao().insert(NAMESPACE, "batchReplaceInsert", params.getAttr(), params.getDataBase());
		result.putAttr(DuoduoConstant.DAO_Insert_SIZE, size);
		return result;
	}
}
