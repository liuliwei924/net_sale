package org.xxjr.busiIn.kf.record;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import lombok.extern.slf4j.Slf4j;

import org.ddq.active.mq.message.RmiServiceSend;
import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.core.SpringAppContext;
 import org.common.core.service.BaseService;
import org.ddq.common.exception.AppException;
import org.ddq.common.exception.DuoduoError;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import org.xxjr.sys.util.NumberUtil;
import org.xxjr.sys.util.ServiceKey;
import org.xxjr.sys.util.SysParamsUtil;

@Lazy
@Service
@Slf4j
public class DaiReferRecordService extends BaseService {
	private static final String NAMESPACE = "DAIREFERRECORD";

	/**
	 * querys
	 * @param params
	 * @return
	 */
	public AppResult query(AppParam params) {
		return super.query(params, NAMESPACE);
	}
	
	/**
	 * queryByPage
	 * @param params
	 * @return
	 */
	public AppResult queryByPage(AppParam params) {
		return super.queryByPage(params, NAMESPACE);
	}
	
	/**
	 * queryCount
	 * @param params
	 * @return
	 */
	public AppResult queryCount(AppParam params) {
		int size = getDao().count(NAMESPACE, super.COUNT,params.getAttr(),params.getDataBase());
		AppResult result = new AppResult();
		result.putAttr(DuoduoConstant.TOTAL_SIZE, size);
		return result;
	}
	
	
	/**
	 * insert
	 * @param params
	 * @return
	 */
	public AppResult insert(AppParam params) {
		params.addAttr("createTime", new Date());
		return super.insert(params, NAMESPACE);
	}
	
	/**
	 * update
	 * @param params
	 * @return
	 */
	public AppResult update(AppParam params) {
		return super.update(params, NAMESPACE);
	}
	
	/**
	 * delete
	 * @param params
	 * @return
	 */
	public AppResult delete(AppParam params) {
		String ids = (String) params.getAttr("ids");
		AppResult  result = null;
		if (!StringUtils.isEmpty(ids)) {
			for (String id : ids.split(",")) {
				AppParam param = new AppParam();
				param.addAttr("recordId", id);
				
				result = super.delete(param, NAMESPACE);
			}
		} else if (!StringUtils.isEmpty(params.getAttr("recordId"))) {
			result = super.delete(params, NAMESPACE);
		} else {
			throw new AppException(DuoduoError.DELETE_NO_ID);
		}
		return result;
	}
	
	/**
	 * 查询推荐记录列表
	 * @param params
	 * @return
	 */
	public AppResult queryShowByPage(AppParam params) {
		return super.queryByPage(params, NAMESPACE, "queryShow", "queryShowCount");
	}

	/**
	 * 推荐贷款汇总统计
	 * @param params
	 * @return
	 */
	public AppResult referRecordSum(AppParam params){
		return super.query(params, NAMESPACE, "referRecordSum");
	}
	
	/**
	 * 保存推荐贷款信息，如果为推荐成功需要为推荐人结算佣金
	 * @param param
	 * @return
	 */
	public AppResult save (AppParam param) {
		AppResult result = new AppResult();
		
		//推荐贷款限制处理，每天最多推荐成功为10笔
		AppParam queryParam = new AppParam();
		queryParam.addAttr("nowDate", true);
		queryParam.addAttr("customerId", param.getAttr("customerId"));
		queryParam.addAttr("referStatus", 1);
		AppResult queryResult = this.queryCount(queryParam);
		int count = NumberUtil.getInt(queryResult.getAttr(DuoduoConstant.TOTAL_SIZE), 0);
		if (count >= SysParamsUtil.getIntParamByKey("refererLoanCount", 10)) {
			result.setSuccess(false);
			result.setMessage("您的推荐数已经超过上限!");
			return result;
		}
		int referStatus = NumberUtil.getInt(param.getAttr("referStatus"), 0);
		double rewardAmount = 0;
		if (1 == referStatus) {//奖励佣金
			param.addAttr("settlementStatus", 1);
			double refererSuccessAmt = NumberUtil.getDouble(SysParamsUtil.getStringParamByKey("refererSuccessAmt", "40"), 40);
			param.addAttr("tranPrice", refererSuccessAmt);
			double refererRewardRate = NumberUtil.getDouble(SysParamsUtil.getStringParamByKey("refererRewardRate", "0.3"), 0.3);
			rewardAmount = (refererSuccessAmt * refererRewardRate);
			try {
				Map<String, Object> amountParam = new HashMap<String, Object>();
				amountParam.put("service", "custAmountService");
				amountParam.put("method", "updateRewardAmount");
				amountParam.put("methodName", "updateRewardAmount");
				amountParam.put("rewardAmount", rewardAmount);
				amountParam.put("totalRewardAmount", rewardAmount);
				amountParam.put("customerId", param.getAttr("customerId"));
				amountParam.put("rmiServiceName", AppProperties
						.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_cust));
				RmiServiceSend send = SpringAppContext.getBean(RmiServiceSend.class);
				send.sendExecuteMessage(amountParam);
			} catch (Exception e) {
				log.error("奖励佣金失败！", e);
			}
		}
		param.addAttr("rewardAmount", rewardAmount);
		if (result.isSuccess()) {//保存推荐记录
			this.insert(param);
		}
		return result;
	}
	
	/**
	 * 查询待返佣金信息
	 * @param params
	 * @return
	 */
	public AppResult queryBackRewardAmountInfo(AppParam params){
		return super.query(params, NAMESPACE, "queryBackRewardAmountInfo");
	}
	
}
