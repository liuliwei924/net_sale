package org.xxjr.job.listener.busi.sms.util;

import java.util.Date;
import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.util.DateUtil;
import org.ddq.common.core.service.RemoteInvoke;
import org.xxjr.sys.util.ServiceKey;

/**
 * 每天定时更新用户注册等信息工具类
 * @author sty
 *
 */
public class UpdateUserUtil {

	/**
	 * 根据手机号码是否存在更新或插入用户数据
	 */
	@SuppressWarnings("unchecked")
	public static void upderOrInsert() {
		// 查询出昨天有操作记录的用户，如果手机号码已存在更新数据到t_sms_user，否则插入到t_sms_user
		AppParam queryParam = new AppParam();
		queryParam.addAttr("startDay", DateUtil.toStringByParttern(
				DateUtil.getNextDay(new Date(), -1),
				DateUtil.DATE_PATTERN_YYYY_MM_DD)+" 00:00:00");
		queryParam.addAttr("endDay",  DateUtil.toStringByParttern(
				new Date(),DateUtil.DATE_PATTERN_YYYY_MM_DD)+" 00:00:00");
		queryParam.setService("custLogService");
		queryParam.setMethod("queryActiveUser");
		queryParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START
						+ ServiceKey.Key_sys));
		AppResult queryResult = RemoteInvoke.getInstance().callNoTx(queryParam);
		if (queryResult.getAttr("customerIds") !=null) {
			List<String> customerIds = (List<String>) queryResult.getAttr("customerIds");
			int pageSize = 500;
			int partSize = pageSize;
			while(customerIds.size() > 0){
				if(customerIds.size() < pageSize){
					partSize = customerIds.size();
				}
				List<String> customerIdspart = customerIds.subList(0, partSize);
				String inCustomerId = StringUtils.join(customerIdspart.toArray(), ",");
				AppParam queryCustParam = new AppParam();
				queryCustParam.addAttr("inCustomerId", inCustomerId);
				queryCustParam.addAttr("limit", partSize);
				queryCustParam.setService("customerService");
				queryCustParam.setMethod("queryCustMessage");
				queryCustParam.setRmiServiceName(AppProperties
						.getProperties(DuoduoConstant.RMI_SERVICE_START
								+ ServiceKey.Key_cust));
				AppResult custResult = RemoteInvoke.getInstance().callNoTx(queryCustParam);
				if(custResult.getRows().size() > 0) {
					AppParam addParam = new AppParam();
					addParam.addAttr("custList", custResult.getRows());
					addParam.setService("smsTelephoneService");
					addParam.setMethod("saveCust");
					addParam.setRmiServiceName(AppProperties
							.getProperties(DuoduoConstant.RMI_SERVICE_START
									+ ServiceKey.Key_log));
					RemoteInvoke.getInstance().call(addParam);
				}
				//删除已经处理过的id
				customerIds.removeAll(customerIdspart);
			}
		}
	}
	
	/**
	 * 设置运营商
	 */
	public static void setYys(){
		AppParam addParam = new AppParam();
		addParam.setService("smsTelephoneService");
		addParam.setMethod("setYys");
		addParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START
						+ ServiceKey.Key_log));
		RemoteInvoke.getInstance().call(addParam);
	}
}
