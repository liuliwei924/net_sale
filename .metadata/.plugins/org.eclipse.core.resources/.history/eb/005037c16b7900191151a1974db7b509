package org.xxjr.mq.listener.receiver;

import java.util.Map;

import javax.annotation.PreDestroy;

import org.ddq.active.mq.XxjrMqSendUtil;
import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.util.LogerUtil;
import org.ddq.common.util.StringUtil;
import org.llw.ddq.mq.rabbitmq.RabbitMqConfig;
import org.ddq.common.core.service.RemoteInvoke;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;
import org.xxjr.mq.listener.consumer.RabbitMqConsumer;
import org.xxjr.mq.listener.util.XxjrInitAnnotation;
import org.xxjr.sys.util.ServiceKey;

@Component
@XxjrInitAnnotation(beanName="xxxjAuctionReceiver",initMethod="init")
public class XxxjAuctionReceiver extends RabbitMqConsumer {
	
	@Autowired
	private RabbitMqConfig rabbitMqConfig;
	
	@Value("${rabbit.queue.xxxjAuction}")
	private String queueName;

	public void onMessage(Map<String, Object> param) {
		try {
			LogerUtil.log(XxxjAuctionReceiver.class,"XxxjAuctionReceiverMessage params:" + param.toString());
			String auctionId = StringUtil.getString(param.get("auctionId"));//竞拍项目ID
			if(StringUtils.isEmpty(auctionId)){
				return ;
			}
			AppParam rankParam = new AppParam("xjAuctionRecordService","frozeCustAucCoins");
			rankParam.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_XJ));
			rankParam.addAttr("auctionId", auctionId);
			RemoteInvoke.getInstance().call(rankParam);
		} catch (Exception e) {
			LogerUtil.error(XxxjAuctionReceiver.class, e, "XxxjAuctionReceiver reward params:" + param.toString());
			XxjrMqSendUtil.saveFailureLog("XxxjAuctionReceiver", param);
		}
	}
	
	@Override
	public void init(String queueName ,RabbitMqConfig rabbitMqConfig) {
		super.init(queueName,rabbitMqConfig);
	}
	
    public void init() {
		init(queueName,rabbitMqConfig);
	}
	
	@PreDestroy
	public void destroy(){
		reaseResource();
	}
}
