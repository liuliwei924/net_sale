package org.xxjr.cust.invite;

import java.util.Date;
import java.util.Map;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppResult;
import org.ddq.common.core.service.BaseService;
import org.ddq.common.core.service.SoaManager;
import org.ddq.common.exception.AppException;
import org.ddq.common.exception.DuoduoError;
import org.ddq.common.util.StringUtil;
import org.ddq.common.web.session.DuoduoSession;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import org.xxjr.cust.util.info.CustomerIdentify;
import org.xxjr.cust.util.invite.CustInviteUtil;

@Lazy
@Service
public class InviteRewardService extends BaseService {
	private static final String NAMESPACE = "INVITEREWARD";

	/**
	 * querys
	 * @param params
	 * @return
	 */
	public AppResult query(AppParam params) {
		return super.query(params, NAMESPACE);
	}
	
	/**
	 * queryRewardCount
	 * @param params
	 * @return
	 */
	public AppResult queryRewardCount(AppParam params) {
		AppResult result = new AppResult();
		result = super.query(params, NAMESPACE, "queryRewardCount");
		if(result.getRows().size() > 0){
			result.putAttr("scoreCount", result.getRow(0).get("scoreCount"));
			result.putAttr("couponCount", result.getRow(0).get("couponCount"));
			result.putAttr("orderCount", result.getRow(0).get("orderCount"));
			result.putAttr("ticketCount", result.getRow(0).get("ticketCount"));
			result.clearRows();
		}
		AppParam param = new AppParam("inviteRecordService","queryCount");
		param.addAttr("parentId", params.getAttr("customerId"));
		AppResult recordResult = SoaManager.getInstance().callNoTx(param);
		result.putAttr("inviteCount", recordResult.getAttr(DuoduoConstant.TOTAL_SIZE));
		return result;
	}
	
	/**
	 * 查询用户可领取单子数量
	 * @param params
	 * @return
	 */
	public AppResult queryBorrowNum(AppParam params){
		return super.query(params, NAMESPACE, "queryBorrowNum");
	}
	
	/**
	 * 修改已发放订单数据的状态
	 * updateBorrowInfo
	 */
	public AppResult updateBorrowInfo(AppParam params){
		AppResult result = new AppResult();
		int size = this.getDao().update(NAMESPACE, "updateBorrowInfo", params.getAttr(), params.getDataBase());
		result.putAttr(DuoduoConstant.DAO_Update_SIZE, size);
		return result;
	}
	
	/**
	 * queryShow
	 */
	public AppResult queryShow(AppParam params){
		AppResult result = new AppResult();
		result = this.queryByPage(params, NAMESPACE, "queryShow", "queryShowCount");
		return result;
	}
	
	
	/**
	 * queryByPage
	 * @param params
	 * @return
	 */
	public AppResult queryByPage(AppParam params) {
		return super.queryByPage(params, NAMESPACE);
	}
	
	/**
	 * queryCount
	 * @param params
	 * @return
	 */
	public AppResult queryCount(AppParam params) {
		int size = getDao().count(NAMESPACE, super.COUNT,params.getAttr(),params.getDataBase());
		AppResult result = new AppResult();
		result.putAttr(DuoduoConstant.TOTAL_SIZE, size);
		return result;
	}
	
	
	/**
	 * insert
	 * @param params
	 * @return
	 */
	public AppResult insert(AppParam params) {
		params.addAttr("createTime", new Date());
		params.addAttr("createBy", DuoduoSession.getUserName());
		return super.insert(params, NAMESPACE);
	}
	
	/**
	 * update
	 * @param params
	 * @return
	 */
	public AppResult update(AppParam params) {
		return super.update(params, NAMESPACE);
	}
	
	/***
	 * 活动奖励单子
	 * @param context
	 * @return
	 */
	public AppResult insertActivity(AppParam context) {
		String customerId = StringUtil.getString(context.getAttr("customerId"));
		Object newRewardType = context.getAttr("newRewardType");// 2 工作认证  3首次抢单
		AppParam params = new AppParam();
		params.addAttr("customerId", customerId);
		params.addAttr("awardValue", context.getAttr("rewardValue"));
		params.addAttr("sendStatus", "0");
		params.addAttr("rewardType", newRewardType);
		params.addAttr("awardType", "order");
		params.addAttr("sendTime", new Date());
		params.addAttr("friendId", context.getAttr("selfId"));
		params.addAttr("createDesc", context.getAttr("createDesc"));
		AppResult result = this.insert(params);
		
		if(result.isSuccess()){
			// 插入奖励记录
			if(CustInviteUtil.isInActive() && !StringUtils.isEmpty(context.getAttr("selfId"))){
				Object selfId = context.getAttr("selfId");
				// 修改奖励概况
				String rewardDesc = context.getAttr("rewardValue") + "单";
				AppParam updateParams = new AppParam();
				updateParams.setService("inviteRecordService");
				updateParams.setMethod("update");
				updateParams.addAttr("customerId", selfId);
				Map<String, Object> userMap = CustomerIdentify.getCustIdentify(selfId.toString());
				Object referer = userMap.get("referer");
				Object refererTwo = userMap.get("refererTwo");
				if(!StringUtils.isEmpty(referer) && customerId.equals(referer.toString())){
					// 奖励直接推荐人
					if("2".equals(newRewardType.toString())){
						updateParams.addAttr("refererCardIdentifyReward", rewardDesc);
					}else if("3".equals(newRewardType.toString())){
						updateParams.addAttr("refererFirstRobReward", rewardDesc);
					}
					SoaManager.getInstance().invoke(updateParams);
				}else if(!StringUtils.isEmpty(refererTwo) && customerId.equals(refererTwo.toString())){
					// 奖励间接推荐人,只有首次抢单才奖励单子
					if("3".equals(newRewardType.toString())){
						updateParams.addAttr("refererTwoFirstRobReward", rewardDesc);
						SoaManager.getInstance().invoke(updateParams);
					}
				}
			}
		}
		return result;
	}
	
	/**
	 * delete
	 * @param params
	 * @return
	 */
	public AppResult delete(AppParam params) {
		String ids = (String) params.getAttr("ids");
		AppResult  result = null;
		if (!StringUtils.isEmpty(ids)) {
			for (String id : ids.split(",")) {
				AppParam param = new AppParam();
				param.addAttr("recordId", id);
				
				result = super.delete(param, NAMESPACE);
			}
		} else if (!StringUtils.isEmpty(params.getAttr("recordId"))) {
			result = super.delete(params, NAMESPACE);
		} else {
			throw new AppException(DuoduoError.DELETE_NO_ID);
		}
		return result;
	}
}
