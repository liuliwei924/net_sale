package org.xxjr.busi.util.borrow;

import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.ddq.active.mq.message.CustMessageSend;
import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.core.SpringAppContext;
import org.ddq.common.exception.AppException;
import org.ddq.common.exception.DuoduoError;
import org.ddq.common.util.DateUtil;
import org.ddq.common.util.LogerUtil;
import org.ddq.common.util.StringUtil;
import org.ddq.model.cache.RedisUtils;
import org.ddq.zk.service.RemoteInvoke;
import org.springframework.util.StringUtils;
import org.xxjr.busi.util.BorrowConstant;
import org.xxjr.cust.util.info.CustQualUtil;
import org.xxjr.cust.util.info.CustomerIdentify;
import org.xxjr.cust.util.info.CustomerUtil;
import org.xxjr.sys.util.NumberUtil;
import org.xxjr.sys.util.ServiceKey;
import org.xxjr.sys.util.SysParamsUtil;

public class BorrowUtils {

	/**
	 * 直借申请信息
	 */
	public final static String LOAN_PARAMS = "loanParam";
	
	/** 直借类型-用户直接发布的借款 **/
	public final static String BORROW_SOURCE_TYPE_1 = "1";
	/** 直借类型-卡牛数据 **/
	public final static String BORROW_SOURCE_TYPE_2 = "2";
	
	/**最新的贷款申请数据	 */
	public final static String 	KEY_NEW_BORROW = "key_new_borrow";
	/**最新的贷款申请数据保留时长为 5分钟**/
	public static Integer NEW_BORROW_CACHE_TIME = 60*5;
	
	

	/**
	 * 查询客户当天是可以免费抢单
	 * 可以免费抢单返回 true,不可以，返回false
	 * @param params
	 * @return
	 */
	public static boolean haveFreeRob(Object customerId){
		AppParam queryParam = new AppParam();
		queryParam.setService("freeRobRecordService");
		queryParam.setMethod("queryCount");
		queryParam.addAttr("customerId", customerId);
		queryParam.addAttr("checkCount", "1");
		queryParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
		AppResult queryResult = RemoteInvoke.getInstance().call(queryParam);
		return ((Integer)queryResult.getAttr(DuoduoConstant.TOTAL_SIZE)<=0);
	}
	
	/**
	 * 非会员剩余免费抢单次数
	 * @param customerId
	 * @return
	 */
	public static AppResult queryFreeCount(Object customerId){
		AppParam queryParam = new AppParam();
		queryParam.setService("vipFreeService");
		queryParam.setMethod("queryFreeRobCount");
		queryParam.addAttr("customerId", customerId);
		queryParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_cust));
		return RemoteInvoke.getInstance().call(queryParam);
	}
	
	/**
	 * 贷款申请
	 * 
	 * @param telephone
	 * @return
	 */
	public static AppResult accountApply(AppParam params) {
		Object customerId = params.getAttr("customerId");
		AppResult result = new AppResult();
		if (StringUtils.isEmpty(customerId)) {
			throw new AppException(DuoduoError.UPDATE_NO_PARAMS);
		}
		params.setService("daiBorrowService");
		params.setMethod("accountApply");
		params.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));

		// 修改borrowNum
		result = RemoteInvoke.getInstance().call(params);
		if (result.isSuccess()) {
			try {
				BusiCustUtil.setBusiCust(CustomerIdentify.getCustIdentify(customerId.toString()),"borrowNum");
				// 保存个人资质
				AppParam qulifyParam = new AppParam();
				qulifyParam.addAttr("customerId", customerId);
				qulifyParam.addAttr("loanAmount", params.getAttr("loanAmount"));
				qulifyParam.addAttr("income", params.getAttr("income"));
				qulifyParam.addAttr("deadline", params.getAttr("loanDeadline"));
				qulifyParam.addAttr("workType", params.getAttr("workType"));
				qulifyParam.addAttr("carType", params.getAttr("carType"));
				qulifyParam.addAttr("houseType", params.getAttr("houseType"));
				qulifyParam.addAttr("fundType", params.getAttr("fundType"));
				qulifyParam.addAttr("trustType", params.getAttr("creditType"));
				qulifyParam.addAttr("socialType", params.getAttr("socialType"));
				
				CustQualUtil.editCustQualified(qulifyParam);
			} catch (Exception e) {
				LogerUtil.error(BorrowUtils.class, e, "saveQualify error");
			}
		
		}
		return result;
	}
	
	/**
	 * 判断是否能再申请借款
	 * @param telephone
	 * @return
	 */
	public static AppResult canApply(String customerId){
		AppParam param = new AppParam();
		param.setService("daiBorrowService");
		param.setMethod("canApply");
		param.addAttr("customerId", customerId);
		param.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
		AppResult result = RemoteInvoke.getInstance().call(param);
		int minDays = (int) result.getAttr("minDays");
		int canApplyBorrowDays  = SysParamsUtil.getIntParamByKey("canApplyBorrowDays", 1);
		
		if(minDays <= canApplyBorrowDays){
			result.setSuccess(false);
			result.setErrorCode("0001");
			result.setMessage(canApplyBorrowDays+"天内有过申请记录，不允许再申请!");
		}else{
			int applyDay = SysParamsUtil.getIntParamByKey("successApplyBorrowDays", 30);
			param = new AppParam();
			param.setService("daiBorrowService");
			param.setMethod("queryCount");
			param.addAttr("customerId", customerId);
			param.addAttr("status", 1);
			param.addAttr("startTime", DateUtil.getNextDay(new Date(), -applyDay));
			param.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
			AppResult result1 = RemoteInvoke.getInstance().call(param);
			if((Integer)result1.getAttr(DuoduoConstant.TOTAL_SIZE) > 0){
				result.setSuccess(false);
				result.setErrorCode("0002");
				result.setMessage("您在"+applyDay +"天内已经成功贷过款，不能再次申请");
			}
			
		}
		
		return result;
	}
	
	
	

	/**
	 * 判断当前用户是否能再甩单
	 * @param telephone
	 * @return
	 */
	public static boolean canApplyExchange(){
		AppParam param = new AppParam();
		Object customerId = CustomerUtil.getCustId();
		param.setService("daiExchangeService");
		param.setMethod("queryCount");
		param.addAttr("customerId", customerId);
		param.addAttr("createTime", DateUtil.toStringByParttern(new Date(), DateUtil.DATE_PATTERN_YYYY_MM_DD));
		param.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
		AppResult result = RemoteInvoke.getInstance().call(param);
		int totalSize = (int) result.getAttr(DuoduoConstant.TOTAL_SIZE);
		return totalSize< SysParamsUtil.getIntParamByKey("canExchangeNumbers", 3);
	}
	
	
	/**
	 * 判断该 手机号码能否再做甩单处理
	 * @param telephone
	 * @return
	 */
	public static boolean canApplyExchange(String telephone){
		AppParam param = new AppParam();
		param.setService("daiExchangeService");
		param.setMethod("queryCount");
		param.addAttr("telephone", telephone);
		param.addAttr("createTime", DateUtil.plus(LocalDateTime.now(), 1, DateUtil.ChronoUnit_MONTHS));
		param.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
		AppResult result = RemoteInvoke.getInstance().call(param);
		int totalSize = (int) result.getAttr(DuoduoConstant.TOTAL_SIZE);
		return totalSize <=0;
	}
	
	/**
	 * 获取借款信息
	 * @param borrowId
	 * @return
	 */
	public static Map<String,Object> queryBorrowInfo(Object borrowId){
		AppParam queryBorrow = new AppParam();
		queryBorrow.setService("daiBorrowService");
		queryBorrow.setMethod("query");
		queryBorrow.addAttr("borrowId",borrowId);
		queryBorrow.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
		AppResult result = RemoteInvoke.getInstance().call(queryBorrow);
		if(result.getRows().size() > 0){
			return result.getRow(0);
		}
		return null;
	}
	
	/**
	 * 获取借款信息
	 * @param borrowId
	 * @return
	 */
	public static Map<String,Object> queryBorrowInfo(AppParam queryBorrow){
		queryBorrow.setService("daiBorrowService");
		queryBorrow.setMethod("query");
		queryBorrow.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_busi));
		AppResult result = RemoteInvoke.getInstance().call(queryBorrow);
		if(result.getRows().size() > 0){
			return result.getRow(0);
		}
		return null;
	}
	
	/**
	 * 获取直借，甩单，微店待处理的数量
	 * @param borrowId
	 * @return
	 */
	public static Map<String,Object> queryDealCount(String customerId){
		AppParam queryBorrow = new AppParam();
		queryBorrow.setService("daiBorrowReService");
		queryBorrow.setMethod("queryDealCount");
		queryBorrow.addAttr("customerId",customerId);
		queryBorrow.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_busi));
		AppResult result = RemoteInvoke.getInstance().call(queryBorrow);
		if(result.getRows().size() > 0){
			Map<String,Object> countInfo = result.getRow(0);
			queryBorrow = new AppParam();
			queryBorrow.setService("BorrowApplyService");
			queryBorrow.setMethod("querySeniorCount");
			queryBorrow.addAttr("customerId",customerId);
			queryBorrow.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_busi_in));
			AppResult seniorResult = RemoteInvoke.getInstance().call(queryBorrow);
			if(seniorResult.getRows().size() > 0){
				countInfo.put("seniorCount", seniorResult.getRow(0).get("seniorCount"));
			}else{
				countInfo.put("seniorCount", 0);
			}
			return countInfo;
		}
		return null;
	}
	
	
	/**
	 * 查询最新贷款
	 */
	@SuppressWarnings("unchecked")
	public static List<Map<String,Object>> queryNewBorrow(int size) {
		List<Map<String,Object>> postList = (List<Map<String,Object>>)RedisUtils.getRedisService().get(KEY_NEW_BORROW);
		if(postList == null || postList.size()==0){
			postList = refreshNewBorrow(size);
		}
		return postList;
		
	}
	
	public static List<Map<String,Object>> refreshNewBorrow(int size){
		AppParam param = new AppParam();
		if (size == 0) {
			size = 3;
		}
		param.addAttr("size", size);
		param.setService("borrowBaseService");
		param.setMethod("queryNewBorrow");
		param.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START
						+ ServiceKey.Key_busi_in));
		AppResult result = RemoteInvoke.getInstance().callNoTx(param);
		RedisUtils.getRedisService().set(KEY_NEW_BORROW, (Serializable)result.getRows(), NEW_BORROW_CACHE_TIME);
		return result.getRows();
	}
	
	/**
	 * 成功抢单给贷款客户推送短信
	 * @param borrowId
	 */
	public static void sendMessage(String borrowId){
		if(0 == SysParamsUtil.getIntParamByKey("sendSmsToBorrower", 0)){
			return;
		}
		try {
			//查询用户信息
			AppParam queryBorrow = new AppParam();
			queryBorrow.addAttr("borrowId",borrowId);
			Map<String,Object> borrowInfo = queryBorrowInfo(queryBorrow);
			Object realName = borrowInfo.get("realName");
			//推送消息
			Map<String, Object> paramsMap = new HashMap<String, Object>();
			paramsMap.put("realName",realName);
			paramsMap.put("telephone", borrowInfo.get("telephone"));
			CustMessageSend messageSend = SpringAppContext.getBean(CustMessageSend.class);
			//发送处理，用户为空时增加判断
			messageSend.sendCustMessage(null, "daiRobSuccess", paramsMap);
		} catch (Exception e) {
			LogerUtil.error(BorrowUtils.class, e, "sendMessage error");
		}
	}
	
	/**
	 * 推广获客付款成功给贷款客户推送短信
	 * @param borrowId
	 */
	public static void sendTgMessage(AppParam params){
		if(0 == SysParamsUtil.getIntParamByKey("sendSmsToBorrower", 0)){
			return;
		}
		try {
			//推送消息
			String customerId = StringUtil.getString(params.getAttr("customerId"));
			Map<String, Object> paramsMap = new HashMap<String, Object>();
			paramsMap.put("realName",params.getAttr("realName"));
			paramsMap.put("telephone", params.getAttr("telephone"));
			CustMessageSend messageSend = SpringAppContext.getBean(CustMessageSend.class);
			//发送处理，用户为空时增加判断
			messageSend.sendCustMessage(customerId, "tgRobPaySuccess", paramsMap);
		} catch (Exception e) {
			LogerUtil.error(BorrowUtils.class, e, "sendTgMessage error");
		}
	}
	
	/**
	 * app贷款申请
	 * @param AppParam
	 * @return
	 */
	public static AppResult appLoanApply(AppParam params) {
		AppParam appParam = new AppParam("applyService", "newAppLoanApply");
		appParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_busi_in));
		appParam.addAttrs(params.getAttr());
		appParam.addAttr("identifyNo", params.getAttr("cardNo"));
		appParam.addAttr("channelDetail", params.getAttr("channelDetail"));
		appParam.addAttr("haveDetail", 1);//已填写信息
		appParam.addAttr("applyTime", new Date());
		return RemoteInvoke.getInstance().call(appParam);
	}

	/**
	 * 信贷经理处理中
	 * @param rows
	 * @return
	 */
	public static AppResult getApplyInfo(List<Map<String, Object>> rows) {
		AppResult result = new AppResult();
		String infoStatus = "0";  	//处理状态-无可处理方式
		int enableApply = 0; 		//可重新申请
		int enableSpeedUp = 0;	  	//可申请加速
		int speedupCount = 0;
		int size = rows.size();
		long now = new Date().getTime();
		for (Map<String, Object> map : rows) {
			//一个以上信贷经理在跟进则不能申请加速处理，全部信贷经理都没跟进并且符合时间条件可以重新申请
			String customerId = map.get("customerId").toString();
			map.put("customerId", CustomerUtil.getEncrypt(customerId));
			Map<String,Object> custMap = CustomerIdentify.getCustIdentify(customerId);
			map.put("headImgUrl",custMap.get("userImage"));
			map.put("realName",custMap.get("realName"));
			map.put("telephone",custMap.get("telephone"));
			map.put("company",custMap.get("company"));
			String receiveStatus = StringUtil.getString(map.get("receiveStatus"));
			if (!"0".equals(receiveStatus) && !"1".equals(receiveStatus)) {//如果不是这两个状态，就代表有人跟进不需要再做加速或其他处理
				infoStatus = "0";
				break;
			}
			Date threeDay = DateUtil.getNextDay(DateUtil.toDateByString(map.get("createTime").toString(), DateUtil.DATE_PATTERN_YYYY_MM_DD_HHMMSS), 3);
			Date thirtyDay = DateUtil.getNextDay(DateUtil.toDateByString(map.get("createTime").toString(), DateUtil.DATE_PATTERN_YYYY_MM_DD_HHMMSS), 30);
			if (now > threeDay.getTime() && now < thirtyDay.getTime()) {
				enableSpeedUp++;
				if (!StringUtils.isEmpty(map.get("speedupTime"))) {//申请时间是在3-30天以内,并且speedupTime不为空
					speedupCount++;    //已申请加速
					break;
				}
			}else if(now >= thirtyDay.getTime()){
				enableApply++;
			}
			String rateOffRate = StringUtil.getString(map.get("rateOffRate"));
			if(!StringUtils.isEmpty(rateOffRate) && rateOffRate.indexOf("-") >0){
           	 String[] rates = rateOffRate.split("-");
           	 map.remove("rateOffRate");
           	 map.put("rateMin", rates[0]);
           	 map.put("rateMax", rates[1]);
            }
		}
		if (enableSpeedUp == size) {
			infoStatus = "3";//申请加速处理
		}

		if (speedupCount >= 1) {
			infoStatus = "4";//已申请加速
		}
		
		if (enableApply == size) {
			infoStatus = "2";//重新申请
		}
		
		result.putAttr("applyRecord", rows);
		result.putAttr("infoStatus", infoStatus);
		return result;
	}
	
	/**
	 * 客服/门店处理中
	 * @param map
	 * @return
	 */
	public static AppResult getApplyStoreInfo(Map<String, Object> map) {
		AppResult result = new AppResult();
		Object borrowApplyId = map.get("borrowApplyId");
		// 大额直接分配，如果出现borrowApplyId为空，那么就是小贷，直接重新填写信息
		if(StringUtils.isEmpty(borrowApplyId)){
			result.putAttr("haveRecord", "0");
			result.putAttr("infoStatus", "0");
			result.putAttr("applyRecord", map);
			return result;
		}
		result.putAttr("haveRecord", "3");
		String infoStatus = "0";  				  //处理状态-无可处理方式
		long now = new Date().getTime();
		String applyTime = StringUtil.getString(map.get("applyTime"));
		Date threeDay = DateUtil.getNextDay(DateUtil.toDateByString(applyTime, DateUtil.DATE_PATTERN_YYYY_MM_DD_HHMMSS), 3);
		Date thirtyDay = DateUtil.getNextDay(DateUtil.toDateByString(applyTime, DateUtil.DATE_PATTERN_YYYY_MM_DD_HHMMSS), 30);
		Date sevenDay = DateUtil.getNextDay(DateUtil.toDateByString(applyTime, DateUtil.DATE_PATTERN_YYYY_MM_DD_HHMMSS), 7);
		
		String status = StringUtil.getString(map.get("status"));
		if ((!StringUtils.isEmpty(status) && "0".equals(status.toString()))) {	//0-无人跟进
			result.putAttr("haveRecord", "1");
			result.putAttr("noBody", "0");
			if (now > threeDay.getTime() && now < sevenDay.getTime()) { 		// 3天以上7天以内无人跟进可申请加速
				infoStatus = "1"; // 可加速
				if (!StringUtils.isEmpty(map.get("speedupTime"))) {//如果是在3-7天之内
					infoStatus = "4";    //已申请加速
				}
			}else if (now > sevenDay.getTime()) { // 7天以上可重新申请
				infoStatus = "2"; // 重新申请
			}
		}else{//客服/门店
			if (!StringUtils.isEmpty(map.get("lastKf")) && "1".equals(status)) {//客服跟进中
				result.putAttr("haveRecord", "4");//客服处理中
				result.putAttr("noBody", "0");
				if (now > threeDay.getTime() && now < thirtyDay.getTime()) { 		// 3天以上30天以内无人跟进可申请加速
					infoStatus = "3"; // 信贷经理或客服或门店申请加速
					String custId = String.valueOf(map.remove("lastKf"));
					map.put("customerId", CustomerUtil.getEncrypt(custId));
					if (!StringUtils.isEmpty(map.get("speedupTime"))) {
						infoStatus = "4";//已申请加速
					}
				}else if (now > thirtyDay.getTime()) { // 30天以上可重新申请
					infoStatus = "2"; // 重新申请
				}
			}else if ("2".equals(status)) { // 门店处理
				result.putAttr("haveRecord", "3"); //门店处理中
				if (now > threeDay.getTime() && now < thirtyDay.getTime()) { 		// 3天以上30天以内无人跟进可申请加速
					infoStatus = "3"; // 信贷经理或客服或门店申请加速
					if (!StringUtils.isEmpty(map.get("speedupTime"))) {
						infoStatus = "4";    //已申请加速
					}
				}else if (now > thirtyDay.getTime()) { // 30天以上可重新申请
					infoStatus = "2"; // 重新申请
				}
				int orderStatus = NumberUtil.getInt(map.get("orderStatus"), 0);
				if (4 == orderStatus) {			//审批中
					result.putAttr("haveRecord", "5");
				}else if (5 == orderStatus) {		//已放款
					result.putAttr("haveRecord", "6");
					infoStatus = "2"; // 放款后可以再次申请
				}
				String lastStore = String.valueOf(map.remove("lastStore"));
				Map<String,Object> custInfo = CustomerIdentify.getCustIdentify(lastStore);
				map.put("customerId", CustomerUtil.getEncrypt(lastStore));
				map.put("realName", custInfo.get("realName"));
				map.put("headImgUrl", custInfo.get("headImgUrl"));
				map.put("company", custInfo.get("company"));
			}
		}
		List<Map<String, Object>> rows = new ArrayList<Map<String,Object>>();
		rows.add(map);
		result.putAttr("applyRecord", rows);
		result.putAttr("infoStatus", infoStatus);
		return result;
	}

	/**
	 * 查询改客户在信贷经理中的记录
	 * @param map
	 * @return
	 */
	public static AppResult daiBorrowRecord(Map<String, Object> borrowMap) {
		AppResult reResult = new AppResult();
		if ("6".equals(borrowMap.get("sourceType").toString())) {
			//推广获客
			AppParam tgParam = new AppParam();
			tgParam.setMethod("queryTgLoanInfo");
			tgParam.setService("daiBorrowService");
			tgParam.addAttr("borrowId", borrowMap.get("borrowId"));
			tgParam.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_busi));
			reResult = RemoteInvoke.getInstance().callNoTx(tgParam);
			reResult = getApplyInfo(reResult.getRows());
			reResult.putAttr("haveRecord", "2");
		}else {
			//直借抢单
			AppParam reParam = new AppParam();
			reParam.setMethod("queryReLoanInfo");
			reParam.setService("daiBorrowService");
			reParam.addAttr("borrowId", borrowMap.get("borrowId"));
			reParam.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_busi));
			reResult = RemoteInvoke.getInstance().callNoTx(reParam);
			reResult = getApplyInfo(reResult.getRows());
			reResult.putAttr("haveRecord", "7");
		}
		return reResult;
	}
	
	/**
	 * 免单券活动设置的信贷经理信息
	 * @param customerId
	 * @return
	 */
	public static Map<String, Object> queryCustInfo(Object customerId) {
		AppParam param = new AppParam("custRobConfigService", "query");
		param.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_cust));
		param.addAttr("customerId", customerId);
		AppResult queryResult = RemoteInvoke.getInstance().callNoTx(param);
		if (queryResult.getRows().size() > 0) {
			return queryResult.getRow(0);
		}
		return null;
	}
	
	/**
	 * 判断是否可以申请退款
	 * @param borrowInfo
	 * @return
	 */
	public static boolean canBorrowBack(Map<String, Object> borrowInfo,int canBackDate){
		String robWay = StringUtil.getString(borrowInfo.get("robWay"));
		String robPriceStr = StringUtil.getString(borrowInfo.get("robPrice"));
		String receiveStatus = StringUtil.getString(borrowInfo.get("robStatus"));
		Date createTime = DateUtil.toDateByString(StringUtil.getString(borrowInfo.get("createTime")),
				DateUtil.DATE_PATTERN_YYYY_MM_DD_HHMMSS);
		// 判断是否免费单
		if(BorrowConstant.RobWay_1.equals(robWay)){
			return false;
		}
		// 判断是否已申请退单
		if(BorrowConstant.receiveStatus_5.equals(receiveStatus)){
			return false;
		}
		// 判断是否为会员特价单
		if(BorrowConstant.RobWay_7.equals(robWay)){
			return false;
		}
		// 判断抢单时间 3天内抢的单可退
		Date threeDayDate = DateUtil.toDateByString(DateUtil
				.toStringByParttern(
						DateUtil.getNextDay(new Date(), -canBackDate),
						DateUtil.DATE_PATTERN_YYYY_MM_DD),
				DateUtil.DATE_PATTERN_YYYY_MM_DD);
		if(createTime.getTime() < threeDayDate.getTime()){
			return false;
		}
		// 判断是否为免单劵或价格为0的单子
		double robPrice = NumberUtil.getDouble(robPriceStr, 0);
		if (robPrice == 0) {
			return false;
		}
		return true;
	}
	
	
	/**
	 * 获取免费抢单时间配置
	 */
	public static String[] getFreeRobTimeCfg(){
		String freeRobTimeCfg = SysParamsUtil.getStringParamByKey("freeRobTimeCfg","1-10-11;2-14-15;3-16-17");
		return freeRobTimeCfg.split(";");
	}
	
	/**
	 * 查询信贷经理某段时间内的抢单付费金额
	 * @param customerId
	 * @param startDate
	 * @param endDate
	 * @return
	 */
	public static double queryCustPayAmt(Object customerId, String startDate, String endDate){
		double payAmount = 0;
		AppParam param = new AppParam("daiBorrowReService", "queryPayAmount");
		param.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_busi));
		param.addAttr("customerId", customerId);
		param.addAttr("startDate", startDate);
		param.addAttr("endDate", endDate);
		AppResult queryResult = RemoteInvoke.getInstance().callNoTx(param);
		if(queryResult.getRows().size() > 0){
			payAmount = NumberUtil.getDouble(queryResult.getRow(0).get("payAmount"), 0);
		}
		return payAmount;
	}
	

}
