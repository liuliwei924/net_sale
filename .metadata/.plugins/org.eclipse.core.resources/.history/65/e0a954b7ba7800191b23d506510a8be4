package org.xxjr.cust.message;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import lombok.extern.slf4j.Slf4j;

import org.ddq.active.mq.message.CustMessageSend;
import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppResult;
import org.ddq.common.core.SpringAppContext;
import org.common.core.service.BaseService;
import org.ddq.common.exception.AppException;
import org.ddq.common.exception.DuoduoError;
import org.ddq.common.exception.SysException;
import org.ddq.common.util.StringUtil;
import org.ddq.common.web.session.DuoduoSession;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

@Lazy
@Service
@Slf4j
public class CustFeedbackService extends BaseService {
	private static final String NAMESPACE = "CUSTFEEDBACK";

	/**
	 * querys
	 * @param params
	 * @return
	 */
	public AppResult query(AppParam params) {
		return super.query(params, NAMESPACE);
	}
	
	/**
	 * queryByPage
	 * @param params
	 * @return
	 */
	public AppResult queryByPage(AppParam params) {
		return super.queryByPage(params, NAMESPACE);
	}
	
	/**
	 * queryCount
	 * @param params
	 * @return
	 */
	public AppResult queryCount(AppParam params) {
		int size = getDao().count(NAMESPACE, super.COUNT,params.getAttr(),params.getDataBase());
		AppResult result = new AppResult();
		result.putAttr(DuoduoConstant.TOTAL_SIZE, size);
		return result;
	}
	
	/**
	 * queryView
	 * @param params
	 * @return
	 */
	public AppResult queryView(AppParam params) {
		return super.queryByPage(params, NAMESPACE, "queryView", "queryViewCount");
	}
	
	/**
	 * queryViewCount
	 * @param params
	 * @return
	 */
	public AppResult queryViewCount(AppParam params) {
		int size = getDao().count(NAMESPACE, "queryViewCount",params.getAttr(),params.getDataBase());
		AppResult result = new AppResult();
		result.putAttr(DuoduoConstant.TOTAL_SIZE, size);
		return result;
	}
	/**
	 * insert
	 * @param params
	 * @return
	 */
	public AppResult insert(AppParam params) {
		params.addAttr("status", "0");
		params.addAttr("createTime", new Date());
		params.addAttr("createBy", DuoduoSession.getUserName());
		return super.insert(params, NAMESPACE);
	}
	
	/**
	 * update
	 * @param params
	 * @return
	 */
	public AppResult update(AppParam params) {
		params.addAttr("updateBy", DuoduoSession.getUserName());
		params.addAttr("updateTime", new Date());
		return super.update(params, NAMESPACE);
	}
	
	/**
	 * 回复
	 * @param params
	 * @return
	 */
	public AppResult replay(AppParam params) {
		AppResult result = new AppResult();
		Object feedbackId = params.getAttr("feedbackId");
		if(StringUtils.isEmpty(feedbackId)){
			throw new SysException(DuoduoError.UPDATE_NO_PARAMS);
		}
		AppParam queryParam = new AppParam();
		queryParam.addAttr("feedbackId", feedbackId);
		AppResult queryResult = this.query(queryParam);
		if(queryResult.getRows().size() == 0){
			throw new SysException(DuoduoError.UPDATE_DATA_IS_NOTEXISTS);
		}
		this.update(params);
		
		Map<String,Object> feedbackInfo = queryResult.getRow(0);
		
		String customerId = StringUtil.getString(feedbackInfo.get("customerId"));
//		String telephone = StringUtil.getString(feedbackInfo.get("telephone"));
		String isSend = StringUtil.getString(params.getAttr("isSend"));
		if("1".equals(isSend)){
			String messageType = "feedbackReply";
			Map<String,Object> paramsMap = new HashMap<String,Object>();
			paramsMap.put("content", queryResult.getRow(0).get("content"));
			paramsMap.put("auditDesc", params.getAttr("auditDesc"));
			if(StringUtils.isEmpty(customerId)){
				result.setErrorCode("001");
				result.setMessage("数据保存成功，用户未注册，无法发送短信");
				return result;
				// 未注册直接则给手机发短信通知
//				if (!ValidUtils.validateTelephone(telephone)) {
//					result.setErrorCode("001");
//					result.setMessage("数据保存成功，客户手机号码不正确，无法发送短信");
//					return result;
//				}
//				try{
//					Map<String, Object> messageTemplate = MessageTemplateUtil.getMessageTemplate(messageType);
//					if(messageTemplate == null){
//						result.setErrorCode("001");
//						result.setMessage("数据保存成功，feedbackReply发送模板未配置，无法发送短信");
//						return result;
//					}
//					String content = (String) messageTemplate.get("content");
//					content = MessageTemplateUtil.getMessageContent(paramsMap, content);
//					SmsHttpSendUtil.sendSMS(content, telephone);
//				} catch (Exception e1) {
//					result.setErrorCode("001");
//					result.setMessage("数据保存成功，发送短信失败");
//					LogerUtil.error(this.getClass(), e1, "feedback reply sendHttpSMS execute error!");
//				}
//				return result;
			}
			// 注册用户发MQ通知
			try {
				paramsMap.put("customerId", customerId);
				CustMessageSend messageSend = SpringAppContext.getBean(CustMessageSend.class);
				messageSend.sendCustMessage(customerId.toString(), messageType, paramsMap);
			} catch (Exception e) {
				log.error("feedbackReply error", e);
			}
		}
		return result;
	}
	
	/**
	 * delete
	 * @param params
	 * @return
	 */
	public AppResult delete(AppParam params) {
		String ids = (String) params.getAttr("ids");
		AppResult  result = null;
		if (!StringUtils.isEmpty(ids)) {
			for (String id : ids.split(",")) {
				AppParam param = new AppParam();
				param.addAttr("feedbackId", id);
				
				result = super.delete(param, NAMESPACE);
			}
		} else if (!StringUtils.isEmpty(params.getAttr("feedbackId"))) {
			result = super.delete(params, NAMESPACE);
		} else {
			throw new AppException(DuoduoError.DELETE_NO_ID);
		}
		return result;
	}
	
	/**
	 * queryViewByExport
	 * @param params
	 * @return
	 */
	public AppResult queryViewByExport(AppParam params) {
		return super.query(params, NAMESPACE, "queryView");
	}
}
