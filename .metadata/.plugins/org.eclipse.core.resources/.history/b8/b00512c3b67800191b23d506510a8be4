package org.xxjr.busi.util.push.impl;

import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;

import org.ddq.common.security.md5.Md5;
import org.ddq.common.util.JsonUtil;
import org.ddq.common.util.StringUtil;
import org.springframework.util.StringUtils;
import org.xxjr.busi.util.CountGradeUtil;
import org.xxjr.busi.util.borrow.IdCardResolveUtil;
import org.xxjr.busi.util.push.AbstractLoanUtil;
import org.xxjr.busi.util.push.PushCode;
import org.xxjr.busi.util.push.PushPlatformUtils;
import org.xxjr.sys.util.NumberUtil;
import org.xxjr.sys.util.SysParamsUtil;

@PushCode(6)
public class PushYiCaiDaoUtil extends AbstractLoanUtil{

	@Override
	public Map<String, Object> response(Map<String, Object> row)
				throws Exception {
		int status = 2;
		Object message = null;
		String ycdUrl = SysParamsUtil.getStringParamByKey("push_ycd_cfg_url", "http://cc.yicaidao.cn/api/loan/reg");
		StringBuilder url = new StringBuilder(ycdUrl);
		Map<String, String> params = getParams(row, url);
		Map<String, Object> resMap = PushPlatformUtils.httpPost(url.toString(), null, JsonUtil.getInstance().object2JSON(params), true, null);
		message = resMap.get("errMsg");
		if(Boolean.valueOf(StringUtil.getString(resMap.get("success")))){
			status = 1;
		}
		Map<String, Object> response = new HashMap<String, Object>();
		response.put("status", status);
		response.put("message", message);
		return response;
	}
	
	private Map<String, String> getParams (Map<String, Object> row, StringBuilder url) {
		Map<String, String> params = new HashMap<String, String>();
		String channelCode = SysParamsUtil.getStringParamByKey("push_ycd_cfg_channelCode", "2504");
		url.append("?c=" + channelCode + "&t=loan&b=mobile");
		params.put("Name", StringUtil.getString(row.get("applyName")));
		String identifyNo = StringUtil.getString(row.get("identifyNo"));//出生日期处理
		params.put("IDCard", identifyNo);
		
		//出生日期处理
		int age = NumberUtil.getInt(row.get("age"), -1);
		if (age == -1 || age <= 22 || age >= 60) {
			age = 28;
		}
		Random random = new Random();
		Calendar ca = Calendar.getInstance();
		int year = ca.get(Calendar.YEAR)-age;
		int month = random.nextInt(12)%(12) + 1;
		int day = random.nextInt(30)%(30) + 1;
		String birthday = year +"-" +(month<10? "0" +month : month+"") +"-" + (day<10 ? "0" +day : day+"");
		params.put("Birthday", birthday);
		
		String sex = StringUtil.getString(row.get("sex"));//性别处理
		if (StringUtils.isEmpty(sex)) {
			sex = IdCardResolveUtil.getSex(StringUtil.getString("identifyNo")).toString();
		}
		if ("1".equals(sex)) {
			params.put("Sex", "1");
		} else {
			params.put("Sex", "2");
		}
		String telephone = StringUtil.getString(row.get("telephone"));
		params.put("Phone", telephone);
		params.put("IP", StringUtil.getString(row.get("applyIp")));
		params.put("City", StringUtil.getString(row.get("cityName")));
		params.put("LoanAmount", StringUtil.getString(row.get("loanAmount")));
		int houseType = NumberUtil.getInt(row.get("houseType"), 2);
		if (houseType == 3) {
			params.put("Houes", "1");
		} else if (CountGradeUtil.judgeHouse(houseType)) {
			params.put("Houes", "2");
		}else {
			params.put("Houes", "3");
		}
		
		int carType = NumberUtil.getInt(row.get("carType"), 2);
		if (carType == 3) {
			params.put("Car", "1");
		} else if (CountGradeUtil.judgeCar(carType)) {
			params.put("Car", "2");
		}else {
			params.put("Car", "3");
		}
		
		params.put("LiveTime", "1");//居住时间默认半年
		
		int creditType = NumberUtil.getInt(row.get("creditType"), 2);
		params.put("XyCard", creditType == 2 ? "2" : "1");
		int wagesType = NumberUtil.getInt(row.get("wagesType"), 0);
		if (wagesType <= 0) {
			wagesType = 1;
		}
		params.put("Payway", StringUtil.getString(wagesType));
		int workType = NumberUtil.getInt(row.get("workType"), 0);
		if (workType == 4) {
			params.put("Hire", "1");
		}else if (workType == 3) {
			params.put("Hire", "5");
		}else if (workType == 2) {
			params.put("Hire", "6");
		}else {
			params.put("Hire", "4");
		}
		double income = 5000;
		if ((!StringUtils.isEmpty(row.get("income"))) && (NumberUtil.getDouble(row.get("income"), 0) > 0)) {
			income = NumberUtil.getDouble(row.get("income"), 0.0);
		}else if ((!StringUtils.isEmpty(row.get("pubManageLine"))) && (NumberUtil.getDouble(row.get("pubManageLine"), 0) > 0)) {
			double pubManageLine = NumberUtil.getDouble(row.get("pubManageLine"), 0);
			income = pubManageLine * 10000;
		}else if ((!StringUtils.isEmpty(row.get("cashMonth"))) && (NumberUtil.getDouble(row.get("cashMonth"), 0) > 0)) {
			income = NumberUtil.getDouble(row.get("cashMonth"), 0);
		}
		if (income < 5000) {
			params.put("Wage", "1");
		}else if (income >= 5000 && income < 10000) {
			params.put("Wage", "2");
		}else if (income >= 10000 && income < 20000) {
			params.put("Wage", "3");
		}else if (income >= 20000) {
			params.put("Wage", "4");
		}
		
		int socialType = NumberUtil.getInt(row.get("socialType"), 2);
		if (CountGradeUtil.judgeSocialType(socialType)) {
			int socialMonth = NumberUtil.getInt(row.get("socialMonth"), 0);
			if (socialMonth <= 6) {
				params.put("SheBaoTime", "2");
			}else {
				params.put("SheBaoTime", "3");
			}
		}else {
			params.put("SheBaoTime", "1");
		}
		
		int fundType = NumberUtil.getInt(row.get("fundType"), 2);
		if (CountGradeUtil.judgeFundType(fundType)) {
			int fundMonth = NumberUtil.getInt(row.get("fundMonth"), 0);
			if (fundMonth <= 6) {
				params.put("EPFTime", "2");
			}else {
				params.put("EPFTime", "3");
			}
		}else {
			params.put("EPFTime", "1");
		}
		
		int insurType = NumberUtil.getInt(row.get("insurType"), 0);
		if (CountGradeUtil.judgeInsurType(insurType)) {
			int insurMonth = NumberUtil.getInt(row.get("insurMonth"), 0);
			int insurPayType = NumberUtil.getInt(row.get("insurPayType"), 0);
			if ((insurPayType == 0 && insurMonth >= 24) || (insurPayType == 1 && insurMonth >= 2)) {
				params.put("Shouxian", "3");
			}else {
				params.put("Shouxian", "2");
			}
		}else {
			params.put("Shouxian", "1");
		}
		
		if (CountGradeUtil.judgeHouse(houseType) && CountGradeUtil.judgeCar(carType) && CountGradeUtil.judgeInsurType(insurType)) {
			params.put("Shouxian", "3");
		}
		
		String key = SysParamsUtil.getStringParamByKey("push_ycd_cfg_key", "ycd2kals4qpc7p9Loan");
		String encrypt = Md5.getInstance().encrypt(birthday + telephone + channelCode + key);
		url.append("&v=" + encrypt);
		return params;
	}

}
