package org.xxjr.busi.util.push.impl;

import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.PublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.X509EncodedKeySpec;
import java.util.Base64;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;

import org.ddq.common.exception.SysException;
import org.ddq.common.util.LogerUtil;
import org.ddq.common.util.StringUtil;
import org.springframework.util.StringUtils;
import org.xxjr.busi.util.push.AbstractLoanUtil;
import org.xxjr.busi.util.push.PushCode;
import org.xxjr.busi.util.push.PushPlatformUtils;
import org.xxjr.sys.util.NumberUtil;
import org.xxjr.sys.util.SysParamsUtil;

@PushCode(34)
public class PushVDMallUtil extends AbstractLoanUtil{

	@Override
	public Map<String, Object> response(Map<String, Object> row)
			throws Exception {
		Map<String, Object> response = new HashMap<String, Object>();
		int status = 2;
		String url = SysParamsUtil.getStringParamByKey("push_vdmall_cfg_url", "http://api.vdaimall.com/third/apply");
		Map<String, Object> resMap = PushPlatformUtils.httpPost(url, getParam(row), true);
		if (0 == NumberUtil.getInt(resMap.get("code"), 0)) {
			status = 1;
		}
		response.put("status", status);
		response.put("message", resMap.get("msg"));
		return response;
	}
	private final static Random r = new Random();
	
	public static Map<String, String> getParam(Map<String, Object> row){
		Map<String, String> content = new HashMap<String, String>();
		String publicKey = SysParamsUtil.getStringParamByKey("push_vdmall_cfg_publicKey", "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDc5pPlrdPbb/LCENps071HFotTGbDznXZ7O2/DnX/OO0GlQPtE/moe8iK/5/JCpb1EkPfTdOBWYHDHn7JYDzTbJsDORKpmjW3+g61zGcwb/agzSzCI3QY7JeiQVmRIhmPrcxqFkGoaND/i4xI3NUGdwZvjxwQXPcVgrvmgzR2qDQIDAQAB");
		PublicKey key = getPublicKey(publicKey);
		content.put("channel", SysParamsUtil.getStringParamByKey("push_vdmall_cfg_channel", "20181225104253604764"));
		String codes = SysParamsUtil.getStringParamByKey("push_vdmall_cfg_prodCode", "zadd,ddq,jky");
		String[] prods = codes.split(",");
		content.put("prodCode", prods.length == 0 ? prods[0] : prods[r.nextInt(prods.length)]);
		content.put("mobile", encrypt(StringUtil.objectToStr(row.get("telephone")), key));
		content.put("realName", encrypt(StringUtil.objectToStr(row.get("applyName")), key));
		if (PushPlatformUtils.isPushTest() && StringUtils.isEmpty(row.get("identifyNo"))) {
			row.put("identifyNo", "421023199909098514");
		}
		content.put("idCardNo", encrypt(StringUtil.objectToStr(row.get("identifyNo")), key));
		content.put("requestSourceIp", encrypt(StringUtil.objectToStr(row.get("applyIp")), key));
		return content;
	}
	
	public static PublicKey getPublicKey(String public_key){  
		try {  
			
			
			byte[] buffer= Base64.getDecoder().decode(public_key);
			X509EncodedKeySpec keySpec= new X509EncodedKeySpec(buffer);  
			
			KeyFactory keyFactory= KeyFactory.getInstance("RSA");  
			PublicKey publicKey = keyFactory.generatePublic(keySpec);  

			return publicKey;  
		} catch (NoSuchAlgorithmException e) {  
			LogerUtil.error(PushVDMallUtil.class, e, "无此算法");  
		} catch (InvalidKeySpecException e) {  
			LogerUtil.error(PushVDMallUtil.class, e, "公钥非法");  
		} catch (NullPointerException e) {  
			LogerUtil.error(PushVDMallUtil.class, e, "公钥数据为空");  
		}
		return null;
	}  
	
	
	public static String encrypt(Object data, PublicKey publicKey) { 
		String base64String=null;
		if(publicKey== null){  
			throw new SysException("加密公钥为空, 请设置");  
		}  
		if (StringUtils.isEmpty(data)) {
			throw new SysException("请传入数据");
		}
		Cipher cipher= null;  
		try {  
			cipher= Cipher.getInstance("RSA"); 
			cipher.init(Cipher.ENCRYPT_MODE, publicKey);
			byte[] output= cipher.doFinal(StringUtil.objectToStr(data).getBytes());  
			
			
			base64String = Base64.getEncoder().encodeToString(output);
		} catch (NoSuchAlgorithmException e) {  
			LogerUtil.error(PushVDMallUtil.class, e, "无此加密算法");  
		} catch (NoSuchPaddingException e) {  
			LogerUtil.error(PushVDMallUtil.class, e, "当请求特定填充机制但该环境中未提供");  
		}catch (InvalidKeyException e) {  
			LogerUtil.error(PushVDMallUtil.class, e, "加密公钥非法,请检查");  
		} catch (IllegalBlockSizeException e) {  
			LogerUtil.error(PushVDMallUtil.class, e, "明文长度非法");  
		} catch (BadPaddingException e) {  
			LogerUtil.error(PushVDMallUtil.class, e, "明文数据已损坏");  
		} 
		return base64String;	
	}
	public static void main(String[] args) {
		
	}
}
