package org.xxjr.busi.util.push.impl;

import java.util.Map;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.security.md5.Md5;
import org.ddq.common.util.LogerUtil;
import org.ddq.common.util.StringUtil;
import org.ddq.zk.service.RemoteInvoke;
import org.springframework.util.StringUtils;
import org.xxjr.busi.util.CountGradeUtil;
import org.xxjr.busi.util.push.PushCode;
import org.xxjr.busi.util.push.PushPlatformUtils;
import org.xxjr.busi.util.push.PushUtil;
import org.xxjr.sys.util.NumberUtil;
import org.xxjr.sys.util.ServiceKey;
@PushCode(15)
public class PushDianTuUtil implements PushUtil{
	
	private static final String url = "http://api.diantudaikuan.com/api/applyLoan/loan";
	private static final String sxjs = "xxjr";
	private static final String channel = "860263";
	private static final String key = "75c2c7cd2eddb7cae14e4b0f0b55e185";
	
//	private static final String test_url = "http://test.api.diantudaikuan.com/api/applyLoan/loan";
//	private static final String test_sxjs = "sxjstest";
//	private static final String test_channel = "100000";
//	private static final String test_key = "914d6efae417155bea1c14488d2f6b1d";
	
	
	@Override
	public int pushData(Map<String, Object> row, Integer pushType) {
		int status = 2;
		try {
			Map<String, Object> config = PushPlatformUtils.getConfigByCode(pushType);
			
			if ((!PushPlatformUtils.checkChannelOpen(config))) {
				LogerUtil.log(PushYiXinUtil.class, config.get("pushName") + "推送未打开");
				return 3;
			}
			if ((!PushPlatformUtils.checkChannelMaxCount(config))) {
				LogerUtil.log(PushYiXinUtil.class, config.get("pushName") + "推送已达上限");
				return 3;
			}
			if ((!PushPlatformUtils.checkChannelLimit(row, config))) {
				LogerUtil.log(PushYiXinUtil.class, config.get("pushName") + "筛选条件无法通过");
				return 4;
			}
			if ((!PushPlatformUtils.checkStopDate(config))) {
				LogerUtil.log(PushYiXinUtil.class, config.get("pushName") + "推送数据推送已暂停");
				return 5;
			}
			StringBuilder reqUrl = new StringBuilder(url + "?" + getParams(row));
			
			Map<String, Object> resMap = PushPlatformUtils.httpPost(reqUrl.toString(), null, true);
			if ("200".equals(StringUtil.getString(resMap.get("code")))) {
				status = 1;
			}
			AppParam updateParam = new AppParam("thirdPushPoolService", "updateStatus");
			updateParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_busi_in));
			updateParam.addAttrs(row);
			updateParam.addAttr("pushType", pushType);
			updateParam.addAttr("message", resMap.get("message"));
			updateParam.addAttr("status", status);
			RemoteInvoke.getInstance().call(updateParam);
			LogerUtil.log("电兔推送数据任务 PushDianTuUtil end");
		} catch (Exception e) {
			LogerUtil.error(PushXqbUtil.class, e, "PushDianTuUtil >>>>>>>>>>>>>>>>>>error");
		}
		return status;
	}
	
	private String getParams (Map<String, Object> row) {
		StringBuilder context = new StringBuilder();
		context.append("channel=").append(channel);
		context.append("&identityCardId=").append(StringUtil.getString(row.get("identifyNo")));
		context.append("&mobile=").append(StringUtil.getString(row.get("telephone")));
		context.append("&nonceStr=").append(System.currentTimeMillis());
		context.append("&sxjs=").append(sxjs);
		context.append("&key=").append(key);
		String stringSignTemp = context.toString();
		context.append("&sign=").append(Md5.getInstance().encrypt(stringSignTemp));
		context.append("&userName=").append(StringUtil.getString(row.get("applyName")));
		String cityName = StringUtil.getString(row.get("cityName"));
		cityName = cityName.substring(0, cityName.lastIndexOf("市"));
		context.append("&city=").append(cityName);
		double loanAmount = (NumberUtil.getDouble(row.get("loanAmount"), 1) * 10000);
		if (loanAmount <= 5000) {
			loanAmount = 5000;
		}
		context.append("&amount=").append(loanAmount);
		int loanDeadline = NumberUtil.getInt(row.get("loanDeadline"), 3);
		context.append("&term=").append(loanDeadline);
		context.append("&age=").append(NumberUtil.getInt(row.get("age"), 28));
		context.append("&workingIdentity=6");
		double income = 2000;
		if ((!StringUtils.isEmpty(row.get("income"))) && (NumberUtil.getDouble(row.get("income"), 0) > 0)) {
			income = NumberUtil.getDouble(row.get("income"), 0);
		}else if ((!StringUtils.isEmpty(row.get("pubManageLine"))) && (NumberUtil.getDouble(row.get("pubManageLine"), 0) > 0)) {
			double pubManageLine = NumberUtil.getDouble(row.get("pubManageLine"), 0);
			income =  pubManageLine * 10000;
		}else if ((!StringUtils.isEmpty(row.get("cashMonth"))) && (NumberUtil.getDouble(row.get("cashMonth"), 0) > 0)) {
			income = NumberUtil.getDouble(row.get("cashMonth"), 0);
		}
		context.append("&income=").append(income);
		int insurType = NumberUtil.getInt(row.get("insurType"), 0);
		context.append("&hasInsurance=").append((CountGradeUtil.judgeInsurType(insurType) ? "1" : "0"));
		if (loanAmount <= 10000) {
			context.append("&acceptHighRate=1");
			context.append("&creditRecord=3");
			context.append("&debt_type=1");
			context.append("&guaranteeType=0");
			context.append("&guaranteeWill=0");
		}else {
			context.append("&acceptHighRate=0");
			context.append("&creditRecord=2");
			context.append("&debt_type=0");
			context.append("&guaranteeType=0");
			context.append("&guaranteeWill=0");
		}
		return context.toString();
	}
}
