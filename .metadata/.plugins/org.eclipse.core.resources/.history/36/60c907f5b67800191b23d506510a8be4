package org.xxjr.cust.util.info;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.util.StringUtil;
import org.ddq.zk.service.RemoteInvoke;
import org.springframework.util.StringUtils;
import org.xxjr.sys.util.ServiceKey;

/**
 * 认证支付绑卡类交易工具类
 * @author Administrator
 *
 */
public class BaoFooRealBindDealUtil {

	// 交易成功
	public final static String SUCESS_FLAG = "0000";
	
	/**
	 * 预绑卡处理
	 * @param params
	 * @return
	 */
	public static AppResult preBindHandle(AppParam params) {
		AppResult result = new AppResult();
		Object customerId = params.getAttr("customerId");
		String bankCode = (String)params.getAttr("pay_code");
		String bankName = (String)params.getAttr("bank_name");
		String telephone = (String)params.getAttr("mobile");
		String holderName = (String)params.getAttr("id_holder");
		String certificateNo = (String)params.getAttr("id_card");
		String bankCardNo = (String)params.getAttr("acc_no");
		// 初始绑卡信息
		AppParam rechargeParam = new AppParam();
		rechargeParam.setService("stewardCustBankService");
		rechargeParam.setMethod("saveOrUpdate");
		rechargeParam.addAttr("customerId", customerId);
		rechargeParam.addAttr("isDefault", "1");
		rechargeParam.addAttr("bankCode", bankCode);
		rechargeParam.addAttr("bankName", bankName);
		rechargeParam.addAttr("telephone", telephone);
		rechargeParam.addAttr("holderName", holderName);
		rechargeParam.addAttr("certificateNo", certificateNo);
		rechargeParam.addAttr("bankCardNo", bankCardNo);
		rechargeParam.addAttr("status", "0"); // 0-预绑定 1-绑定成功 2-绑定失败 3-解除绑定
		rechargeParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_cust));
		AppResult rechargeResult = RemoteInvoke.getInstance().call(rechargeParam);
		if(!rechargeResult.isSuccess()){
			result.setSuccess(Boolean.FALSE);
			result.setMessage(rechargeResult.getMessage());
			return result;
		}
		return rechargeResult;
	}
	
	/**
	 * 更新预绑卡信息
	 * @param params
	 * @return
	 */
	public static AppResult updatePreBindBankCard(AppParam params) {
		AppResult result = new AppResult();
		String bankId = (String)params.getAttr("bankId");
		String trans_id = (String)params.getAttr("trans_id");
		String resp_code = (String)params.getAttr("resp_code");
		String resp_msg = (String)params.getAttr("resp_msg");
		AppParam rechargeParam = new AppParam();
		rechargeParam.setService("stewardCustBankService");
		rechargeParam.setMethod("update");
		rechargeParam.addAttr("bankId", bankId);
		rechargeParam.addAttr("trans_id", trans_id);
		rechargeParam.addAttr("resp_code", resp_code);
		rechargeParam.addAttr("resp_msg",resp_msg);
		rechargeParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_cust));
		AppResult rechargeResult = RemoteInvoke.getInstance().call(rechargeParam);
		if(!rechargeResult.isSuccess()){
			result.setSuccess(Boolean.FALSE);
			result.setMessage(rechargeResult.getMessage());
			return result;
		}
		result.putAttr("resp_code", resp_code);
		result.putAttr("resp_msg", resp_msg);
		return result;
	}
	
	/**
	 * 正式绑卡处理
	 * @param params
	 * @return
	 */
	public static AppResult bindCardHandle(AppParam params) {
		AppResult result = new AppResult();
		Object customerId = params.getAttr("customerId");
		String bindId = (String)params.getAttr("bind_id");
		String resp_code = (String)params.getAttr("resp_code");
		String resp_msg = (String)params.getAttr("resp_msg");
		String bankId = (String)params.getAttr("bankId");
		
		// 更新绑卡信息
		AppParam rechargeParam = new AppParam();
		rechargeParam.setService("stewardCustBankService");
		rechargeParam.setMethod("update");
		rechargeParam.addAttr("customerId", customerId);
		rechargeParam.addAttr("resp_code", resp_code);
		rechargeParam.addAttr("resp_msg", resp_msg);
		rechargeParam.addAttr("bindId", bindId);
		rechargeParam.addAttr("bankId", bankId);
		if(SUCESS_FLAG.equals(resp_code) && !StringUtils.isEmpty(bindId)){
			rechargeParam.addAttr("status", 1); //绑卡成功
		}else{
			rechargeParam.addAttr("status", 2); //绑卡失败
		}
		rechargeParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_cust));
		AppResult rechargeResult = RemoteInvoke.getInstance().call(rechargeParam);
		if(rechargeResult.isSuccess()){
			result.putAttr("resp_msg", resp_msg);
			result.putAttr("resp_code", resp_code);
			result.putAttr("bind_id",bindId);
		}
		else{
			result.setSuccess(Boolean.FALSE);
			result.setMessage(rechargeResult.getMessage());
		}
		return result;
	}
	
	/**
	 * 查询trans_id
	 * @param params
	 * @return
	 */
	public static  AppResult queryTransId(AppParam params){
		params.setService("stewardCustBankService");
		params.setMethod("query");
		params.setOrderBy("createTime");
		params.setOrderValue("desc");
		params.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_cust));
		return RemoteInvoke.getInstance().callNoTx(params);
	}
	
	/**
	 * 查询绑定银行卡信息
	 * @param params
	 * @return
	 */
	public static  AppResult queryBindBankCardInfo(AppParam params){
		AppResult result= new AppResult();
		params.setService("stewardCustBankService");
		params.setMethod("queryBankCard");
		params.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_cust));
		AppResult newResult =  RemoteInvoke.getInstance().callNoTx(params);
		if(newResult.getRows().size() > 0 && !StringUtils.isEmpty(newResult.getRow(0))){
			result.addRow(newResult.getRow(0));
		}
		return result;
	}
	
	/**
	 * 更新绑卡状态status
	 * @param params
	 * @return
	 */
	public static AppResult updateStatus(AppParam params) {
		AppResult result = new AppResult();
		String resp_code = StringUtil.objectToStr(params.getAttr("resp_code"));
		String resp_msg = StringUtil.objectToStr(params.getAttr("resp_msg"));
		String status = StringUtil.objectToStr(params.getAttr("status"));
		String bankId = StringUtil.objectToStr(params.getAttr("bankId"));
		// 更新绑卡信息
		AppParam rechargeParam = new AppParam();
		rechargeParam.setService("stewardCustBankService");
		rechargeParam.setMethod("update");
		rechargeParam.addAttr("resp_code", resp_code);
		rechargeParam.addAttr("resp_msg", resp_msg);
		rechargeParam.addAttr("status", status);
		rechargeParam.addAttr("fromStatus", "1");
		rechargeParam.addAttr("bankId", bankId);
		rechargeParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_cust));
		AppResult rechargeResult = RemoteInvoke.getInstance().call(rechargeParam);
		if(rechargeResult.isSuccess()){
			result.putAttr("resp_msg", resp_msg);
			result.putAttr("resp_code", resp_code);
		}
		else{
			result.setSuccess(Boolean.FALSE);
			result.setMessage(rechargeResult.getMessage());
		}
		return result;
	}
	
	/**
	 * 查询交易记录
	 * @param params
	 * @return
	 */
	public static  AppResult queryTradeRecord(AppParam params){
		params.setService("rechargeService");
		params.setMethod("query");
		params.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_cust));
		AppResult newResult =  RemoteInvoke.getInstance().callNoTx(params);
		return newResult;
	}
	
	/**
	 * 查询交易记录(分页查询)
	 * @param params
	 * @return
	 */
	public static  AppResult queryTradeRecordByPage(AppParam params){
		params.setService("rechargeService");
		params.setMethod("queryByPage");
		params.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_cust));
		AppResult newResult =  RemoteInvoke.getInstance().callNoTx(params);
		return newResult;
	}
	
	/**
	 * 查询交易次数
	 * @param params
	 * @return
	 */
	public static  AppResult queryTradeCount(AppParam params){
		params.setService("rechargeService");
		params.setMethod("queryCount");
		params.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_cust));
		AppResult newResult =  RemoteInvoke.getInstance().callNoTx(params);
		return newResult;
	}
}
