package org.xxjr.busi.util.wd;

import java.io.Serializable;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.util.StringUtil;
import org.ddq.model.cache.RedisUtils;
import org.ddq.zk.service.RemoteInvoke;
import org.springframework.util.StringUtils;
import org.xxjr.cust.util.info.CustomerIdentify;
import org.xxjr.cust.util.info.CustomerUtil;
import org.xxjr.sys.util.SysParamsUtil;

import com.google.common.collect.ImmutableMap;

public class WdProductUtil {

	/** 微店配置缓存 **/
	public static final String KEY_WD_PRODUCT_CFG = "key_wd_product_cfg";

	/**
	 * 编辑微店产品
	 * @param params
	 * @return
	 */
	public static AppResult editWdProduct(AppParam params){
		AppResult result  = WdShopUtil.validCust(params.getAttr("customerId").toString());
		if(!result.isSuccess()){
			return result;
		}
		if(StringUtils.isEmpty(params.getAttr("productId"))){
			int wdProdCount = Integer.parseInt(WdShopUtil.getWdCache(params.getAttr("customerId").toString())
					.get("proCount").toString());
			int maxCount = SysParamsUtil.getIntParamByKey("wdProdCount", 5);
			if(wdProdCount >= maxCount){
				return CustomerUtil.retErrorMsg("你已经超过最大的产品申请个数:"+maxCount+"个，不能再添加!");
			}
		}
		if(StringUtils.isEmpty(params.getAttr("productName"))||StringUtils.isEmpty(params.getAttr("detailDesc"))){
			return CustomerUtil.retErrorMsg("产品名称和产品特点不允许为空!");
		}
		if(params.getAttr("productName").toString().length()>10){
			return CustomerUtil.retErrorMsg("产品名称不允许超过10个字符!");
		}
		if(params.getAttr("detailDesc").toString().length()>20){
			return CustomerUtil.retErrorMsg("产品特点不允许超过20个字符!");
		}
		String[] tedians = params.getAttr("detailDesc").toString().split(",");
		if(tedians.length>3){
			return CustomerUtil.retErrorMsg("产品特点过多','请选用两个最优特点!");
		}
		if (StringUtils.isEmpty(params.getAttr("loanType"))) {
			return CustomerUtil.retErrorMsg("产品类型不能为空!");
		}
		boolean proFlag = StringUtils.isEmpty(params.getAttr("productId"));
		boolean isSave = StringUtils.isEmpty(params.getAttr("isSave"));
		params.setService("wdProductService");
		if(isSave){
		   params.setMethod(proFlag ? "insert" : "update");
		}else{
		   params.setMethod("save");
		}
		if (proFlag) {
			params.addAttr("tgStatus", "0");
			params.addAttr("tgAmount", "0");
		}
		params.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
		
		result = RemoteInvoke.getInstance().call(params);
		if(result.isSuccess()){
			WdShopUtil.refreshWdCache(params.getAttr("customerId").toString(), "wdInfo");
		}
		return result;
	}
	
	/**
	 * 编辑微店产品规则
	 * @param params
	 * @return
	 */
	public static AppResult editWdProductRule(AppParam params){
		 if(StringUtils.isEmpty(params.getAttr("productId"))){
	    	return CustomerUtil.retErrorMsg("产品ID不能为空!");
	    }
		 params.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
		params.setService("wdProductRuleService");
		params.setMethod("update");
		params.addAttr("customerId", CustomerUtil.getCustId());
		return RemoteInvoke.getInstance().call(params);
	}
	
	/**
	 * 编辑微店产品规则
	 * @param params
	 * @return
	 */
	public static AppResult editWdProductTerm(AppParam params){
		 if(StringUtils.isEmpty(params.getAttr("productId"))){
	    	return CustomerUtil.retErrorMsg("产品ID不能为空!");
	    }
		//核算产品价格是否正确
		 WdCfgUtil.getProductPrice(params);
		//保存产品规则
		params.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
		params.setService("wdProductTermService");
		params.setMethod("save");
		params.addAttr("customerId", CustomerUtil.getCustId());
		return RemoteInvoke.getInstance().call(params);
	}

	/**
	 * 删除微店产品
	 * @param params
	 * @return
	 */
	public static AppResult delWdProduct(AppParam params){
		params.setService("wdProductService");
		params.setMethod("delete");
		params.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
		
		AppResult result = RemoteInvoke.getInstance().call(params);
		if(result.isSuccess()){
			WdShopUtil.refreshWdCache(params.getAttr("customerId").toString(), "wdInfo");
		}
		return result;
	}
	
	/**
	 * 微店产品信息
	 * @param productId
	 * @param proUuid
	 * @return Map<String,Object>
	 */
	public static Map<String,Object> wdProductInfo(String productId,String proUuid){
		AppParam params = new AppParam("wdProductService", "query");
		if(StringUtils.isEmpty(productId)&& StringUtils.isEmpty(proUuid)){
			return new HashMap<String, Object>();
		}
		params.addAttr("productId", productId);
		params.addAttr("uuid", proUuid);
		params.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
		AppResult result = RemoteInvoke.getInstance().callNoTx(params);
		Map<String,Object> map = new HashMap<String, Object>();
		if(result.getRows().size()>0){
			map = result.getRow(0);
			String customerId = map.remove("customerId").toString();
			String cityName = StringUtil.getString(map.get("cityName"));
			map.put("cityPrice", WdCfgUtil.getCityPrice(cityName));
			map.put("uid", CustomerUtil.getEncrypt(customerId));
		}
		result = null;
		return map;
	}
	/**
	 * 微店产品信息
	 * @param productId
	 * @param proUuid
	 * @return Map<String,Object>
	 */
	public static Map<String,Object> queryWdProductInfo(String productId,String proUuid){
		AppParam params = new AppParam("wdProductService", "query");
		if(StringUtils.isEmpty(productId)&& StringUtils.isEmpty(proUuid)){
			return new HashMap<String, Object>();
		}
		params.addAttr("productId", productId);
		params.addAttr("uuid", proUuid);
		params.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
		AppResult result = RemoteInvoke.getInstance().callNoTx(params);
		Map<String,Object> map = new HashMap<String, Object>();
		if(result.getRows().size()>0){
			map = result.getRow(0);
		}
		return map;
	}

	/**
	 *微店产品个数
	 * @param customerId
	 * @return int
	 */
	public static int wdProdcutCount(String customerId){
		AppParam params = new AppParam("wdProductService", "queryCount");
		params.addAttr("customerId", customerId);
		params.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
		AppResult result = RemoteInvoke.getInstance().call(params);
		int count = Integer.parseInt(result.getAttr(DuoduoConstant.TOTAL_SIZE).toString());
		
		return count;
	}
	

	/**
	 * 查询月利率范围
	 * @param customerId
	 * @return Map<String,Object>
	 */
	@SuppressWarnings("all")
	public static  Map<String, Object> queryRateRange(String customerId){
		AppParam params = new AppParam("wdProductService", "queryRateRange");
		params.addAttr("customerId", customerId);
		params.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
		AppResult result = RemoteInvoke.getInstance().call(params);
		Map<String,Object> map = ImmutableMap.of("rateMin",0,"rateMax",0);
		if(result.getRows().size() > 0){
			if(result.getRow(0) != null){
				map = result.getRow(0);
			}
		}
		
		return map;
	}
	
	
	/**
	 * 查询微店产品列表
	 * @param params
	 * @return
	 */
	public static  AppResult queryWdProductList(AppParam params){
		params.setService("wdProductService");
		params.setMethod("queryByPage");
		params.setOrderBy("createTime");
		params.setOrderValue("DESC");
		params.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
		return RemoteInvoke.getInstance().call(params);
	}
	
	
	/**
	 * 查询微店产品列表
	 * @param params
	 * @return
	 */
	public static  AppResult queryShowProductList(AppParam params){
		AppResult result = new AppResult();
		params.setService("wdProductService");
		params.setMethod("queryShow");
		params.setOrderBy("tgStatus,tgAmount,createTime");
		params.setOrderValue("DESC,DESC,DESC");
		params.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
		result = RemoteInvoke.getInstance().call(params);
		for (Map<String,Object> map : result.getRows()) {
			String rateOffRate = map.get("rateOffRate").toString();
			if (!StringUtils.isEmpty(params.getAttr("credit"))) {
				if("面议".equals(rateOffRate)){
					map.put("monthAmount", "面议");
					map.put("totalTnterest", "面议");
				}else{//计算等额本息
					BigDecimal offRate = BigDecimal.valueOf(Double.parseDouble(rateOffRate.split("%")[0]) * 0.01);
					BigDecimal credit = BigDecimal.valueOf(Double.parseDouble(params.getAttr("credit").toString()));
					BigDecimal loanDate = BigDecimal.valueOf(Double.parseDouble(params.getAttr("loanDate").toString()));
					BigDecimal monthAmount = credit.multiply(offRate)
							.multiply(
									new BigDecimal(String.valueOf(Math.pow(
											(1 + offRate.doubleValue()),
											loanDate.intValue()))))
											.divide(new BigDecimal(String.valueOf(Math.pow(
													(1 + offRate.doubleValue()),
													loanDate.intValue()))).subtract(BigDecimal
															.valueOf(1)),RoundingMode.HALF_UP);
					map.put("monthAmount", monthAmount.multiply(BigDecimal.valueOf(10000)).setScale(0, BigDecimal.ROUND_HALF_UP) + "元");
					map.put("totalTnterest", monthAmount.multiply(loanDate).subtract(credit).setScale(2, BigDecimal.ROUND_HALF_UP) + "万元");
				}
			}
			getShowDesc(map);
		}
		return result;
	}

	/**
	 * 处理前台页面需要展示的信息
	 * @param map
	 */
	public static void getShowDesc(Map<String, Object> map) {
		//获取星级信息
		int applyNum = Integer.parseInt(map.get("applyNum").toString());
		if (applyNum > 1000) {
			map.put("starsNum", 5);
		} else if (applyNum > 500) {
			map.put("starsNum", 4);
		} else if (applyNum > 100) {
			map.put("starsNum", 4);
//			map.put("starsNum", 3);
		} else if (applyNum > 0) {
			map.put("applyNum", "少于100");
			map.put("starsNum", 4);
//			map.put("starsNum", 2);
		} else {
			map.put("applyNum", "少于100");
			map.put("starsNum", 4);
		}
		//获取收入信息
		String income = org.ddq.common.util.StringUtil.getString(map.get("income"));
		String cardAmt = org.ddq.common.util.StringUtil.getString(map.get("cardAmt"));
		String incomeStr = "";
		if (!StringUtils.isEmpty(income)) {
			incomeStr += "现金月收入："+getDescStr("income",income);
		}
		if (!StringUtils.isEmpty(cardAmt)) {
			if(!StringUtils.isEmpty(incomeStr)){
				incomeStr +=",";
			}
			incomeStr += "打卡月收入："+getDescStr("cardAmt", cardAmt);
		}
		if(StringUtils.isEmpty(incomeStr)){
			incomeStr = "无要求";
		}
	   Map<String, Object> descMap = setConditionDesc(map);
       map.put("incomeAmt", incomeStr);
       map.put("ageInfo", descMap.get("ageStr"));
       map.put("houseType", descMap.get("houseStr"));
       map.put("carType", descMap.get("carStr"));
       map.put("workType", descMap.get("workStr"));
       map.put("suitableStr", descMap);
	}

	public static String getDescStr(String key,String value){
		Map<String, Map<String, Object>> cfg = WdCfgUtil.getProductMapCfg();
		String[] lables = cfg.get(key).get("paramLabels").toString()
				.split(";|；");
		String[] values = cfg.get(key).get("paramValues").toString()
				.split(";|；");
		String[] params = value.split(",|，");
		String unit = cfg.get(key).get("unit").toString();

		StringBuffer strBuffer = new StringBuffer();
		Double sortArray[] = new Double[params.length];
		for (int i = 0; i < params.length; i++) {
			sortArray[i] = Double.parseDouble(params[i]);
		}
		Arrays.sort(sortArray);
		for (int i = 0; i < sortArray.length; i++) {
			params[i]= new DecimalFormat("#.#").format(sortArray[i]);
		}
		int myLength = params.length;
		if (myLength == values.length) {// 全选
			strBuffer.append("不限");
		} else if (myLength > 1) {//全选值在1个以上
			int[] indexs = new int[myLength];
			for (int i = 0; i < params.length; i++) {
				int index = WdCfgUtil.binarySearch(values,
						params[i]);
				indexs[i] = index;
				if (!StringUtils.isEmpty(strBuffer.toString())) {
					strBuffer.append(",");
				}
				if (index >= 0) {
					strBuffer.append(lables[index]);
				}
			}
			String str[] = strBuffer.toString().split(",|，");
			strBuffer.setLength(0);
			String tempStr = "";
			boolean continuity = true;
			for (int i = 0; i < indexs.length-1; i++) {
				//如果是连续的值，者将最大值和最小值拼接成一个区间
				if (indexs[i + 1] - indexs[i] == 1) {
					if(indexs[0] == 0 && continuity){
						if(str[i + 1].indexOf("-") >= 0){
							str[i+1] =str[i + 1].split("-")[1]+"以下";
						}else{
							str[i+1] = str[i].split("-")[0] + "以下";
						}
						tempStr =str[i+1];
					}else if (str[i].indexOf("-") >= 0) {
						if(str[i + 1].indexOf("-") >= 0){
							str[i+1] = str[i].split("-")[0]+"-"+str[i + 1].split("-")[1];
						}else{
							str[i+1] = str[i].split("-")[0] + unit;
						}
						tempStr =str[i+1];
					}else{
						strBuffer.append(str[i]).append(",");
					}
				}else{//如果不是连续的值，这单独拼接
					strBuffer.append(str[i]).append("或");
					continuity = false;
				}
				
			}
			if(indexs[indexs.length-1] -indexs[indexs.length-2] != 1){
				strBuffer.append(str[str.length-1]);
			}else if(!StringUtils.isEmpty(tempStr)){
				strBuffer.append(tempStr);
			}
		} else {//只有一个值
			int index = WdCfgUtil.binarySearch(values,
					params[0]);
			if (index >= 0) {
				strBuffer.append(lables[index]);
			}
		}
		String resultStr = strBuffer.toString();
		//判断拼接后的字符串是否以逗号结尾，如果是则去掉
		if(!StringUtils.isEmpty(resultStr) && resultStr.indexOf(",") == resultStr.length()-1){
			resultStr = resultStr.substring(0, resultStr.length() - 1);
		}
		return resultStr;
	}
	
	// 拼接前台需要显示的信息(新)
	public static Map<String, Object> setConditionDesc(Map<String, Object> proTermMap) {
			Map<String, Object> result = new HashMap<String, Object>();
			if (proTermMap.isEmpty()) {
				result.put("ageStr", "无要求");
				result.put("assetsStr", "无要求");
				result.put("creditStr", "无要求");
				result.put("workStr", "无要求");
				result.put("otherStr", "无要求");
				return result;
			}
			StringBuffer descStr = new StringBuffer();
			Map<String, Map<String, Object>> cfg = WdCfgUtil.getProductMapCfg();
			// 拼接年龄要求
			Object ageFlag = proTermMap.get("ageFlag");
			if (!StringUtils.isEmpty(ageFlag) && "1".equals(ageFlag.toString())) {
				descStr.append(proTermMap.get("ageMin") + "-").append(
						proTermMap.get("ageMax") + "岁");
				result.put("ageStr", descStr);
			} else {
				result.put("ageStr", "无要求");
			}
			// 拼接职业要求
			String workType = org.ddq.common.util.StringUtil.getString(proTermMap
					.get("workType"));
			StringBuffer workStr = new StringBuffer();
			if (!StringUtils.isEmpty(workType)) {
				workStr.append(" ");
				// 现金收入/月
				String income = org.ddq.common.util.StringUtil.getString(proTermMap
						.get("income"));
				String journal = org.ddq.common.util.StringUtil
						.getString(proTermMap.get("journal"));
				String manageYear = org.ddq.common.util.StringUtil
						.getString(proTermMap.get("manageYear"));
				String cardAmt = org.ddq.common.util.StringUtil
						.getString(proTermMap.get("cardAmt"));
				String incomeStr = "";
				if (!StringUtils.isEmpty(income) && !"0".equals(income)) {
					incomeStr = WdProductUtil.getDescStr("income",income);
				}
				String cardAmtStr = "";
				if (!StringUtils.isEmpty(cardAmt) && !"0".equals(cardAmt)) {
					cardAmtStr = WdProductUtil.getDescStr("cardAmt",cardAmt);
				}
				String manageYearStr = "";
				if (!StringUtils.isEmpty(manageYear) && !"0".equals(manageYear)) {
					manageYearStr = WdProductUtil.getDescStr("manageYear",
							manageYear).replaceAll("年年", "年");
				}
				String journalYearStr = "";
				if (!StringUtils.isEmpty(journal) && !"0".equals(journal)) {
					journalYearStr = WdProductUtil.getDescStr("journal",journal);
				}
				if (workType.contains("1")) {
					workStr.append("无固定职业");
					if (!StringUtils.isEmpty(incomeStr) && !"0".equals(incomeStr)) {
						workStr.append("（现金收入/月：" + incomeStr + "）");
					}
				}
				if (workType.contains("2")) {
					String pubAmount = org.ddq.common.util.StringUtil
							.getString(proTermMap.get("pubAmount"));
					String pubAmountStr = "";
					if(!StringUtils.isEmpty(pubAmount)  && !"0".equals(pubAmount)){
						pubAmountStr = WdProductUtil.getDescStr("pubAmount",pubAmount);
					}
					workStr.append(",企业主（");
					if (!StringUtils.isEmpty(journalYearStr)
							&& !"0".equals(journalYearStr)) {
						workStr.append("总经营流水:" + journalYearStr);
					}
					if (!StringUtils.isEmpty(pubAmountStr)
							&& !"0".equals(pubAmountStr)) {
						workStr.append(",对公账户经营收入/月:" + pubAmountStr);
					}
					if (!StringUtils.isEmpty(manageYearStr)) {
						workStr.append(",经营年限:" + manageYearStr);
					}
					workStr.append("）");
				}
				if (workType.contains("3")) {
					String licenceLimit = org.ddq.common.util.StringUtil
							.getString(proTermMap.get("licenceLimit"));
					workStr.append(",个体户（");
					if (!StringUtils.isEmpty(journalYearStr)
							&& !"0".equals(journalYearStr)) {
						workStr.append("总经营流水:" + journalYearStr);
					}
					if (!StringUtils.isEmpty(licenceLimit)
							&& "1".equals(licenceLimit)) {
						workStr.append(",有营业执照");
					}
					if (!StringUtils.isEmpty(manageYearStr)) {
						workStr.append(",经营年限:" + manageYearStr);
					}
					workStr.append("）");
				}
				if (workType.contains("4")) {
					workStr.append(",上班族（");
					if (!StringUtils.isEmpty(cardAmtStr) && !"0".equals(cardAmtStr)) {
						workStr.append("银行卡发放工资/月：" + cardAmtStr);
					}
					if (!StringUtils.isEmpty(incomeStr) && !"0".equals(incomeStr)) {
						workStr.append(",现金发放收入/月：" + incomeStr);
					}
					workStr.append("）");
				}
			}
			if (!StringUtils.isEmpty(workStr.toString())) {
				result.put("workStr", workStr.toString().replaceAll("（）", "")
						.replaceAll("（,", "（").replaceAll(" ,", ""));
			} else {
				result.put("workStr", "无要求");
			}
			StringBuffer assetsStr = new StringBuffer();
			// 保险要求
			Object insurFlag = proTermMap.get("insurFlag");
			if (!StringUtils.isEmpty(insurFlag) && "1".equals(insurFlag.toString())) {
				String insurPayType = org.ddq.common.util.StringUtil
						.getString(proTermMap.get("insurPayType"));
				if (!StringUtils.isEmpty(insurPayType)) {
					assetsStr.append("保险（");
					String[] insurType = insurPayType.split(",");
					for (int i = 0; i < insurType.length; i++) {
					    if(insurType[i].equals("0")){
					    	assetsStr.append("按月缴");
					    	String insurMonthAmt = org.ddq.common.util.StringUtil.getString(proTermMap
									.get("insurMonthAmt"));
					    	if(!StringUtils.isEmpty(insurMonthAmt)){
					    		assetsStr.append(",缴纳金额："+WdProductUtil.getDescStr("insurMonthAmt",insurMonthAmt));
					    	}
					    	String insurMonthCount = org.ddq.common.util.StringUtil.getString(proTermMap
									.get("insurMonthCount"));
					    	if(!StringUtils.isEmpty(insurMonthCount)){
				    		  assetsStr.append(",缴纳金额："+WdProductUtil.getDescStr("insurMonthCount",insurMonthCount));
					    	}
					    }else if(insurType[i].equals("1")){
					    	assetsStr.append(",按年缴");
					    	String insurAmt = org.ddq.common.util.StringUtil.getString(proTermMap
									.get("insurAmt"));
					    	if(!StringUtils.isEmpty(insurAmt)){
					    		assetsStr.append(",缴纳金额："+WdProductUtil.getDescStr("insurAmt",insurAmt));
					    	}
							String insurCount = org.ddq.common.util.StringUtil
									.getString(proTermMap.get("insurCount"));
							if (!StringUtils.isEmpty(insurCount)) {
								assetsStr.append(",缴纳次数："
								+ WdProductUtil.getDescStr("insurCount",insurCount));
							}
					    }

					}
					assetsStr.append("）");
				}
			}
			Object houseFlag = proTermMap.get("houseFlag");
			StringBuffer houseStr = new StringBuffer();
			if (!StringUtils.isEmpty(houseFlag) && "1".equals(houseFlag.toString())) {
				String houseType = org.ddq.common.util.StringUtil
						.getString(proTermMap.get("houseType"));
				String houseMonthPay = org.ddq.common.util.StringUtil
						.getString(proTermMap.get("houseMonthPay"));
				String houseVal = org.ddq.common.util.StringUtil
						.getString(proTermMap.get("houseVal"));
				if (!StringUtils.isEmpty(houseType)) {
					String[] houseTypesLable = cfg.get("houseType")
							.get("paramLabels").toString().split(";|；");
					String[] houseTypesValues = cfg.get("houseType")
							.get("paramValues").toString().split(";|；");
					String[] houseTypes = houseType.split(",");
					assetsStr.append("房产类型：");
					houseStr.append("房产类型：");
					for (int i = 0; i < houseTypes.length; i++) {
						int index = WdCfgUtil.binarySearch(houseTypesValues,
								houseTypes[i]);
						if (index >= 0) {
							if(i > 0){
								assetsStr.append(",");
								houseStr.append(",");
							}
							assetsStr.append(houseTypesLable[index]);
							houseStr.append(houseTypesLable[index]);
						}
					}
					if (!StringUtils.isEmpty(houseMonthPay)
							&& !"0".equals(houseMonthPay)) {
						String houseMonthPayStr= WdProductUtil.getDescStr("houseMonthPay",houseMonthPay);
						assetsStr.append(",房产月供:" + houseMonthPayStr);
						houseStr.append(",房产月供:" + houseMonthPayStr);
					}
					if (!StringUtils.isEmpty(houseVal) && !"0".equals(houseVal)) {
						assetsStr.append(",房产估值" + houseVal + "万元以上");
						houseStr.append(",房产估值" + houseVal + "万元以上");
					}
				}
			}
			Object carFlag = proTermMap.get("carFlag");
			StringBuffer carStr = new StringBuffer();
			if (!StringUtils.isEmpty(carFlag) && "1".equals(carFlag.toString())) {
				String carType = org.ddq.common.util.StringUtil
						.getString(proTermMap.get("carType"));
				if (!StringUtils.isEmpty(carType)) {
					String[] carTypesLable = cfg.get("carType").get("paramLabels")
							.toString().split(";|；");
					String[] carTypesValues = cfg.get("carType").get("paramValues")
							.toString().split(";|；");
					String carVal = org.ddq.common.util.StringUtil
							.getString(proTermMap.get("carVal"));
					String[] carTypes = carType.split(",");
					if(assetsStr.length() > 0){
						assetsStr.append(",");
					}
					assetsStr.append("车产类型：");
					carStr.append("车产类型：");
					for (int i = 0; i < carTypes.length; i++) {
						int index = WdCfgUtil.binarySearch(carTypesValues,
								carTypes[i]);
						if (index >= 0) {
							if(i >0){
								assetsStr.append(",");
								carStr.append(",");
							}
							carStr.append(carTypesLable[index]);
							assetsStr.append(carTypesLable[index]);
						}
					}
					if (!StringUtils.isEmpty(carVal) && !"0".equals(carVal)) {
						carStr.append(",车产估值" + carVal + "万元以上");
						assetsStr.append(",车产估值" + carVal + "万元以上");
					}
				}
			}
			if(StringUtils.isEmpty(houseStr) || houseStr.length() <= 0){
				result.put("houseStr", "无要求");
			}else{
				result.put("houseStr", houseStr);
			}
			if(StringUtils.isEmpty(carStr) || carStr.length() <= 0){
				result.put("carStr", "无要求");
			}else{
				result.put("carStr", carStr);
			}
			if (!StringUtils.isEmpty(assetsStr.toString())) {
				result.put("assetsStr", assetsStr.toString().replaceAll("（）", "")
						.replaceAll("（,", "（").replaceAll(",,", ","));
			} else {
				result.put("assetsStr", "无要求");
			}
			// 信用要求
			Object creditType = proTermMap.get("creditType");
			StringBuffer creditStr = new StringBuffer();
			if (!StringUtils.isEmpty(creditType)
					&& !"0".equals(creditType.toString())) {
				String[] creditTypeLable = cfg.get("creditType").get("paramLabels")
						.toString().split(";|；");
				String[] creditTypeValues = cfg.get("creditType")
						.get("paramValues").toString().split(";|；");
				String[] creditTypes = creditType.toString().split(",");
				for (int i = 0; i < creditTypes.length; i++) {
					int index = WdCfgUtil.binarySearch(creditTypeValues,
							creditTypes[i]);
					if (index >= 0) {
						if (!StringUtils.isEmpty(creditStr.toString())) {
							creditStr.append("，");
						}
						creditStr.append(creditTypeLable[index]);
					}
				}
			} else {
				creditStr.append("无要求");
			}
			result.put("creditStr", creditStr);
			// 其他要求
			StringBuffer otherStr = new StringBuffer();
			Object socialType = proTermMap.get("socialType");
			Object fundType = proTermMap.get("fundType");
			Object zhimaScore = proTermMap.get("zhimaScore");
			Object weiLiDai = proTermMap.get("weiLiDai");
			if (!StringUtils.isEmpty(socialType)
					&& "1".equals(socialType.toString())) {
				otherStr.append(",有社保");
			}
			if (!StringUtils.isEmpty(fundType) && "1".equals(fundType.toString())) {
				otherStr.append(",有公积金");
			}
			if (!StringUtils.isEmpty(zhimaScore)
					&& !"0".equals(zhimaScore.toString())) {
				String zhimaStr = WdProductUtil.getDescStr("zhimaScore",zhimaScore.toString());
				otherStr.append(",芝麻信用:" + zhimaStr);
			}
			if (!StringUtils.isEmpty(weiLiDai) && !"0".equals(weiLiDai.toString())) {
				String weiLiDaiStr = WdProductUtil.getDescStr("weiLiDai",weiLiDai.toString());
				otherStr.append(",微粒贷:" + weiLiDaiStr);
			}
			if (!StringUtils.isEmpty(otherStr) && otherStr.length()> 0) {
				result.put("otherStr", otherStr.delete(0, 1));
			} else {
				result.put("otherStr", "无要求");
			}
			return result;
		}
		
	/**
	 * pc端查询热门产品
	 * @param params
	 * @return
	 */
	public static  AppResult queryHotWdProducts(AppParam params){
		params.setService("wdProductService");
		params.setMethod("queryHot");
		params.setOrderBy("createTime");
		params.setOrderValue("DESC");
		params.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
		return RemoteInvoke.getInstance().call(params);
	}
	
	/**
	 * 查询微店产品产品详情
	 * @param productId
	 * @return
	 */
	public static  Map<String,Object> queryWdProDetail(String productId){
		AppParam params  = new AppParam("wdProductService","queryDetail");
		params.addAttr("productId", productId);
		params.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
		AppResult result = RemoteInvoke.getInstance().call(params);
		Map<String,Object> map = new HashMap<String, Object>();
		if(result.getRows().size()>0){
			map = result.getRow(0);
			String customerId = map.remove("customerId").toString();
			Map<String,Object> custMap = CustomerIdentify.getCustIdentify(customerId);
			String cityName = org.ddq.common.util.StringUtil.getString(map
					.get("cityName"));
			if(!StringUtils.isEmpty(cityName)){
				map.put("cityPrice", WdCfgUtil.getCityPrice(cityName));
			}
			map.put("cityName", custMap.get("cityName"));
			map.put("uid", CustomerUtil.getEncrypt(customerId));
			map.put("headImage", custMap.get("userImage"));
			map.put("userName", custMap.get("userName"));
			map.put("hideTelephone", custMap.get("hideTelephone"));
			map.put("identifyStatus", custMap.get("identifyStatus"));
			map.put("cardStatus", custMap.get("cardStatus"));
		}
		result = null;
		return map;
	}

	/**
	 * 查询微店产品产品规则
	 * @param productId
	 * @return
	 */
	public static  Map<String,Object> wdProRuleInfo(String productId){
		AppParam params  = new AppParam("wdProductRuleService","query");
		params.addAttr("productId", productId);
		params.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
		AppResult result = RemoteInvoke.getInstance().call(params);
		Map<String,Object> map = new HashMap<String, Object>();
		if(result.getRows().size()>0){
			map = result.getRow(0);
		}
		result = null;
		return map;
	}
	
	/**
	 * 查询微店产品产品规则
	 * @param productId
	 * @return
	 */
	public static  List<Map<String,Object>> wdProTermInfo(String productId){
		AppParam params  = new AppParam("wdProductTermService","query");
		params.addAttr("productId", productId);
		params.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
		AppResult result = RemoteInvoke.getInstance().call(params);
		return result.getRows();
	}
	
	/**
	 * 获取产品资质设置参数
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public static List<Map<String,Object>> getProductQulityCfg(){
		List<Map<String,Object>> productConfigList = (List<Map<String,Object>>) RedisUtils.getRedisService().get(KEY_WD_PRODUCT_CFG);
		if(productConfigList != null && productConfigList.size() > 0){
			return productConfigList;
		}
		// 资质配置信息
		List<Map<String,Object>> configs = WdCfgUtil.getProductListCfg();
		
		LinkedHashMap<String,Map<String,Object>> level1 = new LinkedHashMap<String, Map<String,Object>>();
		for(Map<String,Object> row: configs){
			String level = StringUtil.getString(row.get("paramLevel"));
			String key = StringUtil.getString(row.get("paramKey"));
			if("1".equals(level)){
				// 解析子集
				transfer2Array(row, "sub");
				row.put("selectFlag", "0");
				row.put("showOptions", "");
				row.put("flagName", row.get("flagName"));
				level1.put(key, row);
			}
		}
		for(Map<String,Object> row: configs){
			String level = StringUtil.getString(row.get("paramLevel"));
			if("2".equals(level)){
				transfer2Array(row, "sub");
				String parents = StringUtil.getString(row.remove("parents"));
				List<Map<String, Object>> existSubList = (List<Map<String, Object>>)level1.get(parents).get("subList");
				row.put("selectFlag", "0");
				if(existSubList != null){
					existSubList.add(row);
				}else{
					existSubList = new ArrayList<Map<String,Object>>();
					existSubList.add(row);
					level1.get(parents).put("subList", existSubList);
				}
				
				String parentVals = StringUtil.getString(row.get("parentVal"));
				if(!StringUtils.isEmpty(parentVals)){
					String key = StringUtil.getString(row.get("paramKey"));
					List<Map<String, Object>> existSubArray = (List<Map<String, Object>>)level1.get(parents).get("sub");
//					// 指定key属于哪个子项
					String[] parentValArr = org.apache.commons.lang.StringUtils.stripAll(parentVals.split(";|；"));
					for(String parentVal : parentValArr){
						if(!StringUtils.isEmpty(parentVal)){
							if(existSubArray != null){
								setSubVal(existSubArray, parentVal, key);
							}else{
								existSubArray = new ArrayList<Map<String,Object>>();
								existSubArray.add(row);
								setSubVal(existSubArray, parentVal, key);
								level1.get(parents).put("sub", existSubArray);
							}
						}
					}
				}
			}
		}
		
		productConfigList = new ArrayList<Map<String,Object>>();
		for(String key : level1.keySet()){
			productConfigList.add(level1.get(key));
		}
		RedisUtils.getRedisService().set(KEY_WD_PRODUCT_CFG, (Serializable)productConfigList);
		return productConfigList;
	}
	
	/**
	 * 
	 * @param row
	 * @param listName
	 */
	private static void transfer2Array(Map<String, Object> row, String listName){
		String keyType = StringUtil.getString(row.get("keyType"));
		String paramLabels = StringUtil.getString(row.remove("paramLabels"));
		String prices = StringUtil.getString(row.remove("prices"));
		String paramValues = StringUtil.getString(row.get("paramValues"));
		if(keyType.equals(WdCfgUtil.KEYTYPE_RANGE_SCROLL) || keyType.equals(WdCfgUtil.KEYTYPE_BIG_SCROLL)){
			row.put("price", prices);
			addPropertyForScroll(row, "labelRange", paramLabels, "-");
			if(keyType.equals(WdCfgUtil.KEYTYPE_RANGE_SCROLL)){
				addPropertyForScroll(row, "rangeKeys", StringUtil.getString(row.get("ruleKeys")), ";");
				addPropertyForScroll(row, "curVal", paramValues, "-");
			}else if(keyType.equals(WdCfgUtil.KEYTYPE_BIG_SCROLL)){
				addPropertyForScroll(row, "curVal", paramValues, ";");
			}
		}
		if(keyType.equals(WdCfgUtil.KEYTYPE_SELECT_MULTI) || keyType.equals(WdCfgUtil.KEYTYPE_SELECT_ONE)){
			List<Map<String, Object>> list = getSubMap(paramLabels, paramValues, prices);
			row.put(listName, list);
			List<String> rangeRuleArray = new ArrayList<String>();
			row.put("curVal", rangeRuleArray);
		}
	}
	
	/**
	 * 
	 * @param row
	 * @param property
	 * @param str
	 * @param splitStr
	 */
	private static void addPropertyForScroll(Map<String, Object> row, String property, String str, String splitStr){
		String[] rangeRule = org.apache.commons.lang.StringUtils.stripAll(str.split(splitStr));
		List<String> rangeRuleArray = new ArrayList<String>();
		for(String val : rangeRule){
			rangeRuleArray.add(val);
		}
		row.put(property, rangeRuleArray);
	}
	
	/**
	 * 字符串=》list
	 * @param str
	 * @param splitStr
	 * @return
	 */
	public static List<String> toArray(String str){
		String[] rangeRule = org.apache.commons.lang.StringUtils.stripAll(str.split(",|，"));
		List<String> array = new ArrayList<String>();
		for(String val : rangeRule){
			array.add(val);
		}
		return array;
	}
	
	private static List<Map<String, Object>> getSubMap(String labelsStr, String valuesStr, String priceStr){
		String[] labels = org.apache.commons.lang.StringUtils.stripAll(labelsStr.split(";|；"));
		String[] values = org.apache.commons.lang.StringUtils.stripAll(valuesStr.split(";|；"));
		String[] prices = org.apache.commons.lang.StringUtils.stripAll(priceStr.split(";|；"));
		List<Map<String,Object>> list = new ArrayList<Map<String,Object>>();
		for(int i = 0; i < labels.length; i++){
			Map<String,Object> map = new HashMap<String, Object>();
			map.put("label", labels[i]);
			map.put("value", values[i]);
			map.put("price", prices[i]);
			list.add(map);
		}
		return list;
	}
	
	@SuppressWarnings("unchecked")
	private static void setSubVal(List<Map<String, Object>> existSub, String value, String key){
		Iterator<Map<String,Object>> iterator = existSub.iterator();
		while(iterator.hasNext()){
			Map<String,Object> row = (Map<String,Object>) iterator.next();
			if(value.equals(row.get("value").toString())){
				List<String> subKeyArray = (List<String>)row.get("selectedKey");
				if(subKeyArray != null){
					subKeyArray.add(key);
					row.put("selectedKey", subKeyArray);
				}else{
					subKeyArray = new ArrayList<String>();
					subKeyArray.add(key);
					row.put("selectedKey", subKeyArray);
				}
				break;
			}
		}
	}
	/**
	 * 查询信贷经理信息
	 * @param customerId
	 * @param 
	 * @return Map<String,Object>
	 */
	public static Map<String,Object> queryBusiCustInfo(Object customerId){
		AppParam params = new AppParam("busiCustService", "query");
		params.addAttr("customerId", customerId);
		params.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
		AppResult result = RemoteInvoke.getInstance().callNoTx(params);
		Map<String,Object> map = new HashMap<String, Object>();
		if(result.getRows().size()>0){
			map = result.getRow(0);
		}
		return map;
	}
	
}