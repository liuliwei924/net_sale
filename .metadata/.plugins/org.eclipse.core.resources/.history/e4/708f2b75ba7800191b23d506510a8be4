package org.xxjr.cust.member;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppResult;
import org.ddq.common.core.service.BaseService;
import org.ddq.common.core.service.SoaManager;
import org.ddq.common.exception.AppException;
import org.ddq.common.exception.DuoduoError;
import org.ddq.common.util.DateUtil;
import org.ddq.common.util.StringUtil;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import org.xxjr.cust.util.invite.CustInviteUtil;
import org.xxjr.cust.util.member.TicketConfigUtils;
import org.xxjr.sys.util.NumberUtil;

@Lazy
@Service
public class SmsTicketRecordService extends BaseService {
	private static final String NAMESPACE = "SMSTICKETRECORD";

	/**
	 * querys
	 * @param params
	 * @return
	 */
	public AppResult query(AppParam params) {
		return super.query(params, NAMESPACE);
	}
	
	/**
	 * queryByPage
	 * @param params
	 * @return
	 */
	public AppResult queryByPage(AppParam params) {
		return super.queryByPage(params, NAMESPACE);
	}
	
	/**
	 * queryCount
	 * @param params
	 * @return
	 */
	public AppResult queryCount(AppParam params) {
		int size = getDao().count(NAMESPACE, super.COUNT,params.getAttr(),params.getDataBase());
		AppResult result = new AppResult();
		result.putAttr(DuoduoConstant.TOTAL_SIZE, size);
		return result;
	}
	
	
	/**
	 * insert
	 * @param params
	 * @return
	 */
	public AppResult insert(AppParam params) {
		params.addAttr("createTime", new Date());
		return super.insert(params, NAMESPACE);
	}
	
	/**
	 * update
	 * @param params
	 * @return
	 */
	public AppResult update(AppParam params) {
		return super.update(params, NAMESPACE);
	}
	
	/**
	 * delete
	 * @param params
	 * @return
	 */
	public AppResult delete(AppParam params) {
		String ids = (String) params.getAttr("ids");
		AppResult  result = null;
		if (!StringUtils.isEmpty(ids)) {
			for (String id : ids.split(",")) {
				AppParam param = new AppParam();
				param.addAttr("recordId", id);
				
				result = super.delete(param, NAMESPACE);
			}
		} else if (!StringUtils.isEmpty(params.getAttr("recordId"))) {
			result = super.delete(params, NAMESPACE);
		} else {
			throw new AppException(DuoduoError.DELETE_NO_ID);
		}
		return result;
	}
	
	
	/**
	 * 新用户获得短信推荐抢单劵，更新用户信息 
	 * @param params
	 * @return
	 */
	public AppResult updateCustInfo(AppParam params) {
		AppResult result = new AppResult();
		int size = this.getDao().update(NAMESPACE, "updateCustInfo", params.getAttr(), params.getDataBase());
		result.putAttr(DuoduoConstant.DAO_Update_SIZE, size);
		return result;
	}
	
	
	
	/**
	 * 领券
	 * @param params
	 * @return
	 */
	public AppResult smsSendTicket(AppParam params){
		AppResult result = new AppResult();
		Object customerId = params.getAttr("customerId");
		Object telephone = params.getAttr("telephone");
		Object configId = params.getAttr("configId");
		if (StringUtils.isEmpty(telephone) || StringUtils.isEmpty(configId)) {
			throw new AppException(DuoduoError.UPDATE_NO_PARAMS);
		}
		// 判断当前手机号是否已领过劵
		AppParam queryParam = new AppParam();
		queryParam.addAttr("telephone", telephone);
		AppResult queryResult = this.query(queryParam);
		if (queryResult.getRows().size() > 0) {
			// 若手机号领取过，返回劵信息
			String createTime = StringUtil.getString(queryResult.getRow(0).get("createTime"));// 用户领劵时间
			Date ticketDate = DateUtil.toDateByString(createTime, DateUtil.DATE_PATTERN_YYYY_MM_DD_HHMMSS);
			Map<String,Object> smsTicketInfo = getSendTicketInfo(ticketDate,configId);
			result.putAttr("maxDiscountAmount", smsTicketInfo.get("maxDiscountAmount"));// 抢单劵抵扣金额
			result.putAttr("startDate", smsTicketInfo.get("startDate"));// 抢单劵有效开始日期
			result.putAttr("endDate", smsTicketInfo.get("endDate"));// 抢单劵有效结束日期
			result.putAttr("telephone", telephone);// 领劵手机号
			result.setSuccess(false);
			result.setErrorCode("002");
			result.setMessage("抱歉！该手机号已领取过抢单劵！");
			return result;
		}
		// 插入领劵记录
		params.addAttr("isNew", StringUtils.isEmpty(customerId) ? "1" : "0");// 是否为新用户(0否 1是)
		result = this.insert(params);
		if (result.isSuccess()) {
			// 获取领劵信息
			Map<String,Object> smsTicketInfo = getSendTicketInfo(new Date(),configId);
			if (!StringUtils.isEmpty(customerId)) {
				// 若用户存在，则记录抢单劵信息
				AppParam ticketParam = new AppParam();
				ticketParam.setService("custTicketService");
				ticketParam.setMethod("insert");
				ticketParam.addAttr("customerId", customerId);
				ticketParam.addAttr("configId", configId);
				ticketParam.addAttr("startDate", smsTicketInfo.get("startDate"));// 抢单劵可用起始日期
				ticketParam.addAttr("endDate", smsTicketInfo.get("endDate"));// 抢单劵失效日期
				ticketParam.addAttr("status", "1");
				ticketParam.addAttr("type", CustInviteUtil.TICKET_TYPE_SMS_SEND);
				ticketParam.addAttr("createDesc", "短信推送获取");
				SoaManager.getInstance().invoke(ticketParam);
			}
			result.putAttr("maxDiscountAmount", smsTicketInfo.get("maxDiscountAmount"));// 抢单劵抵扣金额
			result.putAttr("startDate", smsTicketInfo.get("startDate"));// 抢单劵有效开始日期
			result.putAttr("endDate", smsTicketInfo.get("endDate"));// 抢单劵有效结束日期
			result.putAttr("telephone", telephone);// 领劵手机号
		}
		return result;
	}
	
	
	/**
	 * 获取领劵信息
	 * @param configId
	 * @param telephone
	 * @return
	 */
	private Map<String,Object> getSendTicketInfo(Date ticketDate,Object configId) {
		Map<String,Object> map = new HashMap<String,Object>();
		// 积分兑换的有效期7天
		Map<String,Object> ticketInfo = TicketConfigUtils.getTickeConfig(configId.toString());// 获取抢单劵对应的有效期天数
		int validDay = NumberUtil.getInt(ticketInfo.get("validDay"), 0);
		String startDate = DateUtil.toStringByParttern(ticketDate,DateUtil.DATE_PATTERN_YYYY_MM_DD);
		String endDate = DateUtil.toStringByParttern(
				DateUtil.getNextDay(ticketDate, validDay-1),
				DateUtil.DATE_PATTERN_YYYY_MM_DD);
		map.put("maxDiscountAmount",ticketInfo.get("maxDiscountAmount"));// 抢单劵抵扣金额
		map.put("startDate",startDate);// 抢单劵有效开始日期
		map.put("endDate",endDate);// 抢单劵有效结束日期
		return map;
	}
	
}
