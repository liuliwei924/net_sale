package org.xxjr.busi.util.push.impl;

import java.util.HashMap;
import java.util.Map;

import org.ddq.common.security.md5.Md5;
import org.ddq.common.util.LogerUtil;
import org.ddq.common.util.StringUtil;
import org.springframework.util.StringUtils;
import org.xxjr.busi.util.CountGradeUtil;
import org.xxjr.busi.util.push.AbstractLoanUtil;
import org.xxjr.busi.util.push.PushCode;
import org.xxjr.busi.util.push.PushPlatformUtils;
import org.xxjr.sys.util.NumberUtil;
import org.xxjr.sys.util.SysParamsUtil;

import com.alibaba.fastjson.JSONObject;
@PushCode(26)
public class PushZhiJieUtil extends AbstractLoanUtil {
	
	@Override
	public Map<String, Object> response(Map<String, Object> row)
			throws Exception {
		int status = 2;
		Object message = null;
		String checkUrl = SysParamsUtil.getStringParamByKey("push_zhijie_cfg_checkUrl", "http://oc.rongd.net/Center/pushCheck");
		Map<String, Object> checkRes = PushPlatformUtils.httpPost(checkUrl, null, getContent(row, 1), true, null);
		if (NumberUtil.getInt(checkRes.get("code"), 1001) != 1000) {//不符合对方条件
			LogerUtil.log(PushZhiJieUtil.class, "checkRes error, param : " + checkRes.entrySet());
			status = 2;
		}else {
			String url = SysParamsUtil.getStringParamByKey("push_zhijie_cfg_url", "http://oc.rongd.net/Center/pushOrder");
			Map<String, Object> res = PushPlatformUtils.httpPost(url, null, getContent(row, 2), true, null);
			if (NumberUtil.getInt(res.get("code"), 1001) == 1000) {
				status = 1;
			}
			message = res.get("msg");
		}
		Map<String, Object> resMap = new HashMap<String, Object>();
		resMap.put("status", status);
		resMap.put("message", message);
		return resMap;
	}
	
	public String getContent (Map<String, Object> row, int step) throws Exception {
		String key = SysParamsUtil.getStringParamByKey("push_zhijie_cfg_key", "ndeU9WJvLVqVhC9n");
		JSONObject content = new JSONObject();
		content.put("channel_id", SysParamsUtil.getIntParamByKey("push_zhijie_cfg_channelId", 21));
		content.put("biaoshi", SysParamsUtil.getIntParamByKey("push_zhijie_cfg_biaoshi", 1));

		JSONObject field = new JSONObject();
		field.put("username", row.get("applyName"));

		field.put("money", (NumberUtil.getInt(row.get("loanAmount"), 0) * 10000));
		field.put("month", NumberUtil.getInt(row.get("loanDeadline"), 12));
		field.put("zone_id", PushPlatformUtils.getZipCodeByCityName(StringUtil.objectToStr(row.get("cityName"))));
		if (step == 2) {
			field.put("mobile", row.get("telephone"));
		}
		field.put("mobile_hash", Md5.getInstance().encrypt(StringUtil.objectToStr(row.get("telephone"))));
		field.put("age", NumberUtil.getInt(row.get("age"), 30));

		int income = 1000;
		if ((!StringUtils.isEmpty(row.get("income"))) && (NumberUtil.getDouble(row.get("income"), 0) > 0)) {
			income = NumberUtil.getInt(row.get("income"), 0);
		}else if ((!StringUtils.isEmpty(row.get("pubManageLine"))) && (NumberUtil.getDouble(row.get("pubManageLine"), 0) > 0)) {
			int pubManageLine = NumberUtil.getInt(row.get("pubManageLine"), 0);
			income = pubManageLine * 10000;
		}else if ((!StringUtils.isEmpty(row.get("cashMonth"))) && (NumberUtil.getDouble(row.get("cashMonth"), 0) > 0)) {
			income = NumberUtil.getInt(row.get("cashMonth"), 0);
		}
		if (income <= 0) {
			income = 1000;
		}

		field.put("salary_bank_public", income);

		int wagesType = NumberUtil.getInt(row.get("wagesType"), 2);
		field.put("salary_bank_private", (wagesType == 1 ? 1 : 3));

		int socialType = NumberUtil.getInt(row.get("socialType"), 0);
		field.put("is_security", CountGradeUtil.judgeSocialType(socialType) ? 1 : 2);

		int fundType = NumberUtil.getInt(row.get("fundType"), 0);
		field.put("is_fund", CountGradeUtil.judgeFundType(fundType) ? 1 : 2);

		int houseType = NumberUtil.getInt(row.get("houseType"), 2);
		field.put("house_type", houseType > 2 ? 2 : 1);

		int carType = NumberUtil.getInt(row.get("carType"), 2);
		field.put("car_type", carType > 2 ? 2 : 1);

		int creditType = NumberUtil.getInt(row.get("creditType"), 2);
		field.put("credit_card", creditType == 2 ? 2 : 1);

		int insurType = NumberUtil.getInt(row.get("insurType"), 0);
		field.put("is_buy_insurance", CountGradeUtil.judgeInsurType(insurType) ? 2 : 1);
		content.put("field", PushHaoDaiUtil.encrypt(field.toJSONString(), key));

		return content.toJSONString();
	}
}
