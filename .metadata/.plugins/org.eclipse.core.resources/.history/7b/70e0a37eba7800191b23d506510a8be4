package org.xxjr.cust.reward;

import java.util.Date;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppResult;
import org.ddq.common.core.service.BaseService;
import org.ddq.common.core.service.SoaManager;
import org.ddq.common.exception.AppException;
import org.ddq.common.util.DateUtil;
import org.ddq.common.util.StringUtil;
import org.ddq.common.web.session.DuoduoSession;
import org.ddq.common.exception.DuoduoError;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

@Lazy
@Service
public class CustSigninService extends BaseService {
	private static final String NAMESPACE = "CUSTSIGNIN";

	/**
	 * querys
	 * @param params
	 * @return
	 */
	public AppResult query(AppParam params) {
		return super.query(params, NAMESPACE);
	}
	
	/**
	 * queryByPage
	 * @param params
	 * @return
	 */
	public AppResult queryByPage(AppParam params) {
		return super.queryByPage(params, NAMESPACE);
	}
	
	/**
	 * queryCount
	 * @param params
	 * @return
	 */
	public AppResult queryCount(AppParam params) {
		int size = getDao().count(NAMESPACE, super.COUNT,params.getAttr(),params.getDataBase());
		AppResult result = new AppResult();
		result.putAttr(DuoduoConstant.TOTAL_SIZE, size);
		return result;
	}
	
	
	/**
	 * insert
	 * @param params
	 * @return
	 */
	public AppResult insert(AppParam params) {
		params.addAttr("createTime", new Date());
		params.addAttr("createBy", DuoduoSession.getUserName());
		return super.insert(params, NAMESPACE);
	}
	
	/**
	 * update
	 * @param params
	 * @return
	 */
	public AppResult update(AppParam params) {
		return super.update(params, NAMESPACE);
	}
	
	/**
	 * 签到奖励
	 * @param param
	 * @return
	 */
	public AppResult signinReward(AppParam param){
		Object custId = param.getAttr("customerId");
		
		// 保存签到信息
		int signinDays = Integer.valueOf(param.getAttr("signinDays").toString());
		String lastTime = StringUtil.objectToStr(param.getAttr("lastTime"));
		if(!StringUtils.isEmpty(lastTime)){
			String yestoday = DateUtil.toStringByParttern(DateUtil.getNextDay(new Date(), -1),DateUtil.DATE_PATTERN_YYYY_MM_DD);
			if(yestoday.equals(lastTime)){
				signinDays++;
			}else {
				signinDays = 1;
			}
		}
		AppParam addParam = new AppParam();
		String today = DateUtil.toStringByParttern(new Date(),DateUtil.DATE_PATTERN_YYYY_MM_DD);
		addParam.addAttr("customerId", custId);
		addParam.addAttr("signinDays", signinDays);
		addParam.addAttr("createTime", today);
		addParam.addAttr("signinTime", new Date());
		addParam.setService("custSigninService");
		addParam.setMethod("insert");
		AppResult result = SoaManager.getInstance().callNewTx(addParam);
		result.getAttr().put("signinDays", signinDays);
		
		return result;
	}
	
	/**
	 * delete
	 * @param params
	 * @return
	 */
	public AppResult delete(AppParam params) {
		String ids = (String) params.getAttr("ids");
		AppResult  result = null;
		if (!StringUtils.isEmpty(ids)) {
			for (String id : ids.split(",")) {
				AppParam param = new AppParam();
				param.addAttr("signId", id);
				
				result = super.delete(param, NAMESPACE);
			}
		} else if (!StringUtils.isEmpty(params.getAttr("signId"))) {
			result = super.delete(params, NAMESPACE);
		} else {
			throw new AppException(DuoduoError.DELETE_NO_ID);
		}
		return result;
	}
}
