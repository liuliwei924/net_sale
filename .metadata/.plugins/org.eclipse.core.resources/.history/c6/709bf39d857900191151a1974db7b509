package org.xxjr.job.listener.busi.store;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.util.DateUtil;
import org.ddq.common.util.LogerUtil;
import org.ddq.common.util.StringUtil;
import org.llw.ddq.job.util.JobUtil;
import org.ddq.common.core.service.RemoteInvoke;
import org.springframework.util.StringUtils;
import org.xxjr.job.listener.busi.sum.util.BaseSumUtil;
import org.xxjr.sys.util.NumberUtil;
import org.xxjr.sys.util.ServiceKey;
import org.xxjr.sys.util.SysParamsUtil;

/**
 * 匹配通话记录和借款客户之间的关联
 * @author liulw 2017-11-19
 *
 */
public class StoreCallRecordUtils {

	/**
	 * 匹配通话记录和借款客户之间的关联
	 * @param processId
	 * @return
	 */
	public static  AppResult optStoreCallRecord(Object processId){
		AppResult result = new AppResult();
		try {
			int currentPage = 1;
			int everyPage = 100;
			AppParam queryParam = new AppParam("storeCallRecordService", "queryByPage");
			queryParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_busi_in));
			queryParam.setOrderBy("startCallTime");
			queryParam.setOrderValue("DESC");
			queryParam.addAttr("status", "0");
			queryParam.setCurrentPage(currentPage);
			queryParam.setEveryPage(everyPage);
			AppResult queryResult = RemoteInvoke.getInstance().callNoTx(queryParam);
			int size = queryResult.getRows().size();
			long totalPage = queryResult.getPage().getTotalPage();
			long totalRecords = queryResult.getPage().getTotalRecords();
			int xhCount = 0;//循环次数
			int totalCount = 0;
			if (size > 0) {//总记录数大于0
				relationBorrow(queryResult.getRows());//开始转移第一页的
				totalCount = totalCount + size;
			
					  while (totalPage > 1 && totalCount < totalRecords && queryResult.isSuccess() && xhCount<30) {//大于一页
						queryParam.setCurrentPage(1);//每次转移status会有变化页数会有变化
						queryParam.setEveryPage(everyPage);
						queryResult = RemoteInvoke.getInstance().callNoTx(queryParam);
						size = queryResult.getRows().size();
						if(size > 0){
							relationBorrow(queryResult.getRows());//开始转移
						}
						totalPage = queryResult.getPage().getTotalPage();
						totalCount = totalCount + size;
						xhCount++;
					}
			}
			
			JobUtil.addProcessExecute(processId, "匹配通话记录和借款客户之间的关联总数=" + totalCount);
			result.setMessage("匹配通话记录和借款客户之间的关联总数=" + totalCount);
		} catch (Exception e) {
			LogerUtil.error(LendAutoOrderUtils.class, e, "StoreCallRecordUtils >>>>>>>>>>>>>>>>>>error");
			JobUtil.addProcessExecute(processId, " 匹配通话记录和借款客户之间的关联 报错：" + e.getMessage() );
		}
		
		return result;
	}
	
	/**转移操作**/
	private static void relationBorrow(List<Map<String, Object>> callRecordList) {
		AppParam batchParam = new AppParam("storeCallRecordService", "batchRelation");
		batchParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_busi_in));
		batchParam.addAttr("callRecordList", callRecordList);
		RemoteInvoke.getInstance().call(batchParam);
	}
	
	
	
	/**
	 * 門店人員通話記錄統計
	 * @param processId
	 * @param today
	 */
	public static void sumStoreCall(Object processId, String today) {
		AppResult result = new AppResult();
		try {
			LogerUtil.log("BaseSumUtil sumStoreCall>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> start");
			int everyPage = 100;
			int totalPage = 1;
			//查询要统计的人和日期
			AppParam queryParam = new AppParam("storeCallRecordService","getCountParamsByPage");
			queryParam.addAttr("recordDate", today);
			queryParam.setCurrentPage(1);
			queryParam.setEveryPage(everyPage);
			queryParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_busi_in));
			result = RemoteInvoke.getInstance().callNoTx(queryParam);
			totalPage = result.getPage().getTotalPage();
			List<Map<String,Object>> dataList = result.getRows();
			int totalSize = 0;
			if(dataList.size() > 0){
				totalSize = saveData(dataList);
				if (totalPage > 1) {
					for (int i = 1; i < totalPage; i++) {
						queryParam.setCurrentPage(i + 1);
						result = RemoteInvoke.getInstance().callNoTx(queryParam);
						dataList = result.getRows();
						if(dataList.size() > 0){
							totalSize = totalSize + saveData(dataList);
						}
					}
				}

			}
			LogerUtil.log("BaseSumUtil sumStoreCall >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> end insert count=" +totalSize);
		} catch (Exception e) {
			LogerUtil.error(BaseSumUtil.class,e, "sumStoreCall error");
			JobUtil.addProcessExecute(processId, " 門店人員通話記錄統計报错：" + e.getMessage() );
		}
	}
	
	private static int saveData(List<Map<String,Object>> dataList){
		int size = 0;
		for(Map<String,Object> data : dataList){
			Object customerId = data.get("customerId");
			Object startCallTime = data.get("startCallTime");
			if(StringUtils.isEmpty(customerId) || StringUtils.isEmpty(startCallTime)){
				continue;
			}
			
			AppParam countParam = new AppParam("storeCallRecordService", "sumStoreCall");
			countParam.addAttr("customerId", customerId);
			countParam.addAttr("recordDate", startCallTime);
			countParam.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_busi_in));
			AppResult countResult = RemoteInvoke.getInstance().callNoTx(countParam);
			
			if(countResult.getRows().size() > 0){
				//将统计数据插入统计表
				AppParam insertParam = new AppParam("sumStoreCallService","save");
				insertParam.addAttr("recordDate", startCallTime);
				insertParam.addAttr("customerId", customerId);
				insertParam.addAttr("list", countResult.getRows());
				insertParam.setRmiServiceName(AppProperties
						.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sum));
				countResult = RemoteInvoke.getInstance().call(insertParam);
				size = size + NumberUtil.getInt(countResult.getAttr(DuoduoConstant.DAO_Insert_SIZE), 0);
				
				insertParam = null;
			}
			
			countParam = null;
			countResult = null;
		}
		
		dataList = null;
		return size;
	}
	
	/**
	 * 关联未匹配订单的通话记录
	 * @param processId
	 * @return
	 */
	public static AppResult relationCallRecord(Object processId){
		AppResult result = new AppResult();
		try {
			int relationCallStatus = SysParamsUtil.getIntParamByKey("relationCallStatus", 0);
			if(relationCallStatus == 0){
				result.setMessage("关联未匹配订单的通话记录自动化任务未开启!");
				result.setSuccess(false);
				return result;
			}
			LogerUtil.log("relationCallRecord >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> start");
			//查询未关联的通话记录
			AppParam queryCallParam = new AppParam("storeCallRecordService","queryNotRelationRecord");
			queryCallParam.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START
							+ ServiceKey.Key_busi_in));
			AppResult queryCallResult = RemoteInvoke.getInstance().callNoTx(queryCallParam);
			int totalSize = 0 ; //未关联上的通话记录数
			int totalCallSize = 0; //关联成功的通话记录数
			int callSize = 0; //更新数量
			if(queryCallResult.isSuccess() && queryCallResult.getRows().size() > 0){
				totalSize = queryCallResult.getRows().size();
				AppParam updateParam = new AppParam("storeCallRecordService","update");
				AppParam recentParam = new AppParam("storeCallRecordService","getRecentData");
				AppResult updateResult = new AppResult();
				for(Map<String, Object> callRecordMap : queryCallResult.getRows()){
					String recordId = StringUtil.getString(callRecordMap.get("recordId"));
					String applyId = StringUtil.getString(callRecordMap.get("applyId"));
					updateParam.addAttr("recordId", recordId);
					updateParam.addAttr("applyId", applyId);
					updateParam.setRmiServiceName(AppProperties
							.getProperties(DuoduoConstant.RMI_SERVICE_START
									+ ServiceKey.Key_busi_in));
					updateResult = RemoteInvoke.getInstance().callNoTx(updateParam);
					callSize = NumberUtil.getInt(updateResult.getAttr(DuoduoConstant.DAO_Update_SIZE), 0);
					if(callSize >0){
						totalCallSize += callSize;
						//更新最近通话记录
						String borrowTel = StringUtil.getString(callRecordMap.get("borrowTel"));
						recentParam.addAttr("borrowTel", borrowTel);
						recentParam.setRmiServiceName(AppProperties
								.getProperties(DuoduoConstant.RMI_SERVICE_START
										+ ServiceKey.Key_busi_in));
						AppResult queryResult = RemoteInvoke.getInstance().callNoTx(recentParam);
						Map<String, Object> dataMap = new HashMap<String, Object>();
						if(queryResult.getRows().size() > 0 && !StringUtils.isEmpty(queryResult.getRow(0))){
							dataMap = queryResult.getRow(0);
							int duration = NumberUtil.getInt(callRecordMap.get("duration"),0);
							AppParam recentParams = new AppParam("storeCallRecentService", "saveOrUpdate");
							String startCallTime = DateUtil.toStringByParttern((Date)dataMap.get("startCallTime"), DateUtil.DATE_PATTERN_YYYY_MM_DD_HHMMSS);
							recentParams.addAttr("recentTime", startCallTime);
							recentParams.addAttr("firstTime", startCallTime);
							recentParams.addAttr("applyId", applyId);
							recentParams.addAttr("recentStatus", duration > 0 ? 1 : 0);
							recentParams.addAttr("callTimes", NumberUtil.getInt(dataMap.get("callTimes"), 0));
							recentParams.addAttr("sucCallTimes",  NumberUtil.getInt(dataMap.get("sucCallTimes"), 0));
							recentParams.addAttr("totalDuration",  NumberUtil.getInt(dataMap.get("totalDuration"), 0));
							recentParams.addAttr("curDuration", duration);
							recentParams.setRmiServiceName(AppProperties
									.getProperties(DuoduoConstant.RMI_SERVICE_START
											+ ServiceKey.Key_busi_in));
							RemoteInvoke.getInstance().call(recentParams);
						}
					}
					updateResult = null;
				}
			}
			LogerUtil.log("未匹配订单的通话记录总共有："+ totalSize + "条,成功关联未匹配订单的通话记录有：" + totalCallSize +"条。");
			JobUtil.addProcessExecute(processId, "未匹配订单的通话记录总共有："+ totalSize + "条,成功关联未匹配订单的通话记录有：" + totalCallSize +"条。");
			LogerUtil.log("relationCallRecord >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> end");
		} catch (Exception e) {
			LogerUtil.error(StoreCallRecordUtils.class, e, "relationCallRecord >>>>>>>>>>>>>>>>>>error");
		}
		return result;
	}
	
	/**
	 * 关联未匹配订单的通话录音记录
	 * @param processId
	 * @return
	 */
	public static AppResult relationCallAudioRecord(Object processId){
		AppResult result = new AppResult();
		try {
			int relationCallAudioStatus = SysParamsUtil.getIntParamByKey("relationCallAudioStatus", 0);
			if(relationCallAudioStatus == 0){
				result.setMessage("关联未匹配订单的通话录音自动化任务未开启!");
				result.setSuccess(false);
				return result;
			}
			LogerUtil.log("relationCallAudioRecord >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> start");
			//查询未关联的通话记录
			AppParam queryCallParam = new AppParam("storeCallAudioService","queryNotRelationAudio");
			queryCallParam.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START
							+ ServiceKey.Key_busi_in));
			AppResult queryCallResult = RemoteInvoke.getInstance().callNoTx(queryCallParam);
			int totalSize = 0 ; //未关联上的通话记录数
			int totalCallSize = 0; //关联成功的通话记录数
			int callSize = 0; //更新数量
			if(queryCallResult.isSuccess() && queryCallResult.getRows().size() > 0){
				totalSize = queryCallResult.getRows().size();
				AppParam updateParam = new AppParam("storeCallAudioService","update");
				AppResult updateResult = new AppResult();
				for(Map<String, Object> callRecordMap : queryCallResult.getRows()){
					String audioId = StringUtil.getString(callRecordMap.get("audioId"));
					String applyId = StringUtil.getString(callRecordMap.get("applyId"));
					updateParam.addAttr("audioId", audioId);
					updateParam.addAttr("applyId", applyId);
					updateParam.setRmiServiceName(AppProperties
							.getProperties(DuoduoConstant.RMI_SERVICE_START
									+ ServiceKey.Key_busi_in));
					updateResult = RemoteInvoke.getInstance().callNoTx(updateParam);
					callSize = NumberUtil.getInt(updateResult.getAttr(DuoduoConstant.DAO_Update_SIZE), 0);
					totalCallSize += callSize;
					updateResult = null;
				}
			}
			LogerUtil.log("未匹配订单的通话录音记录总共有："+ totalSize + "条,成功关联未匹配订单的通话录音记录有：" + totalCallSize +"条。");
			JobUtil.addProcessExecute(processId, "未匹配订单的通话录音记录总共有："+ totalSize + "条,成功关联未匹配订单的通话录音记录有：" + totalCallSize +"条。");
			LogerUtil.log("relationCallAudioRecord >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> end");
		} catch (Exception e) {
			LogerUtil.error(StoreCallRecordUtils.class, e, "relationCallAudioRecord >>>>>>>>>>>>>>>>>>error");
		}
		return result;
	}
}
