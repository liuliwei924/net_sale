package org.xxjr.cust.util.auth;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.util.HashMap;
import java.util.Map;

import net.coobird.thumbnailator.Thumbnails;

import org.apache.http.HttpResponse;
import org.apache.http.util.EntityUtils;
import org.ddq.common.util.LogerUtil;
import org.xxjr.cust.util.auth.util.HttpResponseUtil;
import org.xxjr.cust.util.auth.util.JXMConvertUtil;
import org.xxjr.cust.util.auth.util.SecurityUtil;

public class FaceAuthUtil {

	/**
	 * 
	 * @param id_card 身份证
	 * @param id_holder 姓名
	 * @param tempFile 文件照片
	 * @return
	 */
	public static Map<String, Object> getFaceAuth(String id_card,
			String id_holder, File tempFile) throws Exception {
		Map<String, String> pictureMap = new HashMap<String, String>();
		processUploadFile(tempFile, pictureMap);
		String photo = pictureMap.get("photo");
		// 以下为调用接口处理流程
		String host = "http://face.market.alicloudapi.com";
		String path = "/efficient/idfaceIdentity";
		String method = "POST";
		String appcode = "5d8d1e007ab54845827b9e6175b0cab5";
		Map<String, String> headers = new HashMap<String, String>();
		// 最后在header中的格式(中间是英文空格)为Authorization:APPCODE
		// 83359fd73fe94948385f570e3c139105
		headers.put("Authorization", "APPCODE " + appcode);
		// 根据API的要求，定义相对应的Content-Type
		headers.put("Content-Type",
				"application/x-www-form-urlencoded; charset=UTF-8");
		Map<String, String> querys = new HashMap<String, String>();
		Map<String, String> bodys = new HashMap<String, String>();
		bodys.put("base64Str", photo);
		bodys.put("name", id_holder);
		bodys.put("number", id_card);

		/**
		 * 重要提示如下: HttpUtils请从
		 * https://github.com/aliyun/api-gateway-demo-sign-java
		 * /blob/master/src/main
		 * /java/com/aliyun/api/gateway/demo/util/HttpUtils.java 下载
		 *
		 * 相应的依赖请参照
		 * https://github.com/aliyun/api-gateway-demo-sign-java/blob/master
		 * /pom.xml
		 */
		HttpResponse response = HttpResponseUtil.doPost(host, path, method, headers,
				querys, bodys);
		LogerUtil.log(response.toString());
		// 获取response的body
		String responseBody = EntityUtils.toString(response.getEntity());
		LogerUtil.log(responseBody);
		Map<String, Object> resultMap = new HashMap<String, Object>();
		resultMap = JXMConvertUtil.JsonConvertHashMap(responseBody);
		LogerUtil.log(resultMap);
		return resultMap;
	}

	// 处理上传的文件
	private static void processUploadFile(File tempFile, Map<String, String> map) {
		if (tempFile.exists()) {
			CompressPictures(tempFile);
			map.put("photo", GetPicturesStr(tempFile));
		} else {
			LogerUtil.log("文件不存在");
		}
	}

	/**
	 * 压缩文件 商户可以自己找到优秀的压缩算法来压缩照片 这里只是演示
	 * 
	 * @param uploadFile
	 * @return
	 */
	public static File CompressPictures(File uploadFile) {
		String pictureBase64sStr = GetPicturesStr(uploadFile);
		int valueL = pictureBase64sStr.length();
		if (valueL >= 10 * 1024 * 1024 ) {
			LogerUtil.log("文件太大，开始压缩 大小:" + valueL);
			try {
				Thumbnails.of(uploadFile).scale(0.90f).toFile(uploadFile);
			} catch (IOException e) {
				e.printStackTrace();
			}
			return CompressPictures(uploadFile);
		} else {
			LogerUtil.log("文件处理完毕 大小:" + valueL);
			return null;
		}

	}

	/**
	 * 图片转化成base64字符串 将图片文 件转化为字节数组字符串，并对其进行Base64编码处理
	 * 
	 * @return
	 * @throws UnsupportedEncodingException
	 */
	public static String GetPicturesStr(File file) {
		InputStream in = null;
		byte[] data = null;
		String value = null;
		// 读取图片字节数组
		try {
			in = new FileInputStream(file);
			data = new byte[in.available()];
			in.read(data);
			in.close();
			value = SecurityUtil.Base64EncodeByByte(data);// 返回Base64编码过的字节数组字符串
		} catch (UnsupportedEncodingException e) {
			LogerUtil.error(PhotoAuthUtil.class, e, "Base64编码异常--------------");
			e.printStackTrace();
		} catch (IOException e) {
			LogerUtil.error(PhotoAuthUtil.class, e, "IO关闭异常-----------");
			e.printStackTrace();
		}
		return value;
	}

}
