package org.xxjr.job.listener.cust;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.ddq.active.mq.message.CustMessageSend;
import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.core.SpringAppContext;
import org.ddq.common.exception.ExceptionUtil;
import org.ddq.common.util.DateUtil;
import org.ddq.common.util.LogerUtil;
import org.ddq.common.web.session.DuoduoSession;
import org.llw.ddq.job.core.BaseExecteJob;
import org.llw.ddq.job.util.JobConstant;
import org.llw.ddq.job.util.JobUtil;
import org.ddq.common.core.service.RemoteInvoke;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;
import org.xxjr.sys.util.ServiceKey;
import org.xxjr.sys.util.SysParamsUtil;



/***
 * VIP过期提醒
 * @author qinxcb
 *
 */
@Lazy
@Component
public class GradeVipOverdueJob implements BaseExecteJob {

	@Override
	public AppResult executeJob(AppParam param) {
		Object processId = param.getAttr(JobConstant.KEY_processId);
		AppResult result = new AppResult();
		int total = 0;
		// 提前三天提醒
		String endDate = DateUtil.toStringByParttern(
				DateUtil.getNextDay(new Date(), 3),
				DateUtil.DATE_PATTERN_YYYY_MM_DD);
		// 每次处理500位
		int everPage = 1;
		AppParam queryParam = new AppParam();
		queryParam.setService("customerService");
		queryParam.setMethod("queryVipOverdue");
		queryParam.addAttr("endDate", endDate);
		queryParam.setCurrentPage(everPage);
		queryParam.setEveryPage(500);
		queryParam.setRmiServiceName(AppProperties.
				getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_cust));
		AppResult queryResult = RemoteInvoke.getInstance().call(queryParam);
		CustMessageSend messageSend = (CustMessageSend) SpringAppContext.getBean(CustMessageSend.class);
		while(queryResult.getRows().size() > 0){
			for(Map<String,Object> row : queryResult.getRows()){
				// 发送通知
				String customerId = row.get("customerId").toString();
				Map<String,Object> params = new HashMap<String, Object>();
				params.put("realName", row.get("realName"));
				params.put("endDate", row.get("vipEndDate"));
				try {
					messageSend.sendCustMessage(customerId, "vipOverdueTip", params);
				} catch (Exception e) {
					LogerUtil.error(GradeVipOverdueJob.class,e, "GradeVipOverdueJob error!");
					JobUtil.addProcessExecute(processId, "VIP过期提醒已处理出错：" + row.get("realName") +":" +
							row.get("vipEndDate") + e.getMessage());
				}
			}
			total += queryResult.getRows().size();
			everPage += 1;
			queryParam.setCurrentPage(everPage);
			queryParam.setRmiServiceName(AppProperties.
					getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_cust));
			queryResult = RemoteInvoke.getInstance().call(queryParam);
		}
		LogerUtil.debug("GradeVipOverdueJob over");
		JobUtil.addProcessExecute(processId, "VIP过期提醒已处理" + "，一共通知了：" + total + "位客户");
		result.setMessage("VIP过期提醒已处理" + "，一共通知了：" + total + "位客户");
		
		//处理已过期用户状态
		AppParam closeVipParam = new AppParam("customerService","batchCloseVip");
		closeVipParam.setRmiServiceName(AppProperties.
				getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_cust));
		AppResult closeResult = RemoteInvoke.getInstance().call(closeVipParam);
		if(closeResult.isSuccess()){
			// 查找过期的 vip用户
			try {
				List<String> custList = new ArrayList<String>();
				AppParam expiredVipParam = new AppParam("customerService","expiredVipCust");
				expiredVipParam.setRmiServiceName(AppProperties.
						getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_cust));
				AppResult expiredResult = RemoteInvoke.getInstance().callNoTx(expiredVipParam);
				for (Map<String, Object> map : expiredResult.getRows()) {
					Object customerId = map.get("customerId");
					custList.add(customerId.toString());
				}
				// 更新t_busi_cust的 vipGrade会员开通状态
				if(custList.size() > 0){
					AppParam busiParam = new AppParam("busiCustService","batchCloseVip");
					busiParam.addAttr("inCustId", StringUtils.join(custList, ",") );
					busiParam.setRmiServiceName(AppProperties.
							getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_busi));
					RemoteInvoke.getInstance().call(busiParam);
				}
			} catch (Exception e) {
				LogerUtil.error(this.getClass(), e, "batchCloseVip error");
				ExceptionUtil.setExceptionMessage(e, result, DuoduoSession.getShowLog());
			}
		}
		
		//处理过期后的VIP不能免费抢单和免费抽奖
		try {
			AppParam removeVipPrivilege = new AppParam("vipFreeService","batchRemoveVipPrivilege");
			removeVipPrivilege.setRmiServiceName(AppProperties.
					getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_cust));
			RemoteInvoke.getInstance().call(removeVipPrivilege);
		} catch (Exception e) {
			LogerUtil.error(this.getClass(), e, "batchRemoveVipPrivilege error");
			ExceptionUtil.setExceptionMessage(e, result, DuoduoSession.getShowLog());
		}
		
		//处理用户已过期的抢单劵
		try {
			AppParam ticketParam = new AppParam("custTicketService","batchCloseTicket");
			ticketParam.setRmiServiceName(AppProperties.
					getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_cust));
			RemoteInvoke.getInstance().call(ticketParam);
		} catch (Exception e) {
			LogerUtil.error(this.getClass(), e, "batchCloseTicket error");
			ExceptionUtil.setExceptionMessage(e, result, DuoduoSession.getShowLog());
		}
		
		// 删除一个月前过期的抢单劵
		try {
			int exceedMonths = SysParamsUtil.getIntParamByKey("exceedMonths", 1);
			AppParam delTicket = new AppParam("custTicketService","delLastMonthTicket");
			delTicket.addAttr("exceedMonths", exceedMonths);
			delTicket.setRmiServiceName(AppProperties.
					getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_cust));
			RemoteInvoke.getInstance().call(delTicket);
		} catch (Exception e) {
			LogerUtil.error(this.getClass(), e, "delLastMonthTicket error");
			ExceptionUtil.setExceptionMessage(e, result, DuoduoSession.getShowLog());
		}
		
		// B、C类城市，单子价格在55元以下，申请日期超过3天未挂卖成功，转免费单
		try {
			int applyDateExceedDays = SysParamsUtil.getIntParamByKey("applyDateExceedDays", 3);
			int orderPrice = SysParamsUtil.getIntParamByKey("orderPrice", 5500);
			AppParam updateFree = new AppParam("daiBorrowService","updateFreeRob");
			updateFree.addAttr("exceedDays", applyDateExceedDays);
			updateFree.addAttr("price", orderPrice);
			updateFree.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START +ServiceKey.Key_busi));
			RemoteInvoke.getInstance().call(updateFree);
		} catch (Exception e) {
			LogerUtil.error(this.getClass(), e, "updateFreeRob error");
			ExceptionUtil.setExceptionMessage(e, result, DuoduoSession.getShowLog());
		}
		
		//抢单券即将过期提醒
		ticketOverdueTip(processId);
		
		return result;
	}
	
	/**
	 * 抢单券即将过期提醒
	 * @param processId
	 */
	private void ticketOverdueTip(Object processId) {
		int total = 0;
		// 提前一天提醒
		String endDate = DateUtil.toStringByParttern(
				DateUtil.getNextDay(new Date(), 1),
				DateUtil.DATE_PATTERN_YYYY_MM_DD);
		// 每次处理500位
		int everPage = 1;
		AppParam ticketParam = new AppParam();
		ticketParam.setService("custTicketService");
		ticketParam.setMethod("queryTicketOverdueInfo");
		ticketParam.addAttr("endDate", endDate);
		ticketParam.setCurrentPage(everPage);
		ticketParam.setEveryPage(500);
		ticketParam.setRmiServiceName(AppProperties.
				getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_cust));
		AppResult ticketResult = RemoteInvoke.getInstance().call(ticketParam);
		while(ticketResult.getRows().size() > 0){
			for(Map<String,Object> row : ticketResult.getRows()){
				// 发送通知
				String customerId = row.get("customerId").toString();
				Map<String,Object> params = new HashMap<String, Object>();
				params.put("telephone", row.get("telephone"));
				params.put("overTime", endDate);						//过期时间
				params.put("count", row.get("ticketCount"));			//抢单券数量
				params.put("descType", "抢单券即将过期提醒");
				try {
					CustMessageSend messageSend = (CustMessageSend) SpringAppContext.getBean(CustMessageSend.class);
					messageSend.sendCustMessage(customerId, "ticketOverdueTip", params);
				} catch (Exception e) {
					LogerUtil.error(this.getClass(),e, "ticketOverdueTip error!");
					JobUtil.addProcessExecute(processId, "抢单券即将过期提醒处理出错：" + row.get("telephone") + e.getMessage());
				}
			}
			total += ticketResult.getRows().size();
			everPage += 1;
			ticketParam.setCurrentPage(everPage);
			ticketParam.setRmiServiceName(AppProperties.
					getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_cust));
			ticketResult = RemoteInvoke.getInstance().call(ticketParam);
		}
		LogerUtil.debug("ticketOverdueTip over");
		JobUtil.addProcessExecute(processId, "抢单券即将过期提醒已处理" + "，一共通知了：" + total + "位客户");
	}
	
}
