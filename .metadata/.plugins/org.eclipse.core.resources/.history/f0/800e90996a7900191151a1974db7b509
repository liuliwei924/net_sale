package org.xxjr.summary.kf;

import java.util.Date;

import org.common.core.service.BaseService;
import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppResult;
import org.ddq.common.exception.AppException;
import org.ddq.common.exception.DuoduoError;
import org.ddq.common.util.StringUtil;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import org.xxjr.busi.util.PageCountUtil;
import org.xxjr.sys.util.NumberUtil;

@Lazy
@Service
public class LoanBrowseRecordService extends BaseService {
	private static final String NAMESPACE = "LOANBROWSERECORD";

	/**
	 * querys
	 * 
	 * @param params
	 * @return
	 */
	public AppResult query(AppParam params) {
		return super.query(params, NAMESPACE);
	}

	/**
	 * queryByPage
	 * 
	 * @param params
	 * @return
	 */
	public AppResult queryByPage(AppParam params) {
		return super.queryByPage(params, NAMESPACE);
	}

	
	public AppResult queryViewByPage(AppParam param) {
		if(param.getCurrentPage() == -1){
			return super.query(param, NAMESPACE,"queryView");
		}else{
			return super.queryByPage(param, NAMESPACE,"queryView", "queryViewCount");
		}
	}

	
	public AppResult queryViewByMonth(AppParam param) {
		if(param.getCurrentPage() == -1){
			return super.query(param, NAMESPACE,"queryViewByMonth");
		}else{
			return super.queryByPage(param, NAMESPACE,"queryViewByMonth", "queryViewByMonthCount");
		}
	}
	/**
	 * queryCount
	 * 
	 * @param params
	 * @return
	 */
	public AppResult queryCount(AppParam params) {
		int size = getDao().count(NAMESPACE, super.COUNT, params.getAttr(),
				params.getDataBase());
		AppResult result = new AppResult();
		result.putAttr(DuoduoConstant.TOTAL_SIZE, size);
		return result;
	}

	/**
	 * insert
	 * 
	 * @param params
	 * @return
	 */
	public AppResult insert(AppParam params) {
		params.addAttr("createTime", new Date());
		params.addAttr("recordTime", new Date());
		return super.insert(params, NAMESPACE);
	}

	/**
	 * update
	 * 
	 * @param params
	 * @return
	 */
	public AppResult update(AppParam params) {
		return super.update(params, NAMESPACE);
	}

	public AppResult save(AppParam param) {
		AppResult result = null;
		result = this.update(param);
		int size = NumberUtil.getInt(
				result.getAttr(DuoduoConstant.DAO_Update_SIZE), 0);
		if (size <= 0) {
			result = this.insert(param);
		}
		return result;
	}

	/**
	 * delete
	 * 
	 * @param params
	 * @return
	 */
	public AppResult delete(AppParam params) {
		String ids = (String) params.getAttr("ids");
		AppResult result = null;
		if (!StringUtils.isEmpty(ids)) {
			for (String id : ids.split(",")) {
				AppParam param = new AppParam();
				param.addAttr("recordId", id);

				result = super.delete(param, NAMESPACE);
			}
		} else if (!StringUtils.isEmpty(params.getAttr("recordId"))) {
			result = super.delete(params, NAMESPACE);
		} else {
			throw new AppException(DuoduoError.DELETE_NO_ID);
		}
		if (!StringUtils.isEmpty(ids)) {
			for (String id : ids.split(",")) {
				AppParam param = new AppParam();
				param.addAttr("recordTime", id);

				result = super.delete(param, NAMESPACE);
			}
		} else if (!StringUtils.isEmpty(params.getAttr("recordTime"))) {
			result = super.delete(params, NAMESPACE);
		} else {
			throw new AppException(DuoduoError.DELETE_NO_ID);
		}
		return result;
	}
	
	/***
	 * 更新浏览次数
	 * @param params
	 * @return
	 */
	public AppResult updateBroCount(AppParam params){
		/*AppResult result = new AppResult();
		Date recordTime = DateUtil.toDateByString(DateUtil.toStringByParttern(new Date(),"yyyy-MM-dd"),"yyyy-MM-dd");
		
		//查询该笔数据是否存在，存在则更新 不存在则插入
		AppParam queryParam = new AppParam();
		queryParam.addAttr("recordTime", recordTime);
		queryParam.addAttr("recordId", params.getAttr("recordId"));
		
		result = this.query(queryParam);
		
		params.addAttr("recordTime", recordTime);
		//更新
		if(result.isSuccess() && result.getRows().size() >0){
			this.update(params);
		}else{//不存在
			String  recordId = StringUtil.getString(params.getAttr("recordId"));
			AppParam quereyParam = new AppParam();
			quereyParam.addAttr("recordId", recordId);
			quereyParam.setService("creditCardService");
			quereyParam.setMethod("query");
			quereyParam.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START
							+ ServiceKey.Key_sys));
			AppResult queryResult = RemoteInvoke.getInstance().callNoTx(quereyParam);
			if(queryResult.isSuccess()){
				if(queryResult.getRows().size() > 0){
					String name = StringUtil.getString(queryResult.getRow(0).get("name"));
					int type = NumberUtil.getInt(queryResult.getRow(0).get("type"),1);
					int loanType = NumberUtil.getInt(queryResult.getRow(0).get("loanType"),1);
					params.addAttr("name", name);
					params.addAttr("type", type);
					params.addAttr("loanType", loanType);
				}
			}
			this.insert(params);
		}*/
		String sysCode = StringUtil.objectToStr(params.getAttr("sysCode"));
		if (sysCode.endsWith("Count")) {
			sysCode = sysCode.substring(0, sysCode.lastIndexOf("Count"));
			params.addAttr("sysCode", sysCode);
		}
		return PageCountUtil.btnCount(params);
		
	}
	
	
	/***
	 * 更新小额贷款浏览次数
	 * @param params
	 * @return
	 */
	public AppResult updateLoanCount(AppParam params){
		/*AppResult result = new AppResult();
		Date recordTime = DateUtil.toDateByString(DateUtil.toStringByParttern(new Date(),"yyyy-MM-dd"),"yyyy-MM-dd");
		String  prodId = StringUtil.getString(params.getAttr("prodId"));
		params.addAttr("recordTime", recordTime);
		//处理小额贷款的recordId为产品id加上10000，不与原先统计表中的recordId冲突
		//更新
		int size = super.getDao().update(NAMESPACE, "update", params.getAttr(), params.getDataBase());
		if(size<1){
			params.addAttr("name", params.getAttr("prodName"));
			params.addAttr("type", 5);
			this.insert(params);
		}*/
		String  prodId = StringUtil.getString(params.getAttr("prodId"));
		params.addAttr("recordId", 10000+prodId);
		String sysCode = StringUtil.objectToStr(params.getAttr("sysCode"));
		if (sysCode.endsWith("Count")) {
			sysCode = sysCode.substring(0, sysCode.lastIndexOf("Count"));
			params.addAttr("sysCode", sysCode);
		}
		return PageCountUtil.btnCount(params);
	}
}
