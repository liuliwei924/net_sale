package org.xxjr.mq.listener.receiver;

import java.io.Serializable;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.PreDestroy;

import org.ddq.active.mq.XxjrMqSendUtil;
import org.ddq.common.util.DateUtil;
import org.ddq.common.util.JsonUtil;
import org.ddq.common.util.LogerUtil;
import org.ddq.common.util.StringUtil;
import org.llw.ddq.model.cache.RedisUtils;
import org.llw.ddq.mq.rabbitmq.RabbitMqConfig;
import org.llw.xxjr.fx.util.FxCustomerUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;
import org.xxjr.cust.util.info.CustomerIdentify;
import org.xxjr.cust.util.info.CustomerUtil;
import org.xxjr.mq.listener.consumer.RabbitMqConsumer;
import org.xxjr.mq.listener.util.JPushUtils;
import org.xxjr.mq.listener.util.XxjrInitAnnotation;
import org.xxjr.sys.util.NumberUtil;
import org.xxjr.sys.util.SysParamsUtil;
import org.xxjr.sys.util.message.MessageConstants;
import org.xxjr.sys.util.message.MessageTemplateUtil;

import cn.jpush.api.JPushClient;
import cn.jpush.api.push.model.PushPayload;

@Component
@XxjrInitAnnotation(beanName="jPushMessageReceiver",initMethod="init")
public class JPushMessageReceiver extends RabbitMqConsumer{
	

	@Autowired
	private RabbitMqConfig rabbitMqConfig;
	
	@Value("${rabbit.queue.jpushMessage}")
	private String queueName;

	@SuppressWarnings("unchecked")
	public void onMessage(Map<String, Object> messageInfo) {
		try {
			//限制一分钟内不超过500条
			Map<String,Object> paramMap = (Map<String, Object>)RedisUtils.getRedisService().get("jpushSendMesageRecordParam");
			int sendTotal = 0;
			String createTime = "";
			String nowTime = "";
			int dateCompare = 0;
			if(paramMap != null){
				sendTotal = NumberUtil.getInt(paramMap.get("sendTotal"),0);
				createTime = StringUtil.getString(paramMap.get("createTime"));
				nowTime = DateUtil.toStringByParttern(DateUtil.getNextMinutes(new Date(), -1), 
						DateUtil.DATE_PATTERN_YYYY_MM_DD_HHMMSS);
				dateCompare = createTime.compareTo(nowTime);
				if(dateCompare > 0 && sendTotal >= 500){
					return;
				}
			}
			LogerUtil.log("JPushMessageReceiver params:" + messageInfo.toString());
			String messageType = StringUtil.getString(messageInfo.get("messageType"));
			Map<String, Object> messageTemplate = MessageTemplateUtil.getMessageTemplate(messageType);
			if(messageTemplate==null){
				LogerUtil.error(JPushMessageReceiver.class, "not found messageType:" + messageType);
				return;
			}
			
			int flagJpush = Integer.valueOf(messageTemplate
					.get("flagJpush") ==null ? "0" : StringUtil.getString(messageTemplate.get("flagJpush")));
			String customerId = StringUtil.getString(messageInfo.get("customerId"));
			Map<String,Object> customerInfo = null;
			//分销发送极光推送
			if(messageType.indexOf("fx") >= 0){
				customerInfo = FxCustomerUtil.getCustIdentify(customerId);
			}else{
				customerInfo = CustomerIdentify.getCustIdentify(customerId);
			}
			
			String content = StringUtil.getString(messageTemplate.get("content"));
			String title = StringUtil.getString(messageTemplate.get("title"));

			Map<String,Object> params = (Map<String, Object>) messageInfo.get("params");
			if(params==null){
				params = customerInfo;
			}else{
				params.putAll(customerInfo);
			}
			params.put("customerId", customerId);
			content = MessageTemplateUtil.getMessageContent(params, content);
			String jpushContent = StringUtil.getString(messageTemplate.get("jpushContent"));
			//极光推送
			if (flagJpush == 1) {
				String jpushText = MessageTemplateUtil.getMessageContent(params, jpushContent);
				sendJpushMessage(StringUtils.isEmpty(jpushContent) ? content: jpushText ,title,params);
				sendTotal ++;
				if(paramMap != null){
					if(dateCompare < 0 && sendTotal >= 500){
						paramMap = new HashMap<String,Object>();
						paramMap.put("sendTotal", 1);
						paramMap.put("createTime",DateUtil.getNormalFmt(new Date()));
					}else{
						paramMap.put("sendTotal", sendTotal);
					}
				}else{
					paramMap = new HashMap<String,Object>();
					paramMap.put("sendTotal", sendTotal);
					paramMap.put("createTime",DateUtil.getNormalFmt(new Date()));
				}
				RedisUtils.getRedisService().set("jpushSendMesageRecordParam",(Serializable)paramMap,60);
			}
		} catch (Exception e) {
			LogerUtil.error(JPushMessageReceiver.class, e, "JPushMessageReceiver mq execute error!");
			XxjrMqSendUtil.saveFailureLog("JPushMessageReceiver", messageInfo);
		}

	}
		
	
	/**
	 *推送极光信息
	 * @param content 消息内容
	 * @param title 标题
	 * @param param 参数
	 * @return
	 */
	@SuppressWarnings("unchecked")
	private static boolean sendJpushMessage(String content, String title, Map<String, Object> param) {
		boolean flag = true;
		try {
			String jpushClientType = StringUtil.getString(param.get("jpushClientType"));
			JPushClient jpushClient = JPushUtils.getJPushClient(jpushClientType);
			if(jpushClient == null){
				return false;
			}
			String customerId = StringUtil.getString(param.get("customerId"));
			String uid = CustomerUtil.getEncrypt(customerId);
			String alias = uid.substring(SysParamsUtil.getIntParamByKey("USERID", 8));
			Object jpushType = param.get("jpushType");
			if(StringUtils.isEmpty(jpushType)){
				jpushType = MessageConstants.jpush_Type_2;
			}
			
			Map<String, Object> extraMap = new HashMap<String, Object>();
			extraMap.put("fromType", jpushType);
			extraMap.put("uid", uid);
			extraMap.put("title", title);
			
			if(!StringUtils.isEmpty(param.get("extraData"))){
				extraMap.putAll(JsonUtil.getInstance().json2Object(
						StringUtil.getString(param.get("extraData")), Map.class));
			}
			
			PushPayload pushPayload = JPushUtils.buildAllPayload(
					alias,
					content,
					title,
					JsonUtil.getInstance().object2JSON(extraMap));
			
			jpushClient.sendPush(pushPayload);
			// 如果是往信贷经理推送，则同时往小小金融经理(IOS企业版)推送
			if(JPushUtils.jpush_client_xdjl.equals(jpushClientType)){
				sendJpushXxjrjlMessage(content, title, param);
			}
		} catch (Exception e) {
			LogerUtil.error(JPushMessageReceiver.class , e, "sendJpushMessage execute error!");
			XxjrMqSendUtil.saveFailureLog("sendJpushMessage", param);
			flag = false;
		}

		return flag;
	}
	
	/**
	 * 推送小小金融经理(IOS企业版)
	 * @param content
	 * @param title
	 * @param param
	 */
	private static void sendJpushXxjrjlMessage(String content, String title, Map<String, Object> param){
		param.put("jpushClientType", JPushUtils.jpush_client_xdjrjl);
		sendJpushMessage(content, title, param);
	}
	

	@Override
	public void init(String queueName ,RabbitMqConfig rabbitMqConfig) {
		super.init(queueName,rabbitMqConfig);
	}
	
    public void init() {
		init(queueName,rabbitMqConfig);
	}
	
	@PreDestroy
	public void destroy(){
		reaseResource();
	}
	
	
}
