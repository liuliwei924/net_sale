package org.xxjr.cust.util.info;

import java.util.Map;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.core.SpringAppContext;
import org.ddq.common.core.service.RemoteInvoke;
import org.ddq.common.core.service.SoaManager;
import org.springframework.util.StringUtils;
import org.xxjr.sys.util.ServiceKey;

/**
 * 公司雇员工具类
 * @author Administrator
 *
 */
public class EmployeUtil {

	/**
	 * 根据手机号查询是否属于公司雇员
	 * @param telephone
	 * @return
	 */
	public static Map<String,Object> isEmploye(Object telephone){
		AppParam params = new AppParam();
		params.setService("employeService");
		params.setMethod("query");
		params.addAttr("telephone", telephone);
		params.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_wx));
		AppResult result = RemoteInvoke.getInstance().callNoTx(params);
		if(result.getRows().size() > 0){
			return result.getRow(0);
		}
		return null;
	}
	
	/**
	 * 根据unionid查询公司雇员信息
	 * @param unionid
	 * @return
	 */
	public static Map<String,Object> queryEmpByUnionid(Object unionid){
		AppParam params = new AppParam();
		params.setService("employeService");
		params.setMethod("query");
		params.addAttr("unionid", unionid);
		params.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_wx));
		AppResult result = new AppResult();
		if (SpringAppContext.getBean("employeService") == null) {
			result = RemoteInvoke.getInstance().call(params);
		}else{
			result = SoaManager.getInstance().invoke(params);
		}
		if(result.getRows().size() > 0){
			return result.getRow(0);
		}
		return null;
	}
	
	/**
	 * 查询公司雇员信息
	 * @param empId
	 * @return
	 */
	public static Map<String,Object> queryEmpById(Object empId){
		AppParam params = new AppParam();
		params.setService("employeService");
		params.setMethod("query");
		params.addAttr("empId", empId);
		params.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_wx));
		AppResult result = new AppResult();
		if (SpringAppContext.getBean("employeService") == null) {
			result = RemoteInvoke.getInstance().call(params);
		}else{
			result = SoaManager.getInstance().invoke(params);
		}
		if(result.getRows().size() > 0){
			return result.getRow(0);
		}
		return null;
	}
	
	/**
	 * 根据二维码场景值判断是否 员工
	 * @param gzhId
	 * @param sceneId
	 * @return
	 */
	public static Map<String,Object> isEmpQrcode(Object gzhId, Object sceneId){
		AppParam qrcodeParam = new AppParam();
		qrcodeParam.setService("sceneQrcodeService");
		qrcodeParam.setMethod("queryQrcodeInfo");
		qrcodeParam.addAttr("gzhId", gzhId);
		qrcodeParam.addAttr("sceneId", sceneId);
		qrcodeParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_wx));
		AppResult qrcodeResult = new AppResult();
		if (SpringAppContext.getBean("sceneQrcodeService") == null) {
			qrcodeResult = RemoteInvoke.getInstance().call(qrcodeParam);
		}else{
			qrcodeResult = SoaManager.getInstance().invoke(qrcodeParam);
		}
		if(qrcodeResult.getRows().size() > 0){
			Map<String,Object> codeInfo = qrcodeResult.getRow(0);
			if(!StringUtils.isEmpty(codeInfo.get("empId"))){
				return codeInfo;
			}
		}
		return null;
	}
	
	/**
	 * 查询员工二维码ticket
	 * @param gzhId
	 * @param empId
	 * @return
	 */
	public static Object queryEmpTicket(Object gzhId, Object empId){
		AppParam qrcodeParam = new AppParam();
		qrcodeParam.setService("sceneQrcodeService");
		qrcodeParam.setMethod("query");
		qrcodeParam.addAttr("gzhId", gzhId);
		qrcodeParam.addAttr("empId", empId);
		qrcodeParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_wx));
		AppResult qrcodeResult = new AppResult();
		if (SpringAppContext.getBean("sceneQrcodeService") == null) {
			qrcodeResult = RemoteInvoke.getInstance().call(qrcodeParam);
		}else{
			qrcodeResult = SoaManager.getInstance().invoke(qrcodeParam);
		}
		if(qrcodeResult.getRows().size() > 0){
			return qrcodeResult.getRow(0).get("ticket");
		}
		return null;
	}
	
}
