package org.xxjr.tools.util;

import java.io.Serializable;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.core.service.RemoteInvoke;
import org.ddq.common.util.StringUtil;
import org.ddq.common.web.page.PageUtil;
import org.llw.model.cache.RedisUtils;
import org.springframework.util.StringUtils;
import org.xxjr.sys.util.ServiceKey;
import org.xxjr.sys.util.SysParamsUtil;

/**
 * 财务系统相关工具类
 * @author Administrator
 *
 */
public class CollectUtil {

	/** 门店信息缓存  **/
	public final static String PAY_ORG_INFO = "collect_org_info";
	
	/** 成本大类缓存  **/
	public final static String PAY_COST_BIGTYPE_INFO = "collect_cost_bigType";
	
	/** 成本小类缓存  **/
	public final static String PAY_COST_SMALLTYPE_INFO = "collect_cost_smallType";
	
	/** 小程序支付参数  **/
	public final static String PAY_XCX_INFO = "collect_pay_xcx_info";
	
	/***
	 * 获取所有成本大类
	 */
	@SuppressWarnings("unchecked")
	public static List<Map<String,Object>> getBigTypeList(){
		List<Map<String,Object>> list = ((List<Map<String, Object>>) RedisUtils.getRedisService().get(PAY_COST_BIGTYPE_INFO));
		if(list==null || list.isEmpty()){
			list = refershBigTypeList();
		}
		return list;
	}
	
	/***
	 * 刷新成本大类
	 */
	public static List<Map<String,Object>> refershBigTypeList(){
		AppParam param  = new AppParam();
		param.setService("costBigtypeService");
		param.setMethod("query");
		param.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START 
				+ ServiceKey.Key_col));
		AppResult result = RemoteInvoke.getInstance().call(param);
		RedisUtils.getRedisService().set(PAY_COST_BIGTYPE_INFO, (Serializable)result.getRows(), 60*60*4);
		return result.getRows();
	}
	
	/**
	 * 获取大类下所有小类
	 * @param bigTypeId
	 * @return
	 */
	public static List<Map<String,Object>> getSmallTypeList(String bigTypeId){
		List<Map<String,Object>> result = new ArrayList<Map<String,Object>>();
		if(StringUtils.isEmpty(bigTypeId)){
			return result;
		}
		List<Map<String,Object>> list = getSmallTypeList();
		for(Map<String,Object> row : list){
			if(bigTypeId.equals(row.get("bigTypeId").toString())){
				result.add(row);
			}
		}
		return result;
	}
	
	/***
	 * 获取所有成本小类
	 */
	@SuppressWarnings("unchecked")
	public static List<Map<String,Object>> getSmallTypeList(){
		List<Map<String,Object>> list = ((List<Map<String, Object>>) RedisUtils.getRedisService().get(PAY_COST_SMALLTYPE_INFO));
		if(list==null || list.isEmpty()){
			list = refershSmallTypeList();
		}
		return list;
	}
	
	/***
	 * 刷新成本小类
	 */
	public static List<Map<String,Object>> refershSmallTypeList(){
		AppParam param  = new AppParam();
		param.setService("costSmalltypeService");
		param.setMethod("query");
		param.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START 
				+ ServiceKey.Key_col));
		AppResult result = RemoteInvoke.getInstance().call(param);
		RedisUtils.getRedisService().set(PAY_COST_SMALLTYPE_INFO, (Serializable)result.getRows(), 60*60*4);
		return result.getRows();
	}
	
	
	
	/***
	 * 获取所有门店信息
	 */
	@SuppressWarnings("unchecked")
	public static List<Map<String,Object>> getOrgList(){
		List<Map<String,Object>> list = ((List<Map<String, Object>>) RedisUtils.getRedisService().get(PAY_ORG_INFO));
		if(list==null || list.isEmpty()){
			list = refershOrgList();
		}
		return list;
	}
	
	/**
	 * 获取指定类型的门店信息
	 * @param type
	 * @return
	 */
	public static List<Map<String,Object>> getOrgListByType(String type){
		List<Map<String,Object>> list = getOrgList();
		List<Map<String,Object>> orgList = new ArrayList<Map<String,Object>>();
		for (int i = 0; i < list.size(); i++) {
			if(list.get(i).get("orgType").toString().equals(type)){
				orgList.add(list.get(i));
			}
		}
		return orgList;
	}
	
	/***
	 * 刷新门店信息
	 */
	public static List<Map<String,Object>> refershOrgList(){
		AppParam param  = new AppParam();
		param.setService("orgService");
		param.setMethod("query");
		param.setOrderBy("orgNo");
		param.setOrderValue(PageUtil.ORDER_ASC);
		param.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START 
				+ ServiceKey.Key_col));
		AppResult result = RemoteInvoke.getInstance().call(param);
		RedisUtils.getRedisService().set(PAY_ORG_INFO, (Serializable)result.getRows(), 60*60*4);
		return result.getRows();
	}
	
	/**
	 * 计算代扣手续费
	 * @param tranAmt
	 * @param payType
	 * @return
	 */
	public static double getCollectPoundage(BigDecimal tranAmt,String payType){
		if("syx".equals(payType)){
			// 商银信收款3 元每笔
			String poundageAmount = SysParamsUtil.getStringParamByKey("syxCollectPoundage", "3");
			return Double.valueOf(poundageAmount);
		}
		if("kft".equals(payType)){
			// 宝付收款3 元每笔
			String poundageAmount = SysParamsUtil.getStringParamByKey("baofooCollectPoundage", "3");
			return Double.valueOf(poundageAmount);
		}
		if("baofoo".equals(payType)){
			// 快付通小于2万，10元每笔 ，大于等于2万，按0.0005计算
			if(tranAmt.doubleValue() < 20000){
				String poundageAmount = SysParamsUtil.getStringParamByKey("kftLt2CollectPoundage", "10");
				return Double.valueOf(poundageAmount);
			}
			if(tranAmt.doubleValue() >= 20000){
				String poundageRate = SysParamsUtil.getStringParamByKey("kftGt2CollectPoundageRate", "0.0005");
				return tranAmt.multiply(new BigDecimal(Double.valueOf(poundageRate)))
						.setScale(2, RoundingMode.HALF_UP).doubleValue();
			}
		}
		return 0;
	}
	
	/***
	 * 获取小程序支付参数
	 */
	@SuppressWarnings("unchecked")
	public static Map<String,Object> getXcxPayInfo(String xcxId){
		List<Map<String,Object>> list = ((List<Map<String, Object>>) RedisUtils.getRedisService().get(PAY_XCX_INFO));
		if(list == null || list.isEmpty()){
			list = refershXcxPayInfo();
		}
		for(Map<String,Object> row : list){
			if(xcxId.equals(StringUtil.getString(row.get("xcxId")))){
				return row;
			}
		}
		return new HashMap<String, Object>();
	}
	
	/***
	 * 刷新小程序支付参数
	 */
	public static List<Map<String,Object>> refershXcxPayInfo(){
		AppParam param  = new AppParam();
		param.setService("xcxInfoService");
		param.setMethod("query");
		param.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START 
				+ ServiceKey.Key_col));
		AppResult result = RemoteInvoke.getInstance().call(param);
		List<Map<String,Object>> payInfos = result.getRows();
		RedisUtils.getRedisService().set(PAY_XCX_INFO, (Serializable)payInfos, 60*60*4);
		return payInfos;
	}
}
