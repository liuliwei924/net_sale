package org.xxjr.cust.fund;

import java.math.BigDecimal;
import java.util.Date;
import java.util.Map;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppResult;
import org.ddq.common.core.service.BaseService;
import org.ddq.common.core.service.SoaManager;
import org.ddq.common.exception.AppException;
import org.ddq.common.exception.DuoduoError;
import org.ddq.common.exception.SysException;
import org.ddq.common.util.DateUtil;
import org.ddq.common.web.session.DuoduoSession;
import org.ddq.model.cache.RedisUtils;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import org.xxjr.cust.util.FundConstant;
import org.xxjr.cust.util.fund.CustAmountUtil;
import org.xxjr.sys.util.message.MessageConstants;

@Lazy
@Service
public class WithdrawService extends BaseService {
	private static final String NAMESPACE = "WITHDRAW";

	/**
	 * querys
	 * 
	 * @param params
	 * @return
	 */
	public AppResult query(AppParam params) {
		return super.query(params, NAMESPACE);
	}

	/**
	 * queryByPage
	 * 
	 * @param params
	 * @return
	 */
	public AppResult queryByPage(AppParam params) {
		return super.queryByPage(params, NAMESPACE);
	}

	/**
	 * queryCount
	 * 
	 * @param params
	 * @return
	 */
	public AppResult queryCount(AppParam params) {
		int size = getDao().count(NAMESPACE, super.COUNT,params.getAttr(),params.getDataBase());
		AppResult result = new AppResult();
		result.putAttr(DuoduoConstant.TOTAL_SIZE, size);
		return result;
	}

	/**
	 * queryShowByPage
	 * 
	 * @param params
	 * @return
	 */
	public AppResult queryShowByPage(AppParam params) {
		return super.queryByPage(params, NAMESPACE, "queryShow", "queryShowCount");
	}

	/**
	 * queryViewCount
	 * 
	 * @param params
	 * @return
	 */
	public AppResult queryViewCount(AppParam params) {
		int size = getDao().count(NAMESPACE, "queryViewCount",params.getAttr(),params.getDataBase());
		AppResult result = new AppResult();
		result.putAttr(DuoduoConstant.TOTAL_SIZE, size);
		return result;
	}

	/**
	 * insert
	 * 
	 * @param params
	 * @return
	 */
	public AppResult insert(AppParam params) {
		Object customerId = params.getAttr("customerId");
		Object amount = params.getAttr("amount");
		if (StringUtils.isEmpty(amount) || StringUtils.isEmpty(customerId)) {
			throw new AppException(DuoduoError.UPDATE_NO_PARAMS);
		}
		params.addAttr("status", FundConstant.WITHDRAW_STATUS_0 + "");
		params.addAttr("createTime", new Date());
		params.addAttr("createBy", DuoduoSession.getUserName());
		AppResult result = super.insert(params, NAMESPACE);

		if(result.isSuccess()){
			Object withdrawId = params.getAttr("withdrawId");
			// 记录资金信息
			this.fundRecord(withdrawId, customerId, amount, "withdrawApply",
					MessageConstants.Key_withdraw);
		}
		return result;
	}

	/**
	 * update
	 * 
	 * @param params
	 * @return
	 */
	public AppResult update(AppParam params) {
		return super.update(params, NAMESPACE);
	}

	/**
	 * 根据ID 查询
	 * @param context
	 * @return
	 */
	public AppResult queryById(AppParam context) {
		AppParam param = new AppParam();
		param.addAttr("withdrawId", context.getAttr("withdrawId"));
		AppResult queryResult = this.query(param);
		if(queryResult.getRows().size() == 0){
			throw new AppException(DuoduoError.UPDATE_DATA_IS_NOTEXISTS);
		}
		return queryResult;
	}

	/**
	 * 审核通过
	 * 
	 * @param context
	 * @return
	 */
	public AppResult auditPass(AppParam context) {
		AppResult resultWithdraw = queryById(context);
		
		Map<String, Object> oldRecord = resultWithdraw.getRow(0);
		Integer status = Integer.valueOf(oldRecord.get("status").toString());
		if (FundConstant.WITHDRAW_STATUS_0 != status) {
			throw new SysException("当前的状态不是待审核，当前状态为:" + status);
		}
		AppParam param = new AppParam();
		if (context.getAttr("poundage") != null
				&& oldRecord.get("amount").toString() != null) {
			param.addAttr("poundage", context.getAttr("poundage"));
			param.addAttr("realAmount", new BigDecimal(oldRecord.get("amount")
					.toString()).subtract(new BigDecimal(context.getAttr(
					"poundage").toString())));
		}
		param.addAttr("status", FundConstant.WITHDRAW_STATUS_1);
		param.addAttr("auditBy", DuoduoSession.getUserName());
		param.addAttr("auditTime", new Date());
		param.addAttr("fromStatus", status + "");
		param.addAttr("withdrawId", oldRecord.get("withdrawId"));
		param.addAttr("lockid", oldRecord.get("lockid"));
		param.setService("withdrawService");
		param.setMethod("update");
		AppResult result = SoaManager.getInstance().invoke(param);
		return result;
	}

	/**
	 * 确定
	 * 
	 * @param context
	 * @return
	 */
	public AppResult checkPass(AppParam context) {
		AppResult resultWithdraw = queryById(context);
		if (resultWithdraw.getRows().size() == 0) {
			throw new AppException(DuoduoError.UPDATE_DATA_IS_NOTEXISTS);
		}
		Map<String, Object> oldRecord = resultWithdraw.getRow(0);
		Integer status = Integer.valueOf(oldRecord.get("status").toString());
		if (FundConstant.WITHDRAW_STATUS_1 != status) {
			throw new SysException("当前的状态不是待确定，当前状态为:" + status);
		}
		AppParam param = new AppParam();
		int newStatus = FundConstant.WITHDRAW_STATUS_2;
		param.addAttr("status", newStatus);
		param.addAttr("checkTime", new Date());
		param.addAttr("checkBy", DuoduoSession.getUserName());
		param.addAttr("withdrawId", oldRecord.get("withdrawId"));
		param.addAttr("fromStatus", status + "");
		param.addAttr("lockid", oldRecord.get("lockid"));
		param.setService("withdrawService");
		param.setMethod("update");
		AppResult result = SoaManager.getInstance().invoke(param);

		int updateSize = Integer.valueOf(result.getAttr(
				DuoduoConstant.DAO_Update_SIZE).toString());

		if (updateSize == 1) {
			Object withdrawId = oldRecord.get("withdrawId");
			Object customerId = oldRecord.get("customerId");
			// 记录信息
			this.fundRecord(withdrawId, customerId, oldRecord.get("amount"),
					"withdrawCheck", MessageConstants.Key_withdrawSuccess);
		}
		return result;
	}

	/**
	 * 取消提现
	 * 
	 * @param context
	 * @return
	 */
	public AppResult checkPassNo(AppParam context) {
		AppResult resultWithdraw = queryById(context);
		if (resultWithdraw.getRows().size() == 0) {
			throw new AppException(DuoduoError.UPDATE_DATA_IS_NOTEXISTS);
		}
		Map<String, Object> oldRecord = resultWithdraw.getRow(0);
		Integer status = Integer.valueOf(oldRecord.get("status").toString());
		if (FundConstant.WITHDRAW_STATUS_1 == status
				|| FundConstant.WITHDRAW_STATUS_0 == status) {
			AppParam param = new AppParam();
			param.addAttr("status", FundConstant.WITHDRAW_STATUS_3);
			param.addAttr("auditTime", new Date());
			param.addAttr("withdrawId", oldRecord.get("withdrawId"));
			param.addAttr("fromStatus", status + "");
			param.addAttr("auditDesc", context.getAttr("auditDesc"));
			param.addAttr("lockid", oldRecord.get("lockid"));
			param.setService("withdrawService");
			param.setMethod("update");
			AppResult result = SoaManager.getInstance().invoke(param);
			int updateSize = Integer.valueOf(result.getAttr(
					DuoduoConstant.DAO_Update_SIZE).toString());
			if (updateSize == 1) {
				Object withdrawId = oldRecord.get("withdrawId");
				Object customerId = oldRecord.get("customerId");
				// 记录信息
				this.fundRecord(withdrawId, customerId,
						oldRecord.get("amount"), "withdrawCancel",
						MessageConstants.Key_withdrawCancel);
			}
			return result;
		}

		throw new SysException("当前的状态无法做该处理，当前状态为:" + status);

	}

	/**
	 * 批量审核
	 * 
	 * @param params
	 * @return
	 */
	public AppResult auditAll(AppParam params) {
		String ids = (String) params.getAttr("ids");
		AppResult result = null;
		if (!StringUtils.isEmpty(ids)) {
			for (String id : ids.split(",")) {
				AppParam param = new AppParam();
				param.addAttr("withdrawId", id);
				param.setService("withdrawService");
				param.setMethod("auditPass");
				SoaManager.getInstance().callNewTx(param);
			}
		} else if (!StringUtils.isEmpty(params.getAttr("withdrawId"))) {
			result = super.delete(params, NAMESPACE);
		} else {
			throw new AppException(DuoduoError.DELETE_NO_ID);
		}
		return result;
	}

	/**
	 * 批量确定
	 * 
	 * @param params
	 * @return
	 */
	public AppResult checkAll(AppParam params) {
		String ids = (String) params.getAttr("ids");
		AppResult result = null;
		if (!StringUtils.isEmpty(ids)) {
			for (String id : ids.split(",")) {
				AppParam param = new AppParam();
				param.addAttr("withdrawId", id);
				param.setService("withdrawService");
				param.setMethod("checkPass");
				SoaManager.getInstance().callNewTx(param);
			}
		} else if (!StringUtils.isEmpty(params.getAttr("withdrawId"))) {
			result = super.delete(params, NAMESPACE);
		} else {
			throw new AppException(DuoduoError.DELETE_NO_ID);
		}
		return result;
	}

	/***
	 * 资金变化，并发送消息
	 * @param withdrawId 提现ID 号
	 * @param customerId 客户
	 * @param amount 提现金额
	 * @param method 方式
	 * @param messageKey 消息
	 */
	private void fundRecord(Object withdrawId, Object customerId,
			Object amount, String method, String messageKey) {
		// 修改用户资金
		AppParam updateCust = new AppParam();
		updateCust.setService("custAmountService");
		updateCust.setMethod(method);
		updateCust.addAttr("withdrawId", withdrawId);
		updateCust.addAttr("customerId", customerId);
		updateCust.addAttr("amount", amount);
		SoaManager.getInstance().invoke(updateCust);

		RedisUtils.getRedisService().del(CustAmountUtil.CacheKey_PASS + customerId);
		// 新增资金流水明细
		AppParam recordContext = new AppParam();
		recordContext.addAttr("customerId", customerId);
		recordContext.addAttr("withdrawId", withdrawId);
		recordContext.setService("fundRecordSeniorService");
		recordContext.addAttr("createBy", DuoduoSession.getUserName());
		recordContext.setMethod(method);
		SoaManager.getInstance().invoke(recordContext);
	}
	
	
	/**
	 * 推荐贷款提现申请
	 */
	public AppResult tjWithdraw(AppParam params) {
		Object customerId = params.getAttr("customerId");
		Object amount = params.getAttr("amount");
		if (StringUtils.isEmpty(customerId) || StringUtils.isEmpty(amount)) {
			throw new AppException(DuoduoError.UPDATE_NO_PARAMS);
		}
		
		// 一个月只能提现一次，若取消提现的可再提现一次
		AppParam queryParam = new AppParam();
		queryParam.addAttr("customerId", customerId);
		queryParam.addAttr("inStatus", "0,1,3,4,5");
		String curMonth = DateUtil.toStringByParttern(new Date(), "yyyy-MM");
		queryParam.addAttr("createStartTime", curMonth + "-01");
		AppResult queryResult = this.query(queryParam);
		if(queryResult.getRows().size() > 0){
			throw new SysException("每月只能提现一次，您" + curMonth + "月已申请过提现");
		}
		
		params.addAttr("status", "0");// 待审核
		params.addAttr("withdrawType", "tj");// 提现类型
		params.addAttr("createTime", new Date());
		params.addAttr("createBy", DuoduoSession.getUserName());
		AppResult result = super.insert(params, NAMESPACE);

		if(result.isSuccess()){
			Object withdrawId = params.getAttr("withdrawId");
			
			// 推荐贷款提现申请
			AppParam updateCust = new AppParam();
			updateCust.setService("custAmountService");
			updateCust.setMethod("updateRewardAmount");
			updateCust.addAttr("businessId", withdrawId);// 提现业务id
			updateCust.addAttr("customerId", customerId);
			updateCust.addAttr("amount", amount);
			updateCust.addAttr("fundType", "tjWithdraw");
			updateCust.addAttr("recordDesc", "推荐贷款提现申请");
			updateCust.addAttr("methodName", "tjWithdrawApply");// 方法名称
			SoaManager.getInstance().invoke(updateCust);
		}
		return result;
	}
	
	
	/**
	 * 查询提现状态成功
	 * @param params
	 * @return
	 */
	public AppResult queryStatusSuccess(AppParam params) {
		Object withdrawId = params.getAttr("withdrawId");
		Object status = params.getAttr("status");
		Object amount = params.getAttr("amount");
		if(StringUtils.isEmpty(withdrawId) || StringUtils.isEmpty(amount)
				|| StringUtils.isEmpty(status)){
			throw new SysException(DuoduoError.UPDATE_NO_PARAMS);
		}
		// 修改状态
		AppResult result = this.update(params);
		return result;
	}
	
	
	/**
	 * 批量审核
	 * 
	 * @param params
	 * @return
	 */
	public AppResult tjAuditAll(AppParam params) {
		String ids = (String) params.getAttr("ids");
		AppResult result = null;
		if (!StringUtils.isEmpty(ids)) {
			for (String id : ids.split(",")) {
				AppParam param = new AppParam();
				param.addAttr("withdrawId", id);
				param.setService("withdrawService");
				param.setMethod("tjAuditPass");
				param.addAttr("auditBy", params.getAttr("auditBy"));// 审核人
				result = SoaManager.getInstance().callNewTx(param);
			}
		}
		return result;
	}
	
	/**
	 * 审核通过
	 * 
	 * @param context
	 * @return
	 */
	public AppResult tjAuditPass(AppParam context) {
		AppResult resultWithdraw = queryById(context);
		
		Map<String, Object> oldRecord = resultWithdraw.getRow(0);
		Integer status = Integer.valueOf(oldRecord.get("status").toString());
		if (FundConstant.WITHDRAW_STATUS_0 != status) {
			throw new SysException("当前的状态不是待审核，当前状态为:" + status);
		}
		AppParam param = new AppParam();
		param.addAttr("status", FundConstant.WITHDRAW_STATUS_1);
		param.addAttr("auditBy", StringUtils.isEmpty(context.getAttr("auditBy")) ? DuoduoSession
				.getUserName() : context.getAttr("auditBy"));// 审核人
		param.addAttr("auditTime", new Date());
		param.addAttr("auditDesc", "审核通过");
		param.addAttr("fromStatus", status + "");
		param.addAttr("withdrawId", oldRecord.get("withdrawId"));
		return this.update(param);
	}
	
	
	/**
	 * 取消提现
	 * 
	 * @param context
	 * @return
	 */
	public AppResult tjAuditNoPass(AppParam context) {
		AppResult resultWithdraw = queryById(context);
		if (resultWithdraw.getRows().size() == 0) {
			throw new AppException(DuoduoError.UPDATE_DATA_IS_NOTEXISTS);
		}
		Map<String, Object> oldRecord = resultWithdraw.getRow(0);
		Integer status = Integer.valueOf(oldRecord.get("status").toString());
		if (FundConstant.WITHDRAW_STATUS_1 == status
				|| FundConstant.WITHDRAW_STATUS_0 == status) {
			AppParam param = new AppParam();
			param.addAttr("status", "2");// 提现取消
			param.addAttr("auditTime", new Date());
			param.addAttr("withdrawId", oldRecord.get("withdrawId"));
			param.addAttr("fromStatus", status + "");
			param.addAttr("auditDesc", context.getAttr("auditDesc"));
			AppResult result = this.update(param);
			int updateSize = Integer.valueOf(result.getAttr(
					DuoduoConstant.DAO_Update_SIZE).toString());
			if (updateSize == 1) {
				Object withdrawId = oldRecord.get("withdrawId");
				Object customerId = oldRecord.get("customerId");
				// 修改用户资金
				AppParam updateCust = new AppParam();
				updateCust.setService("custAmountService");
				updateCust.setMethod("updateRewardAmount");
				updateCust.addAttr("businessId", withdrawId);// 提现业务id
				updateCust.addAttr("customerId", customerId);
				updateCust.addAttr("amount", oldRecord.get("amount"));
				updateCust.addAttr("fundType", "tjWithdraw");
				updateCust.addAttr("recordDesc", "推荐贷款提现取消");
				updateCust.addAttr("methodName", "tjWithdrawCancel");// 方法名称
				SoaManager.getInstance().invoke(updateCust);
			}
			return result;
		}
		throw new SysException("当前的状态无法做该处理，当前状态为:" + status);
	}
	
	
	/**
	 * 提现企业付款
	 * 
	 * @param params
	 * @return
	 */
//	public AppResult corpPay(Object withdrawId, Object openid, Object amount, Object realName) {
//		AppResult result = new AppResult();
//		// 调用企业付款
//		AppParam payParam = new AppParam();
//		payParam.addAttr("partner_trade_no", withdrawId);
//		payParam.addAttr("openid", openid);
//		payParam.addAttr("amount", (int)(Double.valueOf(amount.toString()) * 100));
//		payParam.addAttr("re_user_name", realName);
//		payParam.addAttr("desc", "多多智富提现"); // 企业付款描述信息
//		Map<String, String> info = new HashMap<String, String>();
//		AppParam context = new AppParam();
//		context.addAttr("withdrawId", withdrawId);
//		try {
//			info = WXRequestUtil.corpPay(payParam);
//			// 通讯标识
//			if (WXConstants.SUCCESS.equals(info.get(WXConstants.RETURN_CODE))
//					&& WXConstants.SUCCESS.equals(info
//							.get(WXConstants.RESULT_CODE))) {
//				// 提现成功
//				this.checkPass(context);
//			} else {
//				// 提现失败
//				String errorMsg = info.get(WXConstants.RETURN_MSG).toString();
//				context.addAttr("auditDesc", errorMsg);
//				this.checkPassNo(context);
//				result.setSuccess(false);
//				result.setMessage(errorMsg);
//			}
//			return result;
//		} catch (Exception e) {
//			LogerUtil.error(this.getClass(), e, "corpPay error!");
//			this.checkPassNo(context);
//			throw new SysException(e.getMessage());
//		}
//	}
	
}
