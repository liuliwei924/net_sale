package org.xxjr.job.listener.busi;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.core.service.RemoteInvoke;
import org.ddq.common.util.DateUtil;
import org.ddq.common.util.LogerUtil;
import org.ddq.common.util.StringUtil;
import org.llw.job.core.BaseExecteJob;
import org.llw.job.util.JobConstant;
import org.llw.job.util.JobUtil;
import org.llw.model.cache.RedisUtils;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;
import org.xxjr.job.listener.busi.store.CFSDealUtil;
import org.xxjr.job.listener.busi.store.CFSUtil;
import org.xxjr.store.util.StoreApplyUtils;
import org.xxjr.sys.util.OrgUtils;
import org.xxjr.sys.util.ServiceKey;
import org.xxjr.sys.util.SysParamsUtil;

/**
 * 自动查询CFS合同编号、合同、回款
 * @author Administrator
 *
 */
@Lazy
@Component
public class AutoQueryCFSOrderJob implements BaseExecteJob{
	
	/**
	 * 自动查询CFS合同编号、进件、回款
	 * @param processId
	 * @return
	 */
	@Override
	public AppResult executeJob(AppParam param){
		AppResult result = new AppResult();
		Object processId = param.getAttr(JobConstant.KEY_processId);
		try {
			int autoCFSOrderStatus = SysParamsUtil.getIntParamByKey("autoQueryCFSOrderStatus", 1);
			if(autoCFSOrderStatus == 0){
				result.setMessage("自动查询合同、回款信息未开启!");
				result.setSuccess(false);
				return result;
			}
			LogerUtil.log("AutoQueryCFSOrderJob >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> start");
			uploadSignInfo(processId);//查询合同编号
			getContractInfo(processId);//查询合同信息
			LogerUtil.log("AutoQueryCFSOrderJob >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> end");
		} catch (Exception e) {
			LogerUtil.error(AutoQueryCFSOrderJob.class, e, "AutoQueryCFSOrderUtils >>>>>>>>>>>>>>>>>>error");
			JobUtil.addProcessExecute(processId, "自动查询 CFS合同编号、合同、回款" + e.getMessage() );
		}
		return result;
	}
	
	/**
	 * 上传签单信息到CFS获取合同编号
	 * @param processId
	 * @return
	 */
	public static AppResult uploadSignInfo(Object processId){
		AppResult result = new AppResult();
		try {
			LogerUtil.log("AutoQueryCFSOrderJob >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> start");
			AppParam queryParam = new AppParam();
			queryParam.addAttr("startTime", DateUtil.toStringByParttern(DateUtil.getNextDay(new Date(), -7), DateUtil.DATE_PATTERN_YYYY_MM_DD));
			queryParam.addAttr("endTime", DateUtil.toStringByParttern(new Date(), DateUtil.DATE_PATTERN_YYYY_MM_DD));
			int storeUploadSignInfoFlag = SysParamsUtil.getIntParamByKey("storeUploadSignInfoFlag", 0);
			if(storeUploadSignInfoFlag == 1){
				queryParam.addAttr("upStatusIn", "1,3"); //查询未上传和上传失败
			}else{
				queryParam.addAttr("upStatus", "1"); //查询未上传
			}
			queryParam.setService("treatInfoService");
			queryParam.setMethod("queryByPage");
			queryParam.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START
							+ ServiceKey.Key_busi_in));
			queryParam.setEveryPage(50);
			AppResult queryResult = RemoteInvoke.getInstance().callNoTx(queryParam);
			int currentPage =1;
			int successCount = 0;
			int failCount = 0;
			while(queryResult.getRows().size() > 0 ){
				for(Map<String, Object> queryMap : queryResult.getRows()){
					try {
						boolean orgFlag = StoreApplyUtils.isHaveAuthUpCFS(StringUtil.getString(queryMap.get("orgId")));
						if(orgFlag){
							result = CFSDealUtil.upLoadCFSDeal(null,null,queryMap);
							if (result.isSuccess()) {
								successCount ++;
							}else{
								failCount ++;
							}
						}
					} catch (Exception e) {
						LogerUtil.error(AutoQueryCFSOrderJob.class, e, "uploadSignInfo >>>>>>>>>>>>>>>>>>error");
					}
				}
				currentPage ++;
				queryParam.setCurrentPage(currentPage);
				queryResult = RemoteInvoke.getInstance().callNoTx(queryParam);
			}
			LogerUtil.log("上传签单信息到CFS获取合同编号:"+result.getMessage());
			JobUtil.addProcessExecute(processId, " 自动查询 CFS合同编号 AutoQueryCFSOrderJob msg：成功笔数:"+ successCount +"，失败笔数：" + failCount);
			LogerUtil.log("AutoQueryCFSOrderJob >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> end");
		} catch (Exception e) {
			LogerUtil.error(AutoQueryCFSOrderJob.class, e, "uploadSignInfo >>>>>>>>>>>>>>>>>>error");
		}
		
		return result;
	}
	
	/**
	 * 查询CFS获取合同信息
	 * @param processId
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public static AppResult getContractInfo(Object processId){
		AppResult result = new AppResult();
		try {
			LogerUtil.log("AutoQueryCFSOrderJob >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> start");
			String cFSQueryDateStatus = SysParamsUtil.getStringParamByKey("cFSQueryDateStatus","");
			String  startDate = "";
			if(!StringUtils.isEmpty(cFSQueryDateStatus) && cFSQueryDateStatus.length() == 10){
				startDate = cFSQueryDateStatus;
			}else{
				long nowTime = new Date().getTime();
				Calendar cal = Calendar.getInstance();
				cal.set(Calendar.HOUR_OF_DAY, 3);
				cal.set(Calendar.MINUTE, 0);
				cal.set(Calendar.SECOND, 0);
				long startWorkTime = cal.getTime().getTime(); 
				if(nowTime > startWorkTime){
					startDate = DateUtil.getSimpleFmt(new Date());
				}else{
					startDate = DateUtil.toStringByParttern(DateUtil.getNextDay(new Date(), -1), DateUtil.DATE_PATTERN_YYYY_MM_DD);
				}
				
			}
			int successConCount = 0;
			int failConCount = 0;
			int successCFSCount = 0;
			int failCFSCount = 0;
			List<Map<String, Object>> orgList= OrgUtils.getIsNetOrgList();
			for(Map<String, Object> orgMap : orgList){
				AppParam cfsParam = new AppParam();
				cfsParam.addAttr("orgNo", orgMap.get("orgNo"));
				cfsParam.addAttr("startDate", startDate);
				Map<String, Object> updateMap = CFSUtil.getUpdateContract(cfsParam); //查询有更新的合同
				List<String> contractIdList = new ArrayList<String>();
				if(StringUtils.isEmpty(updateMap.get("listString"))){
					continue;
				}else{
					contractIdList = (List<String>)updateMap.get("listString");
				}
				AppParam queryParam = new AppParam();
				queryParam.addAttr("orgId", orgMap.get("orgId"));
				queryParam.addAttr("upStatus", "2"); //查询已上传
				queryParam.setService("treatInfoService");
				queryParam.setMethod("query");
				queryParam.setRmiServiceName(AppProperties
						.getProperties(DuoduoConstant.RMI_SERVICE_START
								+ ServiceKey.Key_busi_in));
				AppResult queryResult = RemoteInvoke.getInstance().callNoTx(queryParam);
				List<String> reContractIdList = new ArrayList<String>();
				for(Map<String, Object> queryMap : queryResult.getRows()){
					reContractIdList.add(StringUtil.getString(queryMap.get("reContractId")));
				}
				
				for(String contractId :contractIdList){
					if(!reContractIdList.contains(contractId)){
						AppParam param = new AppParam();
						param.addAttr("reContractId", contractId);
						param.addAttr("orgId", orgMap.get("orgId"));
						Map<String, Object> resultMap = CFSUtil.getContractInfo(param); //查询合同
						String executeResult = StringUtil.getString(resultMap.get("ExecuteResult"));
						String resturnMsg = StringUtil.getString(resultMap.get("ReturnMsg"));
						String errorMsg = StringUtil.getString(resultMap.get("errorMsg"));
						if("true".equals(executeResult)){
							result.setMessage("查询CFS获取合同信息成功");
						}else{
							result.setMessage(errorMsg);
							if(StringUtils.isEmpty(errorMsg)) {
								result.setMessage(resturnMsg);
							}
							result.setSuccess(Boolean.FALSE);
						}
						
						if (result.isSuccess()) {
							successCFSCount ++;
						}else{
							failCFSCount ++;
						}
					}else{
						for(Map<String, Object> queryMap : queryResult.getRows()){
							String reContractId = contractId;
							String applyId = "";
							String customerId ="";
							if(contractId.equals(queryMap.get("reContractId"))){
								applyId = StringUtil.getString(queryMap.get("applyId"));
								customerId = StringUtil.getString(queryMap.get("customerId"));
								AppParam param = new AppParam();
								param.addAttr("reContractId", reContractId);
								param.addAttr("applyId", applyId);
								param.addAttr("orgId", orgMap.get("orgId"));
								param.addAttr("customerId", customerId);
								Map<String, Object> resultMap = CFSUtil.getContractInfo(param); //查询合同
								String executeResult = StringUtil.getString(resultMap.get("ExecuteResult"));
								String resturnMsg = StringUtil.getString(resultMap.get("ReturnMsg"));
								String errorMsg = StringUtil.getString(resultMap.get("errorMsg"));
								if("true".equals(executeResult)){
									result.setMessage("查询CFS获取合同信息成功");
								}else{
									result.setMessage(errorMsg);
									if(StringUtils.isEmpty(errorMsg)) {
										result.setMessage(resturnMsg);
									}
									result.setSuccess(Boolean.FALSE);
								}
								
								if (result.isSuccess()) {
									successConCount ++;
								}else{
									failConCount ++;
								}
								
							}
						}
					}
				}
			}
			// 判断是否执行成功
			if(successConCount > 0){
				RedisUtils.getRedisService().set(SysParamsUtil.StartParamKey + "cFSQueryDateStatus",1);
			}
			LogerUtil.log("查询CFS获取合同信息:"+result.getMessage());
			JobUtil.addProcessExecute(processId, " 自动查询 CFS合同、回款信息 AutoQueryCFSOrderJob msg：成功合同笔数：" + successConCount +"，"
					+ "失败合同笔数：" +failConCount +",成功CFS合同笔数：" + successCFSCount +"，失败CFS合同笔数：" + failCFSCount);
			LogerUtil.log("AutoQueryCFSOrderJob >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> end");
		} catch (Exception e) {
			LogerUtil.error(AutoQueryCFSOrderJob.class, e, "getContractInfo >>>>>>>>>>>>>>>>>>error");
		}
		
		return result;
	}
}
