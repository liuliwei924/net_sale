package org.xxjr.cust.member;

import java.util.Date;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppResult;
import org.ddq.common.core.service.BaseService;
import org.ddq.common.exception.AppException;
import org.ddq.common.exception.DuoduoError;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

@Lazy
@Service
public class CustRobConfigService extends BaseService {
	private static final String NAMESPACE = "CUSTROBCONFIG";

	/**
	 * querys
	 * @param params
	 * @return
	 */
	public AppResult query(AppParam params) {
		return super.query(params, NAMESPACE);
	}
	
	/**
	 * queryByPage
	 * @param params
	 * @return
	 */
	public AppResult queryByPage(AppParam params) {
		return super.queryByPage(params, NAMESPACE);
	}
	
	/**
	 * queryCount
	 * @param params
	 * @return
	 */
	public AppResult queryCount(AppParam params) {
		int size = getDao().count(NAMESPACE, super.COUNT,params.getAttr(),params.getDataBase());
		AppResult result = new AppResult();
		result.putAttr(DuoduoConstant.TOTAL_SIZE, size);
		return result;
	}
	
	/**
	 * queryInviteRobInfo
	 */
	public AppResult queryInviteRobInfo(AppParam params) {
        return this.queryByPage(params, NAMESPACE, "queryInviteRobInfo", "queryInviteRobInfoCount");
	}
	
	/**
	 * insert
	 * @param params
	 * @return
	 */
	public AppResult insert(AppParam params) {
		params.addAttr("createTime", new Date());
		return super.insert(params, NAMESPACE);
	}
	
	/**
	 * update
	 * @param params
	 * @return
	 */
	public AppResult update(AppParam params) {
		params.addAttr("updateTime", new Date());
		return super.update(params, NAMESPACE);
	}
	
	/**
	 * delete
	 * @param params
	 * @return
	 */
	public AppResult delete(AppParam params) {
		String ids = (String) params.getAttr("ids");
		AppResult  result = null;
		if (!StringUtils.isEmpty(ids)) {
			for (String id : ids.split(",")) {
				AppParam param = new AppParam();
				param.addAttr("customerId", id);
				
				result = super.delete(param, NAMESPACE);
			}
		} else if (!StringUtils.isEmpty(params.getAttr("customerId"))) {
			result = super.delete(params, NAMESPACE);
		} else {
			throw new AppException(DuoduoError.DELETE_NO_ID);
		}
		return result;
	}
	
	/**
	 * 查询信贷经理或其推荐人的免单券配置
	 * @param params
	 * @return
	 */
	public AppResult queryConfig(AppParam params){
		return super.query(params, NAMESPACE, "queryConfig");
	}
	
	/**
	 * 新增/修改信贷经理的免单券配置
	 * @param params
	 * @return
	 */
	public AppResult setTicketConfig(AppParam params) {
		AppResult result = new AppResult();
		Object customerId = params.getAttr("customerId");
		if(StringUtils.isEmpty(customerId)){
			throw new AppException(DuoduoError.UPDATE_NO_PARAMS);
		}
		AppParam queryParam = new AppParam();
		queryParam.addAttr("customerId", customerId);
		AppResult queryResult = this.queryCount(queryParam);
		int totalSize = Integer.valueOf(queryResult.getAttr(DuoduoConstant.TOTAL_SIZE).toString());
		if (totalSize > 0) {
			result = this.update(params);
		}else {
			result = this.insert(params);
			result.putAttr(DuoduoConstant.DAO_Update_SIZE, result.getAttr("insertSize"));
		}
		return result;
	}
	
	/**
	 * 取消信贷经理的免单券配置
	 * @param params
	 * @return
	 */
	public AppResult batchCancelCfg(AppParam params){
		Object custIds = params.getAttr("custIds");
		if (StringUtils.isEmpty(custIds)) {
			throw new AppException(DuoduoError.UPDATE_NO_PARAMS);
		}
		int count = getDao().update(NAMESPACE, "batchCancelCfg", params.getAttr(), params.getDataBase());
		AppResult result = new AppResult();
		result.putAttr(DuoduoConstant.DAO_Update_SIZE, count);
		return result;
	}
	
	/**
	 * 根据城市设置信贷经理的免单券配置
	 * @param params
	 * @return
	 */
	public AppResult setTicketCfgByCityName(AppParam params){
		AppResult result = new AppResult();
		int count = getDao().update(NAMESPACE, "setTicketCfgByCityName", params.getAttr(), params.getDataBase());
		if (count > 0) {
			params.addAttr("updateTime", new Date());
			result = this.query(params, NAMESPACE,"queryCustByCityName");
		}
		result.putAttr(DuoduoConstant.DAO_Update_SIZE, result.getRows().size());
		return result;
	}
	
	/**
	 * 根据城市取消配置信贷经理的免单券配置
	 * @param params
	 * @return
	 */
	public AppResult cancelCfgByCityName(AppParam params){
		AppResult result = new AppResult();
		AppParam queryParam = new AppParam();
		queryParam.addAttr("cityName", params.getAttr("cityName"));
		queryParam.addAttr("status", 1);
		result = this.query(queryParam, NAMESPACE,"queryCustByCityName");
		int count = 0;
		if (result.getRows().size() > 0) {
			count = super.getDao().update(NAMESPACE, "cancelCfgByCityName", params.getAttr(), params.getDataBase());
		}
		result.putAttr(DuoduoConstant.DAO_Update_SIZE, count);
		return result;
	}
	
}
