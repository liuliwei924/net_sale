package org.xxjr.mq.listener.receiver;

import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.annotation.PreDestroy;

import org.ddq.active.mq.XxjrMqSendUtil;
import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.util.DateUtil;
import org.ddq.common.util.LogerUtil;
import org.llw.ddq.mq.rabbitmq.RabbitMqConfig;
import org.ddq.common.core.service.RemoteInvoke;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.xxjr.mq.listener.consumer.RabbitMqConsumer;
import org.xxjr.mq.listener.util.XxjrInitAnnotation;
import org.xxjr.sys.util.NumberUtil;
import org.xxjr.sys.util.ServiceKey;
import org.xxjr.sys.util.SysParamsUtil;


/***
 * 执行转单处理
 *
 */
@Component
@XxjrInitAnnotation(beanName="transferSaleReceiver",initMethod="init")
public class TransferSaleReceiver extends RabbitMqConsumer{
	
	@Autowired
	private RabbitMqConfig rabbitMqConfig;
	
	@Value("${rabbit.queue.transferSale}")
	private String queueName;

	public void onMessage(Map<String, Object> param) {
		try {
			Date now = null;
			try {
				now = (Date) param.get("now");
				if (now == null) {
					now = new Date();
				}
			} catch (Exception e) {
				now = new Date();
			}
			LogerUtil.log("TransferSaleReceiver execDataTime :" + DateUtil.toStringByParttern(now, DateUtil.DATE_PATTERN_YYYY_MM_DD_HHMMSS));
			int minChangeNum = SysParamsUtil.getIntParamByKey("dai_borrow_min_changeNum", 5);
			double minChangeHour = Double.parseDouble(SysParamsUtil.getStringParamByKey("dai_borrow_min_changeTime", "0.5"));
			double minChangeMinutes = minChangeHour * 60;
			Date updateLockTime = DateUtil.getNextMinutes(now, -(int)(minChangeMinutes));
			AppParam queryParam = new AppParam("daiBorrowExtService","queryCountByCity");
			queryParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_busi));
			queryParam.addAttr("updateLockTime", DateUtil.toStringByParttern(updateLockTime, DateUtil.DATE_PATTERN_YYYY_MM_DD_HHMMSS));
			queryParam.addAttr("status", "0");
			queryParam.addAttr("isLock", "0");
			AppResult cityCountResult= RemoteInvoke.getInstance().call(queryParam);
			List<Map<String, Object>> countList = cityCountResult.getRows();
			int firstCount;
			int secondCount;
			int minCityNum; 
			int changeNum;
			int count = 0;
			AppResult result = null;
			LocalDateTime start = LocalDateTime.now();
			for (int i = 0, size = countList.size() - 1; i < size; i++) {
				if(countList.get(i).get("cityName").equals(countList.get(i+1).get("cityName"))){
					firstCount = NumberUtil.getInt(countList.get(i).get("cityCount"));
					secondCount = NumberUtil.getInt(countList.get(i + 1).get("cityCount"));
					minCityNum = firstCount > secondCount ? secondCount : firstCount;
					changeNum = minCityNum > minChangeNum ? minChangeNum : minCityNum;
					Boolean flag = SysParamsUtil.getBoleanByKey("transferSale_notLock_flag", false);
					AppParam changeParam = new AppParam("daiBorrowExtService", flag ? "changeByCityNew" : "changeByCity");
					changeParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_busi));
					changeParam.addAttr("status", "0");
					changeParam.addAttr("isLock", "0");
					changeParam.addAttr("updateLockTime", DateUtil.toStringByParttern(updateLockTime, DateUtil.DATE_PATTERN_YYYY_MM_DD_HHMMSS));
					changeParam.addAttr("limit", changeNum);
					changeParam.addAttr("cityName", countList.get(i).get("cityName"));
					result = RemoteInvoke.getInstance().call(changeParam);
					LogerUtil.log(countList.get(i).get("cityName") + "转"
							+ changeNum + "单，实际转信贷经理"
							+ result.getAttr("mjbUpdateSize") + "单，转马甲包"
							+ result.getAttr("xdjlUpdateSize") + "单");
					count++;
				}
			}
			LocalDateTime end = LocalDateTime.now();
			LogerUtil.log("TransferSaleReceiver end timeout:" +end.until(start, ChronoUnit.SECONDS) +" 一共处理了" +count+"个城市");
		} catch (Exception e) {
			LogerUtil.error(TransferSaleReceiver.class, e, "TransferSaleReceiver execute error!");
			XxjrMqSendUtil.saveFailureLog("TransferSaleReceiver", param);
		}
	}

	@Override
	public void init(String queueName ,RabbitMqConfig rabbitMqConfig) {
		super.init(queueName,rabbitMqConfig);
	}
	
    public void init() {
		init(queueName,rabbitMqConfig);
	}
	
	@PreDestroy
	public void destroy(){
		reaseResource();
	}
	
}
