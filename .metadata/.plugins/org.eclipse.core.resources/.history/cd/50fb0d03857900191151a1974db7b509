package org.xxjr.job.listener.busi.kf;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.ddq.active.mq.message.CustMessageSend;
import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.core.SpringAppContext;
import org.ddq.common.util.LogerUtil;
import org.ddq.common.util.StringUtil;
import org.llw.ddq.job.core.BaseExecteJob;
import org.llw.ddq.job.util.JobConstant;
import org.llw.ddq.job.util.JobUtil;
import org.ddq.common.core.service.RemoteInvoke;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;
import org.xxjr.cust.util.info.CustomerIdentify;
import org.xxjr.job.listener.busi.OverTimeApplyUtil;
import org.xxjr.sys.util.ServiceKey;


/**
 * 单子未处理的任务
 *
 */
@Lazy
@Component
public class JobNotifyNoHand implements BaseExecteJob {
	
	@Override
	public AppResult executeJob(AppParam param) {
		LogerUtil.log("JobNotifyNewApply>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> start");
		Object processId = param.getAttr(JobConstant.KEY_processId);
		//通知客服
		kfUnHand(processId);
		
		//超过一周未抢的单子做过时处理
		OverTimeApplyUtil.notify(processId);
		return new AppResult();
	}

	
	
	public static void kfUnHand(Object processId){

		LogerUtil.log("KfSelfUnHandleJob>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> start");
		AppResult successresult = new AppResult();
		StringBuilder sb = new StringBuilder();
		
		AppParam queryParam = new AppParam("borrowApplyService", "kfSelfUnHandle");
		queryParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_busi_in));
		AppResult result = RemoteInvoke.getInstance().callNoTx(queryParam);
		
		List<Map<String,Object>> handleList = result.getRows();
		if(handleList.size() > 0){
			CustMessageSend messageSend = (CustMessageSend) SpringAppContext.getBean(CustMessageSend.class);
			
			for(Map<String, Object> handleMap : handleList){
				try{
					int unHandleCount = Integer.parseInt(handleMap.get("unHandleCount").toString());
					String lastKf = handleMap.get("lastKf").toString();
					Map<String, Object> paramsMap = new HashMap<String, Object>();
					
					Map<String,Object> custMap = CustomerIdentify.getCustIdentify(lastKf);
					String realName = StringUtil.getString(custMap.get("realName"));
					
					paramsMap.put("realName", realName);
					paramsMap.put("unHandleCount", unHandleCount);
					
					//推送消息
					messageSend.sendCustMessage(lastKf, "kfSelfUnHandle", paramsMap);
					//
					JobUtil.addProcessExecute(processId, "用户【" + realName + "】 有" + unHandleCount + "锁订单待处理--" );
				}catch(Exception e){
					LogerUtil.error(JobNotifyNoHand.class, e, "KfSelfUnHandleJob error lastKf" + handleMap.get("lastKf").toString());
					JobUtil.addProcessExecute(processId, "用户【" + handleMap.get("lastKf").toString() + "】通知出错：" +e.getMessage() );
				}
			}
		}
		
		successresult.setMessage(sb.toString());
		LogerUtil.log("KfSelfUnHandleJob>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> end");
	
	}
}
