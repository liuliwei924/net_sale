package org.xxjr.job.listener.busi.sum.util;

import java.util.List;
import java.util.Map;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.util.LogerUtil;
import org.llw.ddq.job.util.JobUtil;
import org.ddq.common.core.service.RemoteInvoke;
import org.springframework.util.StringUtils;
import org.xxjr.sys.util.NumberUtil;
import org.xxjr.sys.util.ServiceKey;

/**
 * 
 * 挂卖统计工具类
 * @author ZQH
 *
 */
public class SaleSumUtil {

	/**
	 * 渠道挂卖统计
	 * @param processId
	 * @param today
	 */
	public static void channelSale(Object processId, String today) {
		AppResult result = new AppResult();
		try {
			LogerUtil.log("SaleSumUitl channelSale>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> start");
			//获取统计数据
			AppParam queryParam = new AppParam("sumUtilExtService","saleByChannel");
			queryParam.addAttr("recordDate", today);
			queryParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_busi_in));
			result = RemoteInvoke.getInstance().call(queryParam);
			List<Map<String,Object>> dataList = result.getRows();
			int size = 0;
			if(dataList.size()>0){
				//将统计数据插入统计表
				AppParam insertParam = new AppParam("sumSaleChannelService","save");
				insertParam.addAttr("today", today);
				insertParam.addAttr("list", dataList);
				insertParam.setRmiServiceName(AppProperties
						.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sum));
				result = RemoteInvoke.getInstance().callNoTx(insertParam);
				size =NumberUtil.getInt(result.getAttr(DuoduoConstant.DAO_Insert_SIZE), 0);
			}
			LogerUtil.log("SaleSumUitl channelSale >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> end insert count=" +size);
		} catch (Exception e) {
			LogerUtil.error(SaleSumUtil.class,e, "SaleSumUitl channelSale error");
			JobUtil.addProcessExecute(processId, "统计渠道挂卖数据 报错：" + e.getMessage() );
		}
	}
	
	
	/**
	 * 客服挂卖统计
	 * @param processId
	 * @param today
	 */
	public static void kfSale(Object processId, String today, String isSummaryKf) {
		AppResult result = new AppResult();
		try {
			LogerUtil.log("SaleSumUitl kfSale>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> start");
			if(StringUtils.isEmpty(today) || StringUtils.isEmpty(isSummaryKf)){
				LogerUtil.log("SaleSumUitl kfSale>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 传入的参数有误：today="+today+",isSummaryKf="+isSummaryKf);
				return;
			}
			//获取统计数据
			AppParam queryParam = new AppParam("sumUtilExtService","saleSumaryByKf");
			queryParam.addAttr("isSummaryKf", isSummaryKf);
			queryParam.addAttr("recordDate", today);
			queryParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_busi_in));
			result = RemoteInvoke.getInstance().call(queryParam);
			List<Map<String,Object>> dataList = result.getRows();
			int size = 0;
			if(dataList.size()>0){
				//将统计数据插入统计表
				AppParam insertParam = new AppParam("sumSaleKfService","save");
				insertParam.addAttr("today", today);
				insertParam.addAttr("list", dataList);
				insertParam.setRmiServiceName(AppProperties
						.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sum));
				result = RemoteInvoke.getInstance().callNoTx(insertParam);
				size =NumberUtil.getInt(result.getAttr(DuoduoConstant.DAO_Insert_SIZE), 0);
			}
			LogerUtil.log("SaleSumUitl kfSale >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> end insert count=" +size);
		} catch (Exception e) {
			LogerUtil.error(SaleSumUtil.class,e, "SaleSumUitl kfSale error");
			JobUtil.addProcessExecute(processId, "统计客服挂卖数据 报错：" + e.getMessage() );
		}
	}
	
	
	/**
	 * 挂卖基本统计
	 * @param processId
	 * @param today
	 */
	public static void saleByBase(Object processId, String today) {
		AppResult result = new AppResult();
		try {
			LogerUtil.log("SaleSumUitl saleByBase>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> start");
			//获取统计数据
			AppParam queryParam = new AppParam("sumUtilExtService","saleByBase");
			queryParam.addAttr("recordDate", today);
			queryParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_busi_in));
			result = RemoteInvoke.getInstance().call(queryParam);
			List<Map<String,Object>> dataList = result.getRows();
			int size = dataList.size();
			if(size > 0){
				Map<String,Object> paramsMap = dataList.get(0);
				//将统计数据插入统计表
				AppParam insertParam = new AppParam("sumSaleBaseService","save");
				insertParam.addAttrs(paramsMap);
				insertParam.setRmiServiceName(AppProperties
						.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sum));
				result = RemoteInvoke.getInstance().callNoTx(insertParam);
				size =NumberUtil.getInt(result.getAttr(DuoduoConstant.DAO_Insert_SIZE), 0);
			}
			LogerUtil.log("SaleSumUitl saleByBase >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> end insert count=" +size);
		} catch (Exception e) {
			LogerUtil.error(SaleSumUtil.class,e, "SaleSumUitl saleByBase error");
			JobUtil.addProcessExecute(processId, "按时间挂卖统计 报错：" + e.getMessage() );
		}
	}
	
	/**
	 * 退款倒推挂卖重新统计
	 * 更新挂卖失败量和金额
	 * @param processId
	 */
	public static void updateFailSale (Object processId) {
		AppResult result = new AppResult();
		try {
			LogerUtil.log("SaleSumUtil updateFailSale>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> start");
			AppParam queryParam = new AppParam("sumUtilExtService","queryNowRefundDate");
			queryParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_busi_in));
			result = RemoteInvoke.getInstance().callNoTx(queryParam);
			if (result.getRows().size() <= 0) {
				LogerUtil.log("SaleSumUtil updateFailSale>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> end");
				return;
			}
			List<Map<String, Object>> recordDates = result.getRows();
			queryParam.setMethod("queryChannelRefund");
			queryParam.addAttr("recordDates", recordDates);
			result = RemoteInvoke.getInstance().callNoTx(queryParam);
			if (result.getRows().size() > 0) {//更新渠道的
				AppParam updateParam = new AppParam("sumSaleChannelService","batchUpdate");
				updateParam.addAttr("list", result.getRows());
				updateParam.setRmiServiceName(AppProperties
						.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sum));
				result = RemoteInvoke.getInstance().callNoTx(updateParam);
				int size = NumberUtil.getInt(result.getAttr(DuoduoConstant.DAO_Update_SIZE), 0);
				LogerUtil.log("SaleSumUtil channelSale >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> end batchUpdate count=" +size);
			}
			queryParam.setMethod("queryBaseRefund");
			result = RemoteInvoke.getInstance().callNoTx(queryParam);
			if (result.getRows().size() > 0) {//更新基本的
				AppParam updateParam = new AppParam("sumSaleBaseService","batchUpdate");
				updateParam.addAttr("list", result.getRows());
				updateParam.setRmiServiceName(AppProperties
						.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sum));
				result = RemoteInvoke.getInstance().callNoTx(updateParam);
				int size = NumberUtil.getInt(result.getAttr(DuoduoConstant.DAO_Update_SIZE), 0);
				LogerUtil.log("SaleSumUtil baseSale >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> end batchUpdate count=" +size);
			}
			LogerUtil.log("SaleSumUtil updateFailSale>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> end");
		} catch (Exception e) {
			LogerUtil.error(SaleSumUtil.class,e, "SaleSumUtil updateFailSale error");
			JobUtil.addProcessExecute(processId, "更新渠道和基本失败数,失败金额 报错：" + e.getMessage() );
		}
		
	}
}
