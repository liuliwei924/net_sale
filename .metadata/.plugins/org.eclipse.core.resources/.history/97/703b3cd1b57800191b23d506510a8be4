package org.ddq.active.mq.activity;

import java.util.HashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.ddq.active.mq.MQNames;
import org.ddq.active.mq.XxjrMqSendUtil;
import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.core.service.RemoteInvoke;
import org.ddq.common.exception.AppException;
import org.ddq.common.exception.ExceptionUtil;
import org.ddq.common.util.LogerUtil;
import org.ddq.common.web.session.DuoduoSession;
import org.springframework.util.StringUtils;
import org.xxjr.cust.util.CustConstant;
import org.xxjr.cust.util.ShowErrorCode;
import org.xxjr.cust.util.info.CustomerIdentify;
import org.xxjr.cust.util.info.CustomerUtil;
import org.xxjr.cust.util.invite.CustInviteUtil;
import org.xxjr.sys.util.active.ActiveConstants;
import org.xxjr.sys.util.active.ActiveUtil;

/**
 * 活动奖励
 * @author Administrator
 *
 */
public class RewardUtil {
	
	/**提成结算/审核没有参数**/
	public static final int REWARD_NO_PARAM = 1018;
/***25000 - 26000***/ 
	
	/**
	 * 分享类别   分享资讯
	 */
	public final static String SHARE_TYPE_NEWS = "2";
	
	
	/**
	 * 获取rewardValue
	 * @param context
	 * @return
	 */
	public static int getRewardValue(AppParam context) {
		// 奖励必要的参数
		if (StringUtils.isEmpty(context.getAttr("rewardValue"))) {
			throw new AppException(ShowErrorCode.REWARD_NO_KEY_rewardValue);
		}
		// 奖励必要的参数
		if (StringUtils.isEmpty(context.getAttr("customerId"))) {
			throw new AppException(ShowErrorCode.REWARD_NO_KEY_customerId);
		}
		String reardValue = context.getAttr("rewardValue").toString();
		if (reardValue.indexOf("{") >= 0) {
			Pattern formatEmail = Pattern.compile("\\{([^\\}]+)\\}");
			Matcher matcherEmail = formatEmail.matcher(reardValue);
			if (matcherEmail.find()) {
				reardValue = matcherEmail.group(1);
				try {
					reardValue = context.getAttr(reardValue).toString();
				} catch (Exception e) {
					throw new AppException(ShowErrorCode.REWARD_rewardValue_isERROR);
				}
			}else{
				throw new AppException(ShowErrorCode.REWARD_rewardValue_isERROR);
			}
		}
		int value = 0;
		try {
			value = Double.valueOf(reardValue).intValue();
		} catch (Exception e) {
			throw new AppException(ShowErrorCode.REWARD_rewardValue_isERROR);
		}
		return value;
	}
	
	
	/**
	 * 签到奖励不走mq,直接奖励
	 * @param customerId
	 * @param signinDays
	 */
	public static AppResult rewardSigninDirect(Object customerId, Object signinDays){
		AppParam activeParam = new AppParam();
		activeParam.addAttr("type", "1");
		activeParam.addAttr("customerId", customerId);
		activeParam.addAttr(ActiveConstants.KEY_PARAM_operator, ActiveConstants.Operator_SIGN);
		activeParam.addAttr("signinKey", "signin");
		activeParam.addAttr("signinDays", signinDays);
		activeParam.addAttr("createDesc", "签到获取");
		AppResult result = new AppResult();
		try{
			result = ActiveUtil.invokeActive(activeParam);
		} catch (Exception e) {
			LogerUtil.error(RewardUtil.class, e, "rewardSigninDirect error!");
			ExceptionUtil.setExceptionMessage(e, result, DuoduoSession.getShowLog());
		}
		return result;
	}
	
	/**
	 * 维护客户资料奖励积分、经验值
	 * @param customerId
	 */
	public static void rewardContact(Object customerId){
		// 每天只有前5次添加才增加积分经验值
		AppParam checkParam = new AppParam();
		checkParam.setService("rewardLogService");
		checkParam.setMethod("query");
		checkParam.addAttr("checkTime", "1");
		checkParam.addAttr("type", CustConstant.SCORE_TYPE_8);
		checkParam.addAttr("customerId", customerId);
		checkParam.setRmiServiceName(AppProperties.
				getProperties(DuoduoConstant.RMI_SERVICE_START+"cust"));
		AppResult checkResult = RemoteInvoke.getInstance().callNoTx(checkParam);
		if(checkResult.getRows().size() >= 5){
			return;
		}
		
		Map<String,Object> attr = new HashMap<String,Object>();
		attr.put("customerId", customerId);
		attr.put("type", "8");
		AppResult result = addRewardLog(attr);
		if(result.isSuccess()){
			Map<String,Object> map = new HashMap<String,Object>();
			map.put("customerId", CustomerUtil.getCustId());
			map.put("type", CustConstant.SCORE_TYPE_8);
			map.put(ActiveConstants.KEY_PARAM_operator, ActiveConstants.Operator_CONTACT);
			map.put("contactKey", "contact");
			map.put("createDesc", "维护客户资料获取");
			try {
				XxjrMqSendUtil.sendMessage(map, MQNames.custActive);
			} catch (Exception e) {
				LogerUtil.error(RewardUtil.class, e, "rewardContact error!");
				XxjrMqSendUtil.saveFailureLog("rewardContact", map);
			}	
		}
	}
	
	/**
	 * 实名认证奖励
	 * @param customerId
	 */
	public static void rewardIdentify(Object customerId){
		if(CustInviteUtil.isInActive()){
			rewardIdentifyNew(customerId, CustConstant.SCORE_TYPE_6);
		}else{
			Map<String,Object> map = new HashMap<String,Object>();
			map.put("customerId", customerId);
			map.put("type", "2");
			map.put(ActiveConstants.KEY_PARAM_operator, ActiveConstants.Operator_Identify);
			map.put("identifyKey", "identify");
			map.put("createDesc", "实名认证获取");
			try {
				XxjrMqSendUtil.sendMessage(map, MQNames.custActive);
			} catch (Exception e) {
				LogerUtil.error(RewardUtil.class, e, "rewardIdentify error!");
				XxjrMqSendUtil.saveFailureLog("rewardIdentify", map);
			}	
			//推荐人奖励
			RewardRefererUtil.rewardIdentifyReferer(customerId.toString());
		}
	}
	
	/**
	 * 工作认证奖励
	 * @param customerId
	 */
	public static void rewardIdentifyCard(Object customerId){
		if(CustInviteUtil.isInActive()){
			rewardIdentifyNew(customerId, CustConstant.SCORE_TYPE_17);
		}else{
			Map<String, Object> userMap = CustomerIdentify.getCustIdentify(customerId.toString());
			// 无推荐人获取30积分
			if(StringUtils.isEmpty(userMap.get("referer"))){
				Map<String,Object> map = new HashMap<String,Object>();
				map.put("customerId", customerId);
				map.put("type", "2");
				map.put(ActiveConstants.KEY_PARAM_operator, "identifyCard");
				map.put("identifyKey", "identify");
				map.put("createDesc", "工作认证获取");
				try {
					XxjrMqSendUtil.sendMessage(map, MQNames.custActive);
				} catch (Exception e) {
					LogerUtil.error(RewardUtil.class, e, "rewardIdentifyCard error!");
					XxjrMqSendUtil.saveFailureLog("rewardIdentifyCard", map);
				}	
			}else{
				// 赠送一张价值35元抢单券 -- 本人:1张免单券+1张5折抢单券
				if(CustInviteUtil.inviteActivityIsInActive()){
					Map<String,Object> rewardMap = new HashMap<String,Object>();
					rewardMap.put("identifyKey", "identify");
					rewardMap.put(ActiveConstants.KEY_PARAM_operator, "identifyCardSendTickey");
					rewardMap.put("identifyCardKey", "rewardTicket");
					rewardMap.put("activityType", "2");//活动类型 1-送免单券 2-邀请有奖
					rewardMap.put("customerId", customerId);
					rewardMap.put("type", CustInviteUtil.TICKET_TYPE_IDENTIFYCARD);
					rewardMap.put("infoType", "1");
					rewardMap.put("createDesc", "工作认证获取");
					sendReward(rewardMap);
					
					//推荐人奖励
					RewardRefererUtil.rewardIdentifyCardReferer(customerId);
				}
			}
		}
	}
	
	/**
	 * 新的实名认证奖励规则
	 * @param customerId
	 * @param ideintifyType
	 */
	public static void rewardIdentifyNew(Object customerId, String ideintifyType){
		boolean isIdentifyCard = false;
		if(CustConstant.SCORE_TYPE_17.equals(ideintifyType)){
			isIdentifyCard = true;
		}
		String newRewardType = isIdentifyCard ? "2" : "1";
		Map<String,Object> map = new HashMap<String,Object>();
		map.put("selfId", customerId);
		map.put("customerId", customerId);
		map.put("type", "2");
		map.put("newRewardType", newRewardType);
		map.put(ActiveConstants.KEY_PARAM_operator, isIdentifyCard ? ActiveConstants.Operator_IdentifyCard 
					: ActiveConstants.Operator_Identify);
		map.put("identifyKey", "identify");
		map.put("createDesc", isIdentifyCard ? "工作认证获取":"实名认证获取");
		sendReward(map);
		
		// 推荐人奖励
		Map<String, Object> userMap = CustomerIdentify.getCustIdentify(customerId.toString());
		Object referer = userMap.get("referer");
		if(!StringUtils.isEmpty(referer)){
			// 奖励积分
			Map<String,Object> refererMap = new HashMap<String,Object>();
			refererMap.put("selfId", customerId);
			refererMap.put("newRewardType", newRewardType);
			refererMap.put("customerId", referer);
			refererMap.put("type", CustConstant.SCORE_TYPE_6);
			refererMap.put(ActiveConstants.KEY_PARAM_operator, isIdentifyCard ? ActiveConstants.Operator_IdentifyCard 
					: ActiveConstants.Operator_Identify);
			refererMap.put("refererKey", "referer");
			refererMap.put("createDesc", isIdentifyCard ?"一级好友工作认证":"一级好友实名认证");
			sendReward(refererMap);
			
			if(isIdentifyCard){
				// 赠送直接推荐人抢单券
				Map<String,Object> refererOrderMap = new HashMap<String,Object>();
				refererOrderMap.put("customerId", referer);
				refererOrderMap.put("selfId", customerId);
				refererOrderMap.put("newRewardType", newRewardType);
				refererOrderMap.put("type", CustInviteUtil.TICKET_TYPE_RECOMMEND);
				refererOrderMap.put(ActiveConstants.KEY_PARAM_operator, ActiveConstants.Operator_IdentifyCardTicket);
				refererOrderMap.put("refererIdentifyKey", "refererIdentify");
				refererOrderMap.put("createDesc", "一级好友工作认证");
				sendReward(refererOrderMap);
			}
		}
		// 奖励间接推荐人一笔订单且奖励10积分
		Object refererTwo = userMap.get("refererTwo");
		if(!StringUtils.isEmpty(refererTwo)){
			// 赠送积分
			Map<String,Object> refererMap = new HashMap<String,Object>();
			refererMap.put("newRewardType", newRewardType);
			refererMap.put("customerId", refererTwo);
			refererMap.put("selfId", customerId);
			refererMap.put("type", CustConstant.SCORE_TYPE_6);
			refererMap.put(ActiveConstants.KEY_PARAM_operator, isIdentifyCard ? ActiveConstants.Operator_IdentifyCard 
					: ActiveConstants.Operator_Identify);
			refererMap.put("refererKey", "referer");
			refererMap.put("refererGrade", 2);
			refererMap.put("createDesc",  isIdentifyCard ?"二级好友工作认证":"二级好友实名认证");
			sendReward(refererMap);
			
			if(isIdentifyCard){
				// 赠送间接推荐人抢单券
				Map<String,Object> refererOrderMap = new HashMap<String,Object>();
				refererOrderMap.put("customerId", refererTwo);
				refererOrderMap.put("selfId", customerId);
				refererOrderMap.put("newRewardType", newRewardType);
				refererOrderMap.put("type", CustInviteUtil.TICKET_TYPE_RECOMMEND);
				refererOrderMap.put(ActiveConstants.KEY_PARAM_operator, ActiveConstants.Operator_IdentifyCardTicket);
				refererOrderMap.put("refererIdentifyKey", "refererIdentify");
				refererOrderMap.put("refererGrade", 2);
				refererOrderMap.put("createDesc", "二级好友工作认证");
				sendReward(refererOrderMap);
			}
		}
	}
	
	/**
	 * 发送奖励
	 * @param params
	 */
	private static void sendReward(Map<String,Object> params){
		try {
			XxjrMqSendUtil.sendMessage(params, MQNames.custActive);
		} catch (Exception e) {
			LogerUtil.error(RewardUtil.class, e, "sendReward error!");
			XxjrMqSendUtil.saveFailureLog("sendReward", params);
		}
	}
	
	/**
	 * 分享资讯奖励
	 * @param customerId
	 */
	public static void rewardShareNews(Object customerId, Object novelId){
		// 同一篇资讯分享 只能奖励一次
		AppParam param = new AppParam();
		param.setService("rewardLogService");
		param.setMethod("query");
		param.addAttr("customerId", customerId);
		param.addAttr("type", CustConstant.SCORE_TYPE_5);
		param.addAttr("checkTime", "1");
		param.setRmiServiceName(AppProperties.
				getProperties(DuoduoConstant.RMI_SERVICE_START+"cust"));
		AppResult result = RemoteInvoke.getInstance().callNoTx(param);
		// 同一篇资讯一天只奖励一次,每天最多奖励5次
		if(result.getRows().size() >= 5){
			return;
		}
		for(Map<String,Object> map : result.getRows()){
			if(map.get("novelId").toString().equals(novelId.toString())){
				return;
			}
		}
		
		Map<String,Object> attr = new HashMap<String,Object>();
		attr.put("customerId", customerId);
		attr.put("type", CustConstant.SCORE_TYPE_5);
		attr.put("novelId", novelId);
		result = addRewardLog(attr);
		if(result.isSuccess()){
			Map<String,Object> map = new HashMap<String,Object>();
			map.put("customerId", customerId);
			map.put("type", CustConstant.SCORE_TYPE_5);
			map.put(ActiveConstants.KEY_PARAM_operator, ActiveConstants.Operator_SHARE);
			map.put("shareKey", "share");
			map.put("createDesc", "分享资讯");
			try {
				XxjrMqSendUtil.sendMessage(map, MQNames.custActive);
			} catch (Exception e) {
				LogerUtil.error(RewardUtil.class, e, "rewardShareNews error!");
				XxjrMqSendUtil.saveFailureLog("rewardShareNews", map);
			}	
		}
	}
	
	/**
	 * 充值奖励
	 * @param customerId
	 */
	public static void rewardRecharge(Object openMonth, Object customerId){
		Map<String,Object> rechargeMap = new HashMap<String,Object>();
		rechargeMap.put("customerId", customerId);
		rechargeMap.put("type", CustInviteUtil.TICKET_TYPE_RECHARGE);
		rechargeMap.put("openMonth", openMonth);
		rechargeMap.put(ActiveConstants.KEY_PARAM_operator, ActiveConstants.Operator_Recharge);
		rechargeMap.put("rechargeKey", "recharge");
		rechargeMap.put("createDesc",  "充值奖励");
		sendReward(rechargeMap);
	}
	
	/**
	 * 马甲包充值奖励
	 * @param customerId
	 */
	public static void rewardMjbRecharge(Object rechargeAmt, Object customerId){
		Map<String,Object> rechargeMap = new HashMap<String,Object>();
		rechargeMap.put("customerId", customerId);
		rechargeMap.put("type", CustInviteUtil.TICKET_TYPE_RECHARGE);
		rechargeMap.put("rechargeAmt", rechargeAmt);
		rechargeMap.put(ActiveConstants.KEY_PARAM_operator, ActiveConstants.Mjb_Operator_Recharge);
		rechargeMap.put("rechargeKey", "mjbRecharge");
		rechargeMap.put("createDesc",  "充值奖励");
		sendReward(rechargeMap);
	}
	
	/**
	 * 
	 * @param attr
	 * @return
	 */
	public static AppResult addRewardLog(Map<String,Object> attr){
		AppParam param = new AppParam();
		param.setService("rewardLogService");
		param.setMethod("insert");
		param.addAttrs(attr);
		param.setRmiServiceName(AppProperties.
				getProperties(DuoduoConstant.RMI_SERVICE_START+"cust"));
		return RemoteInvoke.getInstance().call(param);
	}
	
}
