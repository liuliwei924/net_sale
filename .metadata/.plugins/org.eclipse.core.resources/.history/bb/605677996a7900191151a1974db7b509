package org.xxjr.job.listener.busi.sms.util;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.util.LogerUtil;
import org.ddq.common.web.page.PageUtil;
import org.ddq.model.cache.RedisUtils;
import org.ddq.common.core.service.RemoteInvoke;
import org.xxjr.sys.util.NumberUtil;
import org.xxjr.sys.util.ServiceKey;

public class ImportUserUtil {
	/*** 短信用户导入最后用户id */
	public static String KEY_SMS_IMPORT_LASTCUSTOMERDID = "key_sms_import_lastCustomerId";
	/*** 信贷经理导入最后用户id*/
	public static String KEY_MANAGER_IMPORT_LASTCUSTOMERDID = "key_manager_import_lastCustomerId";
	/**
	 * 1，从小小金融现在客户信息： t_customer:  存到mongodb，根据注册时间。 任务，每次处理500条，10页，，5分钟处理一次。
    	处理注册时间和处理时间记录，同时，可以拉到 xxjrAPP登录，信贷经理登录，城市名
	 */
	public static void importUser(){
		//1.查询执行到第几条
		long lastCustomerId = NumberUtil.getInt(RedisUtils.getRedisService().get(KEY_SMS_IMPORT_LASTCUSTOMERDID), 0);
		
		//2.按时间排序查询后面的500条，10次执行
		AppParam queryCustParam = new AppParam();
		queryCustParam.setService("customerService");
		queryCustParam.setMethod("queryCustMessage");
		queryCustParam.setOrderBy("cid");
		queryCustParam.setOrderValue(PageUtil.ORDER_ASC);
		queryCustParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START
						+ ServiceKey.Key_cust));
		int everyPage = 500;
		AppResult custResult = new AppResult();
		List<Map<String, Object>> custList = new ArrayList<Map<String,Object>>();
		for(int i=0;i<10;i++){
			queryCustParam.addAttr("customerId", lastCustomerId);
			queryCustParam.addAttr("limit", everyPage);
			custResult = RemoteInvoke.getInstance().call(queryCustParam);
			custList = custResult.getRows();
			if(custList.size()>0){
				//保存查询到的用户信息
				AppParam addParam = new AppParam();
				addParam.addAttr("custList", custList);
				addParam.setService("smsTelephoneService");
				addParam.setMethod("saveCust");
				addParam.setRmiServiceName(AppProperties
						.getProperties(DuoduoConstant.RMI_SERVICE_START
								+ ServiceKey.Key_log));
				RemoteInvoke.getInstance().call(addParam);
				//如果查询出来的条数小于每页查询条数，说明已经查询完毕
				if(custList.size()<everyPage){
					lastCustomerId = (long) custList.get(custList.size()-1).get("cid");
					RedisUtils.getRedisService().set(KEY_SMS_IMPORT_LASTCUSTOMERDID,lastCustomerId);
					return;
				}else{
					lastCustomerId = (long) custList.get(everyPage-1).get("cid");
				}
			}else{
				LogerUtil.error(ImportUserUtil.class, "短信用户导入数据已经处理完成，查不到新的数据");
				return;
			}
		}
		//3.保存当前执行到第几条
		RedisUtils.getRedisService().set(KEY_SMS_IMPORT_LASTCUSTOMERDID,lastCustomerId);
	}
	

	/**
	 * 导入信贷经理数据
	 */
	public static void importManagerInfo(){
		//1.查询执行到第几条
		long lastCustomerId = NumberUtil.getInt(RedisUtils.getRedisService().get(KEY_MANAGER_IMPORT_LASTCUSTOMERDID), 0);
		
		// 2.按时间排序查询后面的500条，10次执行
		AppParam queryCustParam = new AppParam();
		queryCustParam.setService("customerExtService");
		queryCustParam.setMethod("queryManagerInfo");
		queryCustParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_cust));
		int everyPage = 500;
		AppResult custResult = new AppResult();
		List<Map<String, Object>> custList = new ArrayList<Map<String, Object>>();
		for (int i = 0; i < 10; i++) {
			queryCustParam.addAttr("customerId", lastCustomerId);
			queryCustParam.addAttr("limit", everyPage);
			custResult = RemoteInvoke.getInstance().call(queryCustParam);
			custList = custResult.getRows();
			if (custList.size() > 0) {
				StringBuffer customerIds = new StringBuffer();				
				int j=0;
				for(Map<String, Object> map : custList){
					if(j==1){
						customerIds.append("," +map.get("customerId").toString());
					}else{
						customerIds.append(map.get("customerId").toString());
					}
					j=1;
				}
				
				AppParam queryManagerReParam = new AppParam();
				queryManagerReParam.setService("daiBorrowReService");
				queryManagerReParam.setMethod("queryManagerRe");
				queryManagerReParam.addAttr("customerIds", customerIds.toString());
				queryManagerReParam.setRmiServiceName(AppProperties
						.getProperties(DuoduoConstant.RMI_SERVICE_START
								+ ServiceKey.Key_busi));
				AppResult managerReResult = RemoteInvoke.getInstance().callNoTx(queryManagerReParam);
			
				for(Map<String, Object> map : custList){
					for(Map<String, Object> map2 : managerReResult.getRows()){
						if(map.get("customerId").equals(map2.get("customerId"))){
							map.putAll(map2);
							break;
						}
					}
				}
			
				// 保存查询到的用户信息
				AppParam addParam = new AppParam();
				addParam.addAttr("insertList", custList);
				addParam.setService("sumManagerDataService");
				addParam.setMethod("save");
				addParam.setRmiServiceName(AppProperties
						.getProperties(DuoduoConstant.RMI_SERVICE_START
								+ ServiceKey.Key_sum));
				AppResult insertResult = RemoteInvoke.getInstance().call(addParam);
				LogerUtil.error(ImportUserUtil.class,"信贷经理信息导入共插入" + NumberUtil.getInt(insertResult.getAttr(DuoduoConstant.DAO_Insert_SIZE),0)+ "条数据");
				// 如果查询出来的条数小于每页查询条数，说明已经查询完毕
				if (custList.size() < everyPage) {
					lastCustomerId = (long) custList.get(custList.size() - 1).get("customerId");
					RedisUtils.getRedisService().set(KEY_MANAGER_IMPORT_LASTCUSTOMERDID, lastCustomerId);
					return;
				} else {
					lastCustomerId = (long) custList.get(everyPage - 1).get("customerId");
				}
			} else {
				LogerUtil.error(ImportUserUtil.class, "信贷经理信息导入数据已经处理完成，查不到新的数据");
				return;
			}
		}
		// 3.保存当前执行到第几条
		RedisUtils.getRedisService().set(KEY_MANAGER_IMPORT_LASTCUSTOMERDID, lastCustomerId);
	}
}
