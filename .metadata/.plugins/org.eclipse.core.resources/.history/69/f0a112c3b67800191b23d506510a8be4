package org.xxjr.busi.util.push.impl;

import java.util.HashMap;
import java.util.Map;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.util.LogerUtil;
import org.ddq.common.util.StringUtil;
import org.ddq.zk.service.RemoteInvoke;
import org.xxjr.busi.util.borrow.IdCardResolveUtil;
import org.xxjr.busi.util.push.PushCode;
import org.xxjr.busi.util.push.PushPlatformUtils;
import org.xxjr.busi.util.push.PushUtil;
import org.xxjr.sys.util.NumberUtil;
import org.xxjr.sys.util.ServiceKey;
import org.xxjr.sys.util.SysParamsUtil;
@PushCode(20)
public class PushFSInsureUtil implements PushUtil{

	@Override
	public int pushData(Map<String, Object> row,Integer pushType) {
		int status = 2;
		Map<String, Object> config = PushPlatformUtils.getConfigByCode(pushType);
		try {
			if ((!PushPlatformUtils.checkChannelOpen(config))) {
				LogerUtil.log(PushFSInsureUtil.class, config.get("pushName") + "推送未打开");
				return 3;
			}
			if ((!PushPlatformUtils.checkChannelMaxCount(config))) {
				LogerUtil.log(PushFSInsureUtil.class, config.get("pushName") + "推送已达上限");
				return 3;
			}
			if ((!PushPlatformUtils.getInsureCondition(row, config))) {
				LogerUtil.log(PushFSInsureUtil.class, config.get("pushName") + "筛选条件无法通过");
				return 4;
			}
			String url = SysParamsUtil.getStringParamByKey("push_fsInsure_cfg_url", "http://api.gzfsnet.com/insurance/distribution/import");
			Map<String, String> connParam = sendData(row);
			String msg = "";
			Map<String, Object> resMap = PushPlatformUtils.httpPost(url, connParam, true);
			if (1 == NumberUtil.getInt(resMap.get("resStatus"), 0)) {
				status = 1;
			}
			msg = StringUtil.objectToStr(resMap.get("res_msg"));
			AppParam updateParam = new AppParam("insurancePushPoolService", "updateStatus");
			updateParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_busi_in));
			updateParam.addAttrs(row);
			updateParam.addAttr("pushType", pushType);
			updateParam.addAttr("message", msg);
			updateParam.addAttr("status", status);
			RemoteInvoke.getInstance().call(updateParam);
			LogerUtil.log(config.get("pushName") + "推送数据任务 PushFSLoanUtil end");
		} catch (Exception e) {
			LogerUtil.error(PushFSInsureUtil.class, e, "PushFSLoanUtil >>>>>>>>>>>>>>>>>>error");
		}
		return status;
	}
	
	private static Map<String, String> sendData (Map<String, Object> row){
		Map<String, String> connParam = new HashMap<String, String>();
		connParam.put("vender_name", SysParamsUtil.getStringParamByKey("push_fs_cfg_venderName", "dsw"));
		connParam.put("name", StringUtil.objectToStr(row.get("applyName")));
		connParam.put("city", StringUtil.objectToStr(row.get("cityName")));
		connParam.put("sex", NumberUtil.getInt(row.get("sex"), 1) == 1 ? "男" :  "女");
		connParam.put("telphone", StringUtil.objectToStr(row.get("telephone")));
		String birthDay = PushPlatformUtils.getBirthDay(IdCardResolveUtil.getBirthday(StringUtil.objectToStr(row.get(""))), NumberUtil.getInt(row.get("age"), 23));
		connParam.put("birthday", birthDay);
		connParam.put("loan_amount", StringUtil.objectToStr(row.get("loanAmount")));
		return connParam;
	}

}
