package org.xxjr.job.listener.xxxj;

import java.util.Date;
import java.util.List;
import java.util.Map;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.util.DateUtil;
import org.ddq.common.util.LogerUtil;
import org.ddq.common.util.StringUtil;
import org.llw.ddq.job.core.BaseExecteJob;
import org.llw.ddq.job.util.JobConstant;
import org.llw.ddq.job.util.JobUtil;
import org.llw.xxjr.xxxj.game.DiceUtil;
import org.llw.xxjr.xxxj.record.XjTypeConst;
import org.ddq.common.core.service.RemoteInvoke;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;
import org.xxjr.sys.util.NumberUtil;
import org.xxjr.sys.util.ServiceKey;
import org.xxjr.sys.util.SysParamsUtil;

@Lazy
@Component
public class CallBackCustCoinsJob implements BaseExecteJob{

	@Override
	public AppResult executeJob(AppParam param) {
		
		AppResult result = new AppResult();
		Object processId = param.getAttr(JobConstant.KEY_processId);
//		String msg = callBackCustCoins(processId);
//		JobUtil.addProcessExecute(processId, msg);
		//自动审核今日任务
		String msg1 = autoAudioTodayTask(processId);
		JobUtil.addProcessExecute(processId, msg1);
		
		//满24小时用户 生成天狗币
//		String msg2 = GenrateCoinsUtil.genrate24Coins(processId);
//		JobUtil.addProcessExecute(processId, msg2);
		
		//删除锁定的手机号码
		String msg3 = deleteLockTel(processId);
		JobUtil.addProcessExecute(processId, msg3);
		
		//修改竞拍物品状态
		String msg4 = XjAuctionUtil.updateAuctionStatus();
		JobUtil.addProcessExecute(processId, msg4);
		
		//竞拍结束核算竞拍成功用户
		String msg5 = XjAuctionUtil.auctionSettlement();
		JobUtil.addProcessExecute(processId, msg5);
		
		//回收狗粮
		String msg6 = callBackCustAbility(processId);
		JobUtil.addProcessExecute(processId, msg6);
		
		//推送保险数据
		XjPushDataUtil.pushData(processId);
		
		openDiceGame(processId);
		settleDiceGame(processId);
		
		//天币网====================================
		//删除交易中心锁定的手机号码
		TranUtil.deleteTranLockTel(processId);
		//订单超时取消交易
		TranUtil.autoCancelTrade(processId);
		//订单超时自动确认收款
		TranUtil.autoTransferCoin(processId);
		
		return result;
	}

	/**
	 * 骰子游戏开奖
	 * @param processId
	 * @return
	 */
	public void openDiceGame(Object processId){
		try {
			AppParam param = new AppParam("gameDiceService","queryGameInfo");
			param.addAttr("status", "0");
			param.setOrderBy("openTime");
			param.setOrderValue("asc");
			param.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_XJ));
			AppResult result = RemoteInvoke.getInstance().callNoTx(param);
			if(result.getRows().size()>0 && DiceUtil.diceIsOver(StringUtil.getString(result.getRow(0).get("openTime")))){
				AppParam openParam = new AppParam("gameDiceService","openDiceGame");
				openParam.addAttr("diceId", result.getRow(0).get("diceId"));
				openParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START
						+ ServiceKey.Key_XJ));
				RemoteInvoke.getInstance().callNoTx(openParam);
			}
		} catch (Exception e) {
			LogerUtil.error(CallBackCustCoinsJob.class, e,"openDiceGame >>>>>>>>>>>>>>>>>>error");
			JobUtil.addProcessExecute(processId,"天狗窝骰子游戏开奖报错:：" + e.toString());
		}
	}
	
	/**
	 * 骰子游戏结算
	 * @param processId
	 * @return
	 */
	public void settleDiceGame(Object processId){
		try {
			AppParam param = new AppParam("gameDiceService","queryGameInfo");
			param.addAttr("status", "1");
			param.setOrderBy("openTime");
			param.setOrderValue("asc");
			param.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_XJ));
			AppResult result = RemoteInvoke.getInstance().callNoTx(param);
			if(result.getRows().size()>0 && DiceUtil.diceIsOver(StringUtil.getString(result.getRow(0).get("openTime")))){
				AppParam settleParam = new AppParam("gameDiceService","settleDiceGame");
				settleParam.addAttr("diceId", result.getRow(0).get("diceId"));
				settleParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START
						+ ServiceKey.Key_XJ));
				RemoteInvoke.getInstance().callNoTx(settleParam);
			}
		} catch (Exception e) {
			LogerUtil.error(CallBackCustCoinsJob.class, e,"settleDiceGame >>>>>>>>>>>>>>>>>>error");
			JobUtil.addProcessExecute(processId,"天狗窝骰子游戏结算报错:：" + e.toString());
		}
	}
	
	
	public String callBackCustCoins(Object processId){
		try{
				int xjLimitSendHours = SysParamsUtil.getIntParamByKey("xjLimitSendHours", 48);
				Date limitSendTime = DateUtil.getNextHour(new Date(), -xjLimitSendHours);
				//查询是否有失效的天狗币数
				AppParam custParams = new AppParam("xjSendCoinNowService", "getInvalidCoinCustCount");
				custParams.addAttr("limitSendTime", limitSendTime);
				custParams.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START
										+ ServiceKey.Key_XJ));
				
				AppResult custResult = RemoteInvoke.getInstance().callNoTx(custParams);
				
				int custCount = NumberUtil.getInt(custResult.getAttr(DuoduoConstant.TOTAL_SIZE),0);
				
				StringBuffer msgBuf = new StringBuffer();
				int sucSize = 0;
				int againSucSize = 0;
				if(custCount > 0){//回收失效的天狗币
					AppParam updateParams = new AppParam("xjSendCoinFailService", "callBackCustCoins");
					updateParams.addAttr("limitSendTime", limitSendTime);
					updateParams.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START
							+ ServiceKey.Key_XJ));
					
					AppResult updateResult = RemoteInvoke.getInstance().call(updateParams);
					
					sucSize = NumberUtil.getInt(updateResult.getAttr("sucSize"),0);
				}	
				
				if(sucSize > 0){
					// 用户的币全部被回收后，再生成一条产币记录，方便用户登录后可以获取币，从而重新产币
					AppParam againParams = new AppParam("xjSendCoinNowService", "batchInsertAgainCoinsCust");
					againParams.addAttr("limitSendTime", limitSendTime);
					againParams.addAttr("typeId", XjTypeConst.COINS_DAY_RECEIVE);
					againParams.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START
											+ ServiceKey.Key_XJ));
					
					AppResult againResult = RemoteInvoke.getInstance().call(againParams);
					
					againSucSize =  NumberUtil.getInt(againResult.getAttr(DuoduoConstant.DAO_Insert_SIZE),0);
				}
				
				
				msgBuf.append("需要回收用户数:").append(custCount).append(",成功回收笔数:").append(sucSize)
				.append(",再次产币用户数:" + againSucSize);
				
				return msgBuf.toString();
		}catch(Exception e){
			LogerUtil.error(CallBackCustCoinsJob.class, e,"callBackCustCoins >>>>>>>>>>>>>>>>>>error");
			JobUtil.addProcessExecute(processId,"回收超过48小时的天狗币报错:：" + e.toString());
		}
		
		return null;
	}
	
	
	private String deleteLockTel(Object processId){
		String message = null;
		try{
			//号码锁定时长，默认5分钟
			int xjTelLockTime = SysParamsUtil.getIntParamByKey("xjTelLockTime", 5);
			//删除满足锁定时间号码记录
			AppParam param = new AppParam("smsLockTelService", "deleteLockTel");
			param.addAttr("lockNum", xjTelLockTime);
			param.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START
					+ ServiceKey.Key_XJ));
			AppResult result = RemoteInvoke.getInstance().call(param);
			int deleteSize = NumberUtil.getInt(result.getAttr(DuoduoConstant.DAO_Delete_SIZE),0);//删除记录数
			message = "成功删除锁定号码记录数："+deleteSize;
			LogerUtil.log("DelLockTelJob deleteLockTel >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> end delete count=" +deleteSize);
		}catch(Exception ex){
			LogerUtil.error(this.getClass(),ex, "DelLockTelJob error");
			JobUtil.addProcessExecute(processId,"删除用户锁定号码报错:" + ex.toString());
		}
		return message;
	}
	
	/**
	 * 狗粮回收
	 * @param processId
	 * @return
	 */
	private String callBackCustAbility(Object processId){
		String message = null;
		try{
			Date now = new Date();
			int xjLimitCallBackSize = SysParamsUtil.getIntParamByKey("xjLimitCallBackAbilitySize", 500);
			//删除满足锁定时间号码记录
			AppParam param = new AppParam("xjRecAbilityRecordService", "callBackCustAbility");
			param.addAttr("recoveryTime", now);
			param.addAttr("limit", xjLimitCallBackSize);
			param.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START
					+ ServiceKey.Key_XJ));
			AppResult result = RemoteInvoke.getInstance().call(param);
			int szie = NumberUtil.getInt(result.getRows().size(),0);//更新记录数
			message = now + "成功回收狗粮条数："+szie;
			LogerUtil.log("job callBackCustAbility >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> end callBackSize=" +szie);
		}catch(Exception ex){
			LogerUtil.error(this.getClass(),ex, "callBackCustAbility error");
			JobUtil.addProcessExecute(processId,"回收狗粮报错:" + ex.toString());
		}
		return message;
	}
	
	
	/**
	 * 自动审核今日任务
	 * @param processId
	 * @return
	 */
	private String autoAudioTodayTask(Object processId){
		String message = null;
		LogerUtil.log("job autoAudioTodayTask >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> start");
		try{
			AppParam param = new AppParam("xjTodayTaskScreenRecordService", "query");
			param.addAttr("auditStatus", "0");//未完成
//			param.addAttr("subNow", "0");//不为空
			param.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START
					+ ServiceKey.Key_XJ));
			AppResult result = RemoteInvoke.getInstance().call(param);
			StringBuffer msgBuf = new StringBuffer();
			if(result.getRows().size() > 0){
				List<Map<String,Object>> list = result.getRows();
				for (Map<String, Object> map : list) {
					msgBuf.append(map.get("recordId")).append(",");
				}
			}
			AppParam audiParams = new AppParam("xjTodayTaskScreenRecordService","auditAll");
			audiParams.addAttr("ids",msgBuf.toString());
			audiParams.addAttr("auditStatus", "1");//审核通过
			audiParams.addAttr("auditBy", "自动审核");// 审核人
			audiParams.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START
					+ ServiceKey.Key_XJ));
			result = RemoteInvoke.getInstance().call(audiParams);
		} catch(Exception ex){
			LogerUtil.error(this.getClass(),ex, "autoAudioTodayTask error");
			JobUtil.addProcessExecute(processId,"自动审核今日任务报错:" + ex.toString());
		}
		LogerUtil.log("job autoAudioTodayTask >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> end");
		return message;
	}
}
