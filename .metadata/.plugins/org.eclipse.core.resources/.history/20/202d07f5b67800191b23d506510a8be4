package org.xxjr.cust.util.info;

import java.math.BigDecimal;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.util.StringUtil;
import org.ddq.zk.service.RemoteInvoke;
import org.springframework.util.StringUtils;
import org.xxjr.cust.util.FundConstant;
import org.xxjr.sys.util.ServiceKey;

/**
 * 宝付充值工具类
 * 
 * @author chencx
 *
 */
public class BaoFooRecharegeUtil {

	// 交易成功
	public final static String SUCESS_FLAG = "0000";

	/**
	 * 宝付预支付
	 * 
	 * @param params
	 * @return
	 */
	public static AppResult baofooPreRecharge(AppParam params) {
		AppResult result = new AppResult();
		Object customerId = params.getAttr("customerId");
		if (StringUtils.isEmpty(customerId)) {
			result.setSuccess(Boolean.FALSE);
			result.setMessage("缺少用户信息");
			return result;
		}
		String fromApp = StringUtil.getString(params.getAttr("fromApp"));
		String rechargeType = StringUtil.getString(params.getAttr("rechargeType"));
		String txn_amt = (String) params.getAttr("txn_amt");
		if (StringUtils.isEmpty(txn_amt)) {
			result.setSuccess(Boolean.FALSE);
			result.setMessage("宝付支付失败，请联系客服人员");
			return result;
		}

		BigDecimal txn_amt_num = new BigDecimal(txn_amt).multiply(BigDecimal
				.valueOf(100));// 金额转换成分
		String txn_amt_cent = String.valueOf(txn_amt_num.setScale(0));// 支付金额
		Integer totalFee = Integer.valueOf(txn_amt_cent);
		String tradeId = StringUtil.getString(params.getAttr("tradeId"));
		// 初始订单
		AppParam rechargeParam = new AppParam();
		rechargeParam.setService("rechargeService");
		rechargeParam.setMethod("insert");
		rechargeParam.addAttr("customerId", customerId);
		rechargeParam.addAttr("rechargeType", StringUtils.isEmpty(rechargeType) ? FundConstant.RECHARGE_TYPE_R : rechargeType);
		rechargeParam.addAttr("rechargeChannel", "bf");
		rechargeParam.addAttr("isApp", StringUtils.isEmpty(fromApp) ? 1: fromApp);
		rechargeParam.addAttr("amount", totalFee);
		rechargeParam.addAttr("params", "");
		rechargeParam.addAttr("gzhId", 11);
		rechargeParam.addAttr("openid", "");
		rechargeParam.addAttr("transactionId", "");
		rechargeParam.addAttr("status", "0");
		rechargeParam.addAttr("errCode", "");
		rechargeParam.addAttr("errCodeDesc", "");
		rechargeParam.addAttr("tradeId", tradeId);
		rechargeParam.addAttr("couponId", params.getAttr("couponId"));
		rechargeParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START
						+ ServiceKey.Key_cust));
		AppResult rechargeResult = RemoteInvoke.getInstance().call(
				rechargeParam);
		if (!rechargeResult.isSuccess()) {
			result.setSuccess(Boolean.FALSE);
			result.setMessage(rechargeResult.getMessage());
			return result;
		}
		result.putAttr("rechargeId", rechargeResult.getAttr("rechargeId"));
		return result;
	}

	/**
	 * 更新支付信息
	 * 
	 * @param params
	 * @return
	 */
	public static AppResult baofooUpdateRecharge(AppParam params) {
		AppResult result = new AppResult();
		String rechargeId = (String) params.getAttr("rechargeId");
		String transactionId = (String) params.getAttr("transactionId");
		String resp_code = (String) params.getAttr("resp_code");
		String resp_msg = (String) params.getAttr("resp_msg");
		// 初始订单
		AppParam rechargeParam = new AppParam();
		rechargeParam.setService("rechargeService");
		rechargeParam.setMethod("update");
		rechargeParam.addAttr("rechargeId", rechargeId);
		rechargeParam.addAttr("transactionId", transactionId);
		rechargeParam.addAttr("errCode", resp_code);
		rechargeParam.addAttr("errCodeDesc", resp_msg);
		rechargeParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START
						+ ServiceKey.Key_cust));
		AppResult rechargeResult = RemoteInvoke.getInstance().call(
				rechargeParam);
		if (!rechargeResult.isSuccess()) {
			result.setSuccess(Boolean.FALSE);
			result.setMessage(rechargeResult.getMessage());
			return result;
		}

		return rechargeResult;
	}

	/**
	 * 宝付充值
	 * 
	 * @param params
	 * @return
	 */
	public static AppResult baofooRecharge(AppParam params) {
		AppResult result = new AppResult();
		String rechargeId = (String) params.getAttr("rechargeId");
		String resp_code = (String) params.getAttr("resp_code");
		String resp_msg = (String) params.getAttr("resp_msg");
		AppParam rechargeParam = new AppParam();
		rechargeParam.setService("rechargeService");
		rechargeParam.addAttr("rechargeId", rechargeId);
		if (SUCESS_FLAG.equals(resp_code)) {
			rechargeParam.addAttr("status", 1);// 1表示支付成功
			rechargeParam.setMethod("rechargeSuccess");
		} else if (resp_code.equals("BF00100") || resp_code.equals("BF00112")
				|| resp_code.equals("BF00113") || resp_code.equals("BF00115")
				|| resp_code.equals("BF00144") || resp_code.equals("BF00202")) {
			rechargeParam.addAttr("status", 3);// 3表示交易处理中
			rechargeParam.setMethod("rechargeFailed");
		} else {
			rechargeParam.setMethod("rechargeFailed");
			rechargeParam.addAttr("status", 2);// 2表示支付失败
		}
		rechargeParam.addAttr("params", params.getAttr("params"));
		rechargeParam.addAttr("errCode", resp_code);
		rechargeParam.addAttr("errCodeDesc", resp_msg);
		rechargeParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START
						+ ServiceKey.Key_cust));
		result = RemoteInvoke.getInstance().call(
				rechargeParam);
		return result;
	}
}
