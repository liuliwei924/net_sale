package org.ddq.common.core.service;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.net.ConnectException;
import java.nio.charset.Charset;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.core.SpringAppContext;
import org.ddq.common.core.service.SoaManager;
import org.ddq.common.core.service.TxType;
import org.ddq.common.web.session.DuoduoSession;
import org.ddq.zk.api.IAppRemote;
import org.ddq.zk.manage.ServerManager;
import org.ddq.zk.util.ZKUitl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;

import lombok.extern.slf4j.Slf4j;


@Component
@Slf4j
public class RemoteInvoke {
	
	private final ThreadLocal<String> retryCount = new ThreadLocal<String>();
	
	@Autowired
	private ServerManager serverManage;
	
	
	public static RemoteInvoke getInstance(){
		return SpringAppContext.getBean(RemoteInvoke.class);
	}
	
	
	/***
	 * 调用 事务处理
	 * 
	 * @param params
	 * @return
	 * @throws Exception
	 */
	public AppResult call(final AppParam params) {
		//return invoke(params, TxType.DEF_TX);
		params.setDataBase(params.getRmiServiceName() + "_");
		return SoaManager.getInstance().invoke(params);
	}

	/***
	 * 不调用事务处理
	 * 
	 * @param params
	 * @return
	 * @throws Exception
	 */
	public AppResult callNoTx(final AppParam params) {
		//return invoke(params, TxType.NO_TX);
		params.setDataBase(params.getRmiServiceName() + "_");
		return SoaManager.getInstance().callNoTx(params);
	}

	/***
	 * 远程调用处理
	 * @param params
	 * @param txType
	 * @return
	 */
	private AppResult invoke(final AppParam params, final TxType txType) {
		
		String rmiServiceName = params.getRmiServiceName();
		if(StringUtils.isEmpty(rmiServiceName)){
			rmiServiceName = AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START + "sys");
		}
		String serverURl = serverManage.getServer(rmiServiceName);
		if (serverURl == null) {
			AppResult result = new AppResult();
			result.setMessage("Didn't find any remote service:" + rmiServiceName);
			result.setSuccess(false);
			return result;
		}
		return executeInvoke(params, txType, rmiServiceName,
				serverURl);
	}


	private AppResult executeInvoke(final AppParam params, final TxType txType, String rmiServiceName, String serverURl) {
		IAppRemote remote = ZKUitl.getInstance().getHessionBean(serverURl);
		AppResult result = new AppResult();
		try {
			if (txType == TxType.DEF_TX)
				result = remote.invoke(params);
			else
				result = remote.callNoTx(params);
			if(retryCount.get()!=null)  retryCount.remove();
			return result;
		} catch (ConnectException e1) {
			ZKUitl.getInstance().remoteHessionBean(serverURl);
			log.error("ConnectException removeRmiBean:" + serverURl, e1);
			saveException(e1);
			if(retryCount.get()!=null && retryCount.get().equals(serverURl)){
				result.setSuccess(Boolean.FALSE);
				result.setMessage(e1.getMessage());
				retryCount.remove();
				return result;
			}else{
				retryCount.set(serverURl);
				return invoke(params, txType);
			}
		} catch (Exception e) {
			log.error("executeInvoke error:" + serverURl , e);
			result.setSuccess(Boolean.FALSE);
			result.setMessage(e.getMessage());
			saveException(e);
			if(retryCount.get()!=null)  retryCount.remove();
			return result;
		}
	}
	//记录异常日志到数据库
	private void saveException(Exception e1) {
		AppParam param = DuoduoSession.getShowLog();
		if (param != null) {
			param.addAttr("exceptionName", e1.getClass().getSimpleName());
			param.addAttr("exceptionMainInfo",getExceptionMainInfo(e1));
			param.addAttr("exceptionMessage", e1.toString());
		}
	}
	
	/**
	 * 获取异常主要信息
	 * @param thr
	 * @return
	 */
	public static String getExceptionMainInfo(Exception e){
		
		StringBuffer strbuf=new StringBuffer();
		try {
			String exceptionDetail = exceptionFile(e);
			BufferedReader br = new BufferedReader(new InputStreamReader(new ByteArrayInputStream(exceptionDetail.getBytes(Charset.forName("utf8"))), Charset.forName("utf8")));  
			String line;  
			while ( (line = br.readLine()) != null ) {  
				if(!line.trim().equals("")&& (line.contains("org.xxjr")||line.contains("org.ddq") || line.contains("Cause:"))){
					strbuf.append(line+"\r\n");
			    }       		    	 
			}
		} catch (IOException e1) {
			log.error("getExceptionMainInfo",e1);
		}
		return strbuf.toString();
	}
	
	/***
	 * 错误文件的处理
	 * @param ex
	 * @return
	 * @throws Exception
	 */
	private static String exceptionFile(Exception ex){
		StringWriter str = new StringWriter();
		PrintWriter out = new PrintWriter(str);
		ex.printStackTrace(out);
		out.close();
		return str.toString();
	}
	
	
	public void testRetryCount() {
		System.out.println(retryCount.get()==null? "is null":retryCount.get());
	}
	
	public static void main(String[] args) {
		RemoteInvoke remote = new RemoteInvoke();
		remote.testRetryCount();
	}
}
