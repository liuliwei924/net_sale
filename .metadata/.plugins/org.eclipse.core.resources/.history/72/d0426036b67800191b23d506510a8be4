package org.xxjr.busi.util.wz;

import java.io.BufferedInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.Serializable;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.util.LogerUtil;
import org.ddq.common.util.StringUtil;
import org.ddq.common.web.session.DuoduoSession;
import org.ddq.model.cache.RedisUtils;
import org.ddq.zk.service.RemoteInvoke;
import org.springframework.util.StringUtils;
import org.xxjr.cust.util.auth.PhotoAuthUtil;
import org.xxjr.cust.util.info.CustomerUtil;
import org.xxjr.cust.util.wz.WzConstant;
import org.xxjr.cust.util.wz.WzCustomerUtil;
import org.xxjr.sys.util.NumberUtil;
import org.xxjr.sys.util.ServiceKey;
import org.xxjr.sys.util.ValidUtils;

/***
 * 微名片相关工具类
 * @author loys
 *
 */
public class WzCardUtil {
	public static final String WZ_CRAD_RANKLIST_KEY = "wz_card_ranklist_key";

	/***
	 * 查询微名片排行榜
	 * @param params
	 * @return
	 */
	public static List<Map<String,Object>> getRankList(String gzhId){
		 @SuppressWarnings("unchecked")
		List<Map<String,Object>> rankList = (List<Map<String, Object>>) RedisUtils.getRedisService().get(WZ_CRAD_RANKLIST_KEY);
		 if(rankList == null){
			rankList = refreshrankList(gzhId);
		}
		return rankList;
	}

	/***
	 * 刷新微名片排行榜
	 * @return
	 */
	public static List<Map<String, Object>> refreshrankList(String gzhId) {
		List<Map<String,Object>> rankList = new ArrayList<Map<String,Object>>();
		AppParam queryParam = new AppParam();
		queryParam.setService("wzCustService");
		queryParam.setMethod("querySmallCardRank");
		queryParam.addAttr("gzhId", gzhId);
		queryParam.addAttr("userStatus", WzConstant.WZ_USER_STATUS_1);
		queryParam.addAttr("rankLimit", 50);
		queryParam.setRmiServiceName(AppProperties.
				getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_zx));
		AppResult result = RemoteInvoke.getInstance().callNoTx(queryParam);
		if(result.isSuccess() && result.getRows().size()>0){
			rankList = result.getRows();
			RedisUtils.getRedisService().set(WZ_CRAD_RANKLIST_KEY, (Serializable) result.getRows(), 60*60*12);
		}
		return rankList;
	}
	

	/***
	 * 获取个人微名片排行榜 
	 * @return
	 */
	public static Map<String, Object> getMyCardRank(String customerId,String gzhId) {
		if(StringUtils.isEmpty(customerId) ||StringUtils.isEmpty(gzhId) ){
			return null;
		}
		AppParam queryParam = new AppParam();
		queryParam.setService("wzCustService");
		queryParam.setMethod("queryMyCardRank");
		queryParam.addAttr("gzhId", gzhId);
		queryParam.addAttr("userStatus", WzConstant.WZ_USER_STATUS_1);
		queryParam.addAttr("customerId", customerId);
		queryParam.setRmiServiceName(AppProperties.
				getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_zx));
		AppResult result = RemoteInvoke.getInstance().callNoTx(queryParam);
		if(result.isSuccess() && result.getRows().size()>0){
			return result.getRow(0);
		}
		return null;
	}
	/**
	 * 校验微名片基本参数
	 */
	public static AppResult validateParams(AppParam param) {
		AppResult result = new AppResult();
		String telephone = StringUtil.getString(param.getAttr("telephone"));
		String realName = StringUtil.getString(param.getAttr("realName"));
		String company = StringUtil.getString(param.getAttr("company"));
		String position = StringUtil.getString(param.getAttr("company"));
		String email = StringUtil.getString(param.getAttr("email"));
		String mainTempId = StringUtil.getString(param.getAttr("mainTempId"));
		String bgmTempId = StringUtil.getString(param.getAttr("bgmTempId"));
		String adTempId = StringUtil.getString(param.getAttr("adTempId"));
		String customerId = StringUtil.getString(param.getAttr("customerId"));
		String address = StringUtil.getString(param.getAttr("address"));
		String cityName = StringUtil.getString(param.getAttr("cityName"));
		String mapAddress = StringUtil.getString(param.getAttr("mapAddress"));
		boolean vipUser = isVipUser(customerId);
		//判断用户是否有权使用主题模板
		if(!StringUtils.isEmpty(mainTempId) && !vipUser){
			boolean vipFlag = isVipTemplate(mainTempId);
			if(vipFlag){
				return CustomerUtil.retErrorMsg("你还不是会员，成为会员享所有模板免费哦");
			}
		}
		//判断用户是否有权使用背景模板
		if(!StringUtils.isEmpty(bgmTempId) && !vipUser){
			boolean vipFlag = isVipTemplate(bgmTempId);
			if(vipFlag){
				return CustomerUtil.retErrorMsg("你还不是会员，成为会员享所有模板免费哦");
			}
		}
		//判断用户是否有权使用广告模板
		if(!StringUtils.isEmpty(adTempId) && !vipUser){
			boolean vipFlag = isVipTemplate(adTempId);
			if(vipFlag){
				return CustomerUtil.retErrorMsg("你还不是会员，成为会员享所有模板免费哦");
			}
		}
		//不校验基本参数标识
		String tempFlag = StringUtil.getString(param.getAttr("tempFlag"));
		if(StringUtils.isEmpty(tempFlag)){
			if(StringUtils.isEmpty(realName)){
				return CustomerUtil.retErrorMsg("姓名不能为空");
			}
			// 验证手机号 
			if(!ValidUtils.validateTelephone(telephone)){
				return CustomerUtil.retErrorMsg("请输入正确的手机号码");
			}
			if(StringUtils.isEmpty(company)){
				return CustomerUtil.retErrorMsg("公司不能为空");
			}
			if(StringUtils.isEmpty(position)){
				return CustomerUtil.retErrorMsg("职位不能为空");
			}
			if(!StringUtils.isEmpty(email) && !ValidUtils.validateEmail(email)){
				return CustomerUtil.retErrorMsg("请输入正确的邮箱");
			}
			if(StringUtils.isEmpty(address) || StringUtils.isEmpty(cityName) || StringUtils.isEmpty(mapAddress)){
				return CustomerUtil.retErrorMsg("地址不能为空");
			}
		}
		return result;
	}
	/**
	 * 判断是否是转载文章
	 */
	public static boolean isHasArticle(AppParam param) {
		boolean hasFlag = false;
		String novelId = StringUtil.getString(param.getAttr("novelId"));
		String customerId = StringUtil.getString(param.getAttr("customerId"));
		AppParam queryParam = new AppParam("zixunReprintService","queryCount");
		queryParam.addAttr("novelId", novelId);
		queryParam.addAttr("customerId", customerId);
		queryParam.setRmiServiceName(AppProperties.
				getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_zx));
		AppResult queryResult = RemoteInvoke.getInstance().callNoTx(queryParam);
		int size = NumberUtil.getInt(queryResult.getAttr(DuoduoConstant.TOTAL_SIZE),0);
		if(size > 0){
			hasFlag = true;
		}
		return hasFlag;
	}
	
	/**
	 * 判断模板是否是会员模板
	 */
	public static boolean isVipTemplate(String tempId) {
		boolean vipFlag = false;
		AppParam queryParam = new AppParam("wzCardTemplateService","queryCount");
		queryParam.addAttr("tempId", tempId);
		queryParam.addAttr("vipFlag", WzConstant.WZ_CARD_TEMP_VIP_FLAG_1);
		queryParam.setRmiServiceName(AppProperties.
				getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_zx));
		AppResult queryResult = RemoteInvoke.getInstance().callNoTx(queryParam);
		int totalSize = NumberUtil.getInt(queryResult.getAttr(DuoduoConstant.TOTAL_SIZE),0);
		if(totalSize > 0){
			vipFlag = true;
		}
		return vipFlag;
	}
	
	/**
	 * 判断当前用户否是会员
	 */
	public static boolean isVipUser(String customerId) {
		boolean vipFlag = false;
		if(StringUtils.isEmpty(customerId)){
			return vipFlag;
		}
		AppParam queryParam = new AppParam("wzCustService","queryCount");
		queryParam.addAttr("customerId", customerId);
		queryParam.addAttr("custTypeFlag", "2,3"); //2-会员 3-企业用户
		queryParam.setRmiServiceName(AppProperties.
				getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_zx));
		AppResult queryResult = RemoteInvoke.getInstance().callNoTx(queryParam);
		int totalSize = NumberUtil.getInt(queryResult.getAttr(DuoduoConstant.TOTAL_SIZE),0);
		if(totalSize > 0){
			vipFlag = true;
		}
		return vipFlag;
	}
	/**
	 * 查询背景图片,没有背景则为默认背景
	 */
	public static String queryCardBgImg(String tempId) {
		String bgImgUrl = "";
		AppResult result = new AppResult();
		AppParam queryParam = new AppParam("wzCardTemplateService","query");
		queryParam.addAttr("status", "1"); // 1启用
		if(!StringUtils.isEmpty(tempId)){
			queryParam.addAttr("tempId", tempId);
			queryParam.setRmiServiceName(AppProperties.
					getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_zx));
			result = RemoteInvoke.getInstance().callNoTx(queryParam);
		}else{
			queryParam.addAttr("tempType", WzConstant.WZ_CARD_TEMPTYPE_2);
			queryParam.addAttr("vipFlag", WzConstant.WZ_CARD_TEMP_VIP_FLAG_2);
			queryParam.setRmiServiceName(AppProperties.
					getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_zx));
			result = RemoteInvoke.getInstance().callNoTx(queryParam);
		}
		if(result.getRows().size() > 0 && !StringUtils.isEmpty(result.getRow(0))){
			bgImgUrl = StringUtil.getString(result.getRow(0).get("imgUrl"));
		}
		return bgImgUrl;
	}
	
	/**
	 * 查询用户会员基本信息
	 */
	public static AppResult queryVipInfo(String customerId) {
		AppResult result = new AppResult();
		if(!StringUtils.isEmpty(customerId)){
			AppParam queryParam = new AppParam("wzVipCardService","query");
			queryParam.addAttr("customerId", customerId);
			queryParam.setRmiServiceName(AppProperties.
					getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_zx));
			result = RemoteInvoke.getInstance().callNoTx(queryParam);
		}
		return result;
	}
	
	/**
	 * 判断当前用户状态是否是已启用状态
	 */
	public static boolean isEnableStatus(String customerId) {
		if(StringUtils.isEmpty(customerId)){
			return false;
		}else{
			Map<String,Object> mapCust = WzCustomerUtil.getWzCust(customerId);
			if(mapCust != null){
				if(WzConstant.WZ_USER_STATUS_1 == 
						NumberUtil.getInt(mapCust.get("userStatus"),0)){
					return true;
				}
			}
		}
		return false;
	}
	
	/**
	 * 查询设置的主题、背景、广告样式(没有设置取默认样式)
	 */
	public static Map<String,Object> querySetTempInfo(String tempIds) {
		Map<String,Object> resultMap = new HashMap<String,Object>();
		Map<String,Object> freeMap = queryFreeTempImg();
		if(!StringUtils.isEmpty(tempIds)){
			AppParam queryParam = new AppParam("wzCardTemplateService","query");
			queryParam.addAttr("status", "1"); // 1启用
			queryParam.addAttr("tempIdIn", tempIds);
			queryParam.setRmiServiceName(AppProperties.
					getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_zx));
			AppResult result = RemoteInvoke.getInstance().callNoTx(queryParam);
			for(Map<String,Object> map : result.getRows()){
				String tempType = StringUtil.getString(map.get("tempType"));
				if(WzConstant.WZ_CARD_TEMPTYPE_1.equals(tempType)){
					resultMap.put("tempImgUrl", map.get("imgUrl"));
					resultMap.put("tempEnName", map.get("tempEnName"));
					resultMap.put("mainTempId", map.get("tempId"));
					resultMap.put("mainTempName", map.get("tempName"));
				}else if(WzConstant.WZ_CARD_TEMPTYPE_2.equals(tempType)){
					resultMap.put("bgImgUrl", map.get("imgUrl"));
					resultMap.put("bgTempId", map.get("tempId"));
					resultMap.put("bgTempName", map.get("tempName"));
				}else if(WzConstant.WZ_CARD_TEMPTYPE_3.equals(tempType)){
					resultMap.put("adImgUrl", map.get("imgUrl"));
					resultMap.put("adTempId", map.get("tempId"));
					resultMap.put("adTempName", map.get("tempName"));
					resultMap.put("adCode", map.get("adCode"));
				}
			}
			if(StringUtils.isEmpty(resultMap.get("tempImgUrl"))){
				resultMap.put("tempImgUrl", freeMap.get("tempImgUrl"));
				resultMap.put("tempEnName", freeMap.get("tempEnName"));
				resultMap.put("mainTempId", freeMap.get("mainTempId"));
				resultMap.put("mainTempName", freeMap.get("mainTempName"));
			}
			if(StringUtils.isEmpty(resultMap.get("bgImgUrl"))){
				resultMap.put("bgImgUrl", freeMap.get("bgImgUrl"));
				resultMap.put("bgTempId", freeMap.get("bgTempId"));
				resultMap.put("bgTempName", freeMap.get("bgTempName"));
			}
			if(StringUtils.isEmpty(resultMap.get("adImgUrl"))){
				resultMap.put("adImgUrl", freeMap.get("adImgUrl"));
				resultMap.put("adTempId", freeMap.get("adTempId"));
				resultMap.put("adTempName", freeMap.get("adTempName"));
				resultMap.put("adCode", freeMap.get("adCode"));
			}
			return resultMap;
		}else{
			return freeMap;
		}
	}
	
	/**
	 * 查询免费主题、背景、广告样式
	 */
	public static Map<String,Object> queryFreeTempImg() {
		Map<String,Object> resultMap = new HashMap<String,Object>();
		AppParam queryParam = new AppParam("wzCardTemplateService","query");
		queryParam.addAttr("status", "1"); // 1启用
		queryParam.addAttr("vipFlag", WzConstant.WZ_CARD_TEMP_VIP_FLAG_2);
		queryParam.setRmiServiceName(AppProperties.
				getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_zx));
		AppResult result = RemoteInvoke.getInstance().callNoTx(queryParam);
		for(Map<String,Object> map : result.getRows()){
			String tempType = StringUtil.getString(map.get("tempType"));
			if(WzConstant.WZ_CARD_TEMPTYPE_1.equals(tempType)){
				resultMap.put("tempImgUrl", map.get("imgUrl"));
				resultMap.put("tempEnName", map.get("tempEnName"));
				resultMap.put("mainTempId", map.get("tempId"));
				resultMap.put("mainTempName", map.get("tempName"));
			}else if(WzConstant.WZ_CARD_TEMPTYPE_2.equals(tempType)){
				resultMap.put("bgImgUrl", map.get("imgUrl"));
				resultMap.put("bgTempId", map.get("tempId"));
				resultMap.put("bgTempName", map.get("tempName"));
			}else if(WzConstant.WZ_CARD_TEMPTYPE_3.equals(tempType)){
				resultMap.put("adImgUrl", map.get("imgUrl"));
				resultMap.put("adTempId", map.get("tempId"));
				resultMap.put("adTempName", map.get("tempName"));
				resultMap.put("adCode", map.get("adCode"));
			}
		}
		return resultMap;
	}
	
	/**
	 * 通过url获取图片
	 * 
	 * @param destUrl
	 */
	public static String imgSaveToFile(String photoUrl, String filePath) {
		String imgPath = "";
		FileOutputStream fos = null;
		BufferedInputStream bis = null;
		HttpURLConnection httpUrl = null;
		URL url = null;
		int BUFFER_SIZE = 1024;
		byte[] buf = new byte[BUFFER_SIZE];
		int size = 0;
		try {
			url = new URL(photoUrl);
			httpUrl = (HttpURLConnection) url.openConnection();
			httpUrl.connect();
			bis = new BufferedInputStream(httpUrl.getInputStream());
			String fileName = UUID.randomUUID().toString().replaceAll("-", "") + ".jpg";
			imgPath = filePath + fileName;
			fos = new FileOutputStream(imgPath);
			while ((size = bis.read(buf)) != -1) {
				fos.write(buf, 0, size);
			}
			fos.flush();
		} catch (IOException e) {
			LogerUtil.error(PhotoAuthUtil.class, e, "http连接异常-----------");
			e.printStackTrace();
		} finally {
			try {
				fos.close();
				bis.close();
				httpUrl.disconnect();
			} catch (IOException e) {
				LogerUtil.error(PhotoAuthUtil.class, e, "关闭异常------------");
				e.printStackTrace();
			}
		}
		return imgPath;
	}
	
	/***
	 * 获取微名片点赞信息
	 * @param customerId
	 * @return
	 */
	public static Map<String,Object> queryCardClickInfo(String customerId,String custId){
		Map<String,Object> map = new HashMap<String,Object>();
		AppParam param  = new AppParam("wzClickCardRecordService","query");
		param.addAttr("customerId", customerId);
		param.addAttr("custId", custId);
		param.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_zx));
		AppResult clickResult = RemoteInvoke.getInstance().callNoTx(param);
		//点赞状态 0未点赞 1-已点赞
		String dzStatus = "0";
		if(clickResult.getRows().size() > 0){
			dzStatus = "1";
		}
		map.put("dzStatus", dzStatus);
		return map;
	}
	
	/***
	 * 获取收藏信息
	 * @param customerId
	 * @return
	 */
	public static Map<String,Object> queryCollectInfo(String customerId,String recordId){
		Map<String,Object> map = new HashMap<String,Object>();
		AppParam param  = new AppParam("wzCardCollectService","query");
		param.addAttr("customerId", customerId);
		param.addAttr("collectType", WzConstant.WZ_CARD_COLLECT_TYPE_1);
		param.addAttr("recordId", recordId);
		param.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_zx));
		AppResult queryResult = RemoteInvoke.getInstance().callNoTx(param);
		//收藏状态 0-未收藏 1-已收藏
		String collectStatus = "0";
		if(queryResult.getRows().size() > 0 && !StringUtils.isEmpty(queryResult.getRow(0))){
			String collectId = StringUtil.getString(queryResult.getRow(0).get("collectId"));
			map.put("collectId", collectId);
			collectStatus = "1";
		}
		map.put("collectStatus", collectStatus);
		return map;
	}
	/***
	 * 获取模板Id
	 * @param customerId
	 * @return
	 */
	public static String queryTempId(String adCode){
		String tempId = "";
		AppParam adTempparam = new AppParam("wzCardTemplateService","query");
		adTempparam.addAttr("adCode", adCode);
		adTempparam.setRmiServiceName(AppProperties.
				getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_zx));
		AppResult adTempResult = RemoteInvoke.getInstance().callNoTx(adTempparam);
		if(adTempResult.getRows().size() > 0 && !StringUtils.isEmpty(adTempResult.getRow(0))){
			tempId = StringUtil.getString(adTempResult.getRow(0).get("tempId"));
		}
		return tempId;
	}
	
	/**
	 * 维护登录信息
	 * @param request
	 * @return
	 */
	public static AppResult updateLoginMessage(HttpServletRequest request, Object customerId){
		AppParam updateParams = new AppParam("wzCustService", "update");
		updateParams.addAttr("customerId", customerId);
		updateParams.addAttr("lastLoginTime", new Date());
		updateParams.addAttr("lastLoginIp", DuoduoSession.getIpAddress(request));
		updateParams.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_zx));
		return RemoteInvoke.getInstance().call(updateParams);
	}
	
	/**
	 * 校验微名片企业用户基本参数
	 */
	public static AppResult validateCompanyParams(AppParam param) {
		AppResult result = new AppResult();
		String telephone = StringUtil.getString(param.getAttr("telephone"));
		String realName = StringUtil.getString(param.getAttr("realName"));
		String company = StringUtil.getString(param.getAttr("company"));
		String weChat = StringUtil.getString(param.getAttr("weChat"));
		String sex = StringUtil.getString(param.getAttr("sex"));
		if(StringUtils.isEmpty(realName)){
			return CustomerUtil.retErrorMsg("尊称不能为空");
		}
		// 验证手机号
		if(!ValidUtils.validateTelephone(telephone)){
			return CustomerUtil.retErrorMsg("请输入正确的手机号码");
		}
		if(StringUtils.isEmpty(company)){
			return CustomerUtil.retErrorMsg("公司不能为空");
		}
		if(StringUtils.isEmpty(weChat)){
			return CustomerUtil.retErrorMsg("微信公众号不能为空");
		}
		if(StringUtils.isEmpty(sex)){
			return CustomerUtil.retErrorMsg("性别不能为空");
		}
		return result;
	}
}
