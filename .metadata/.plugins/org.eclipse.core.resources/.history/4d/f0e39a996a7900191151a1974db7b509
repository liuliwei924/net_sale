package org.xxjr.job.listener.busi;

import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.ddq.active.mq.message.CustMessageSend;
import org.ddq.active.mq.message.RmiServiceSend;
import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.core.SpringAppContext;
import org.ddq.common.util.DateUtil;
import org.ddq.common.util.LogerUtil;
import org.ddq.common.util.StringUtil;
import org.ddq.job.util.JobUtil;
import org.ddq.common.core.service.RemoteInvoke;
import org.springframework.util.StringUtils;
import org.xxjr.busi.util.ApplyUnionUtil;
import org.xxjr.busi.util.BorrowConstant;
import org.xxjr.sys.util.ServiceKey;

/**
 * 5天未被抢的单子修改为无效单，并通知客户
 * 
 * @author 2017-01-11 by liulw 
 *
 */
public class OverTimeApplyUtil{
	
	public static void notify(Object processId) {
		try{
			LogerUtil.log("InvalidDaiBorrowProccessJob:" + ":startTime:" + new Date());
			// 周末不取消
			Calendar calendar = Calendar.getInstance();
			if(calendar.get(Calendar.DAY_OF_WEEK) == Calendar.SUNDAY ||   
		             calendar.get(Calendar.DAY_OF_WEEK) == Calendar.SATURDAY){  
		         return;  
		     }  
			Date d1 = new Date();
			//取消 5天前的数据
			String startApplyTime =DateUtil.toStringByParttern(
					DateUtil.getNextDay(d1, -12),
					DateUtil.DATE_PATTERN_YYYY_MM_DD);
			
			String endApplyTime =DateUtil.toStringByParttern(
					DateUtil.getNextDay(d1, -5),
					DateUtil.DATE_PATTERN_YYYY_MM_DD);
			
			AppParam updateParam = new AppParam();
			updateParam.addAttr("startApplyTime", startApplyTime);
			updateParam.addAttr("endApplyTime", endApplyTime);
			updateParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_busi));
			try{
				closeCustApply(updateParam);
			}catch(Exception e){
				LogerUtil.error(OverTimeApplyUtil.class, e, "通知客户申请的贷款失效处理失败");
			}
			
			updateParam.setService("daiBorrowExtService");
			updateParam.setMethod("updateInvalidDaiBorrow");
			AppResult updateResult = RemoteInvoke.getInstance().call(updateParam);
			Integer totalCount = (Integer)updateResult.getAttr(DuoduoConstant.DAO_Update_SIZE);

			JobUtil.addProcessExecute(processId, 
					"OverTimeApplyUtil size :"+ totalCount);
			LogerUtil.log("InvalidDaiBorrowProccessJob:" + ":endTime:" + new Date() +",size:" + totalCount);
		}catch(Exception e){
			LogerUtil.error(OverTimeApplyUtil.class, e, "修改4天之前失效订单失败。。。");
		}
	}

	
	
	/**
	 * 处理用户申请过时的数据
	 * @param closeMessage
	 */
	public static void closeCustApply(AppParam updateParam) {
		updateParam.setService("daiBorrowExtService");
		updateParam.setMethod("queryInvalidList");
		updateParam.setEveryPage(50);
		updateParam.setRmiServiceName(AppProperties.getProperties(
				DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_busi));
		AppResult updateResult = RemoteInvoke.getInstance().call(updateParam);
		
		if(updateResult.getRows().size() > 0){
			CustMessageSend messageSend = (CustMessageSend) SpringAppContext.getBean(CustMessageSend.class);
			dealWithOverTime(updateResult.getRows(), messageSend);
			int totalPage = updateResult.getPage().getTotalPage();
			if (totalPage > 1) {
				for (int i = 1; i < totalPage; i++) {
					updateParam.setCurrentPage(i + 1);
					updateResult = RemoteInvoke.getInstance().call(updateParam);
					dealWithOverTime(updateResult.getRows(), messageSend);
				}
			}
		}
	}
	
	public static void dealWithOverTime(List<Map<String,Object>> list, CustMessageSend messageSend){
		Map<String, Object> msgMap = new HashMap<String, Object>();
		
		for(Map<String,Object> map: list){
			try{
				
				Object sourceType = map.get("sourceType");
				Object customerId = map.get("customerId");
				//修改原来的申请状态为5
				if("5".equals(sourceType)){
					
					AppParam updateApply = new AppParam("borrowApplyService","update");
					updateApply.addAttr("applyId",map.get("applyId"));
					updateApply.addAttr("status", BorrowConstant.apply_status_8);
					updateApply.addAttr("updateTime", new Date());
					updateApply.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_busi_in));
					RemoteInvoke.getInstance().call(updateApply);
					
					//修改union表状态
					Map<String, Object> updateMap = new HashMap<String, Object>();
					try{
						Map<String, Object> queryApplyInfo = ApplyUnionUtil.queryApplyInfo(map.get("applyId"), null);
						updateMap.put("status", 2);
						updateMap.put("applyId", map.get("applyId"));
						updateMap.put("unionId", queryApplyInfo.get("unionId"));
						updateMap.put("service", "applyUnionService");
						updateMap.put("method", "unionUpdate");
						updateMap.put("rmiServiceName", AppProperties
								.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_busi));
						RmiServiceSend rmiSend = SpringAppContext.getBean(RmiServiceSend.class);
						rmiSend.sendExecuteMessage(updateMap);
					}catch(Exception e){
						LogerUtil.error(ApplyUnionUtil.class, e, "更新t_apply_union 失败，unionId=" +StringUtil.getString(updateMap.get("unionId")));
					}
				}
				
				if(!StringUtils.isEmpty(customerId)){
					//推送微信消息
					msgMap.put("realName", map.get("realName"));
					msgMap.put("loanAmount", map.get("loanAmount"));
					msgMap.put("applyTime",  map.get("applyTime"));
					messageSend.sendCustMessage(customerId.toString(), "daiBorrowOverTime", msgMap);
				}
			
			}catch(Exception e){
				LogerUtil.error(OverTimeApplyUtil.class, e, "修改失效单状态失败！");
			}
		}
		
	} 
}
