package org.xxjr.tools.util;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.NameValuePair;
import org.apache.commons.httpclient.methods.PostMethod;
import org.ddq.common.security.MD5Util;
import org.ddq.common.util.LogerUtil;
import org.ddq.model.cache.RedisUtils;
import org.springframework.util.StringUtils;

import com.alibaba.fastjson.JSONObject;

public class ZxtUtils {
	
	private static String URI = "http://creditsearch.credittone.com";
	
	private static String ORG_ID = "xiaoxiao";
	private static String USER_ID = "xiaoxiaoAPI";
	private static String API_PWD = "qeeD332GnMBePLkp";
	
	/**
	 * 增信通token缓存
	 */
	public static String KEY_ZXT_TOKEN = "key_zxt_token";
	
	/**
	 * 获取增信通token信息
	 * @return
	 */
	public static Object getZxtToken(){
		Object token = RedisUtils.getRedisService().get(KEY_ZXT_TOKEN);
		if(token == null){
			try {
				String requestUrl = URI + "/login";
				JSONObject paramJsonObj = initLoginParamJsonObj();
				String result = postClient(requestUrl,paramJsonObj);
				JSONObject jsonObject = JSONObject.parseObject(result);
				if(!"200".equals(jsonObject.get("status"))){
					LogerUtil.error(ZxtUtils.class, "getZxtToken error" + jsonObject.get("status_desc"));
					return token;
				}
				token = jsonObject.get("token");
				RedisUtils.getRedisService().set(KEY_ZXT_TOKEN, token.toString(), 60 * 90);
			} catch (Exception e) {
				LogerUtil.error(ZxtUtils.class, e, "getZxtToken error");
			}
		}
		return token;
	}
	
	/**
	 * 实名认证(二维核验)
	 * @param realName
	 * @param idNo
	 * @param telephone
	 * @return
	 */
	public static boolean realNameValid(String realName, String idNo, String telephone){
		String requestUrl = URI + "/mainService";
		
		Map<String,String> params = new HashMap<String, String>();
		params.put("name",realName);
		params.put("id_no",idNo);
		params.put("mobile_no",telephone);
		JSONObject paramJsonObj = initMainServiceParamJsonObj(params);
		
		String resultStr = postClient(requestUrl, paramJsonObj);
		JSONObject jsonObject = JSONObject.parseObject(resultStr);
		if(!"200".equals(jsonObject.get("status"))){
			LogerUtil.error(ZxtUtils.class, "realNameValid error:" + jsonObject.get("status_desc"));
			return false;
		}
		Object result = jsonObject.getJSONObject("data").getJSONObject("ind_info").getJSONObject("ind_real_verify").get("verify_result");
		if(result != null && "1".equals(result.toString())){
			return true;
		}
		return false;
	}
	
	/**
	 * 实名认证(三维核验)
	 * @param realName
	 * @param idNo
	 * @param telephone
	 * @param bankNo
	 */
	public static boolean realNameValid(String realName, String idNo, String telephone,String bankNo){
		String requestUrl = URI + "/mainService";
		
		Map<String,String> params = new HashMap<String, String>();
		params.put("name", realName);
		params.put("id_no", idNo);
		params.put("mobile_no", telephone);
		params.put("bank_card_no", bankNo);
		JSONObject paramJsonObj = initMainServiceParamJsonObj(params);
		
		String resultStr = postClient(requestUrl, paramJsonObj);
		JSONObject jsonObject = JSONObject.parseObject(resultStr);
		if(!"200".equals(jsonObject.get("status"))){
			LogerUtil.error(ZxtUtils.class, "realNameValid error:" + jsonObject.get("status_desc"));
			return false;
		}
		JSONObject resultJsonObj = jsonObject.getJSONObject("data").getJSONObject("ind_info").getJSONObject("ind_bank_card");
		// 三维核验可能存在为异常，ind_bank_card 为空
		if(resultJsonObj.size() == 0){
			return false;
		}
		Object result = resultJsonObj.get("verify_3d_result");
		if(result != null && "1".equals(result.toString())){
			return true;
		}
		return false;
	}

	/**
	 * 初始登陆信息
	 * @return
	 */
	private static JSONObject initLoginParamJsonObj(){
		JSONObject paramJsonObj = new JSONObject();
		paramJsonObj.put("org_id", ORG_ID);
		paramJsonObj.put("user_id", USER_ID);
		paramJsonObj.put("password", MD5Util.getEncryptByKey(API_PWD, ""));
		return  paramJsonObj;
	}
	
	public static JSONObject initMainServiceParamJsonObj(Map<String,String> params){
		JSONObject dataJson = new JSONObject();
		JSONObject paramJsonObj = new JSONObject();
		paramJsonObj.put("token", getZxtToken()); //必填，token 字符串
		paramJsonObj.put("id_type","1"); // 必填，证件类型 1身份证
		paramJsonObj.putAll(params);
		dataJson.put("Data", paramJsonObj);
		return  dataJson;
	}

	/**
	 * 实现http post请求
	 * @param url
	 * @param paramObj
	 * @return
	 */
	public static String postClient(String url, JSONObject paramObj){
		String str = "";
		HttpClient client = null;
		PostMethod method = null;
		try {
			client = new HttpClient();
			method = new PostMethod(url);
			method.setRequestHeader("Content-Type","application/x-www-form-urlencoded;charset=utf-8");

			NameValuePair[] param = new NameValuePair[paramObj.size()];
			int i = 0;
			Set<String> keys =  paramObj.keySet();
			for(String key : keys){
				String value = paramObj.getString(key);
				param[i] = new NameValuePair(key, value);
				i++;
			}
			method.setRequestBody(param);
			int statusCode = client.executeMethod(method);
			str = convertStreamToString(method.getResponseBodyAsStream());
			if(statusCode != 200){
				LogerUtil.error(ZxtUtils.class, "zxt postClient error:"+str);
			}
		}catch (Exception e){
			LogerUtil.error(ZxtUtils.class, e, "zxt postClient error");
		}finally {
			if(method != null){
				method.releaseConnection();
			}
		}
		return str;
	}

	public static String convertStreamToString(InputStream is) {
		BufferedReader reader = new BufferedReader(new InputStreamReader(is));
		StringBuilder builder = new StringBuilder();
		String line = null;
		try {
			while ((line = reader.readLine()) != null) {
				builder.append(line + "\n");
			}
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				is.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return builder.toString();
	}

	/**
	 * 过滤微信昵称中的表情
	 * @param source
	 * @param slipStr
	 * @return
	 */
	public static String filterEmoji(String source,String slipStr) {
        if (StringUtils.isEmpty(source)) {
            return source;
        }
        Pattern emoji = Pattern.compile("[\\ud800\\udc00-\\udbff\\udfff\\ud800-\\udfff]|[\ud83c\udc00-\ud83c\udfff]"
        		+ "|[\ud83d\udc00-\ud83d\udfff]|[\u2600-\u27ff]",
                Pattern.UNICODE_CASE | Pattern.CASE_INSENSITIVE);
        Matcher emojiMatcher = emoji.matcher(source);
        if (emojiMatcher.find()) {
            source = emojiMatcher.replaceAll(slipStr);
            return source;
        }
        return source;
    }
}
