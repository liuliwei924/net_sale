package org.xxjr.busi.util.push.impl;

import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.security.md5.Md5;
import org.ddq.common.util.JsonUtil;
import org.ddq.common.util.LogerUtil;
import org.ddq.common.util.StringUtil;
import org.ddq.zk.service.RemoteInvoke;
import org.springframework.util.StringUtils;
import org.xxjr.busi.util.CountGradeUtil;
import org.xxjr.busi.util.borrow.IdCardResolveUtil;
import org.xxjr.busi.util.push.PushCode;
import org.xxjr.busi.util.push.PushPlatformUtils;
import org.xxjr.sys.util.NumberUtil;
import org.xxjr.sys.util.ServiceKey;
import org.xxjr.sys.util.SysParamsUtil;

@PushCode(8)
public class PushBangUtil implements org.xxjr.busi.util.push.PushUtil{
	
	@Override
	public int pushData(Map<String, Object> row, Integer pushType) {
		int status = 2;
		try {
			Map<String, Object> config = PushPlatformUtils.getConfigByCode(pushType);
			
			if ((!PushPlatformUtils.checkChannelOpen(config))) {
				LogerUtil.log(PushBangUtil.class, config.get("pushName") + "推送未打开");
				return 3;
			}
			if ((!PushPlatformUtils.checkChannelMaxCount(config))) {
				LogerUtil.log(PushBangUtil.class, config.get("pushName") + "推送已达上限");
				return 3;
			}
			if ((!PushPlatformUtils.checkChannelLimit(row, config))) {
				LogerUtil.log(PushBangUtil.class, config.get("pushName") + "筛选条件无法通过");
				return 4;
			}
			if ((!PushPlatformUtils.checkStopDate(config))) {
				LogerUtil.log(PushBangUtil.class, config.get("pushName") + "推送数据推送已暂停");
				return 5;
			}
			Map<String, Object> params = getParams(row);
			String channelId = SysParamsUtil.getStringParamByKey("push_bang_cfg_channelId", "110394");
			String adsId = SysParamsUtil.getStringParamByKey("push_bang_cfg_adsId", "2102995");
			String url = SysParamsUtil.getStringParamByKey("push_bang_cfg_url", "http://d.95jr.com/api/mutiloan/newproduct.aspx");
			url = url + "?ChannelId="+channelId+"&AdsId="+adsId;
			
			Map<String, Object> resMap = PushPlatformUtils.httpPost(url, null, JsonUtil.getInstance().object2JSON(params), true, PushCompositeUtil.headers);
			AppParam updateParam = new AppParam("thirdPushPoolService", "updateStatus");
			updateParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_busi_in));
			updateParam.addAttrs(row);
			updateParam.addAttr("pushType", pushType);
			updateParam.addAttr("message", resMap.get("Msg"));
			if("0".equals(StringUtil.getString(resMap.get("Ret")))){
				status = 1;
			}
			updateParam.addAttr("status", status);
			RemoteInvoke.getInstance().call(updateParam);
			LogerUtil.log("帮帮优贷数据推送 任务 PushBangUtil end");
		} catch (Exception e) {
			LogerUtil.error(PushBangUtil.class, e, "PushBangUtil >>>>>>>>>>>>>>>>>>error");
		}
		return status;
	}
	
	public Map<String, Object> getParams (Map<String, Object> row) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("Name", StringUtil.getString(row.get("applyName")));
		String telephone = StringUtil.getString(row.get("telephone"));
		params.put("Phone", telephone);
		int creditType = NumberUtil.getInt(row.get("creditType"), -1);
		if (creditType == -1) {
			creditType = 1;
		}
		switch (creditType) {
		case 0:
			params.put("RecentCredit", 1);
			break;
		case 1:
			params.put("RecentCredit", 2);
			break;
		case 2:
			params.put("RecentCredit", 1);
			break;
		case 3:
			params.put("RecentCredit", 3);
			break;
		}
		params.put("CityName", StringUtil.getString(row.get("cityName")));
		params.put("Ip", StringUtils.isEmpty(row.get("applyIp")) ? "127.0.0.1" : StringUtil.getString(row.get("applyIp")));
		params.put("ProdIdArrayString", "*");
		String channelId = SysParamsUtil.getStringParamByKey("push_bang_cfg_channelId", "110394");
		String adsId = SysParamsUtil.getStringParamByKey("push_bang_cfg_adsId", "2102995");
		params.put("Cert", Md5.getInstance().encrypt(channelId + "_" + adsId + "_" +telephone));
		params.put("IsAcceptRecommend", 1);
		params.put("IsAddYwx", 0);
		
		String sex = StringUtil.getString(row.get("sex"));//性别处理
		if (StringUtils.isEmpty(sex)) {
			sex = IdCardResolveUtil.getSex(StringUtil.getString("identifyNo")).toString();
		}
		if ("1".equals(sex)) {
			params.put("Sex", "M");
		} else {
			params.put("Sex", "F");
		}
		
		//出生日期处理
		int age = NumberUtil.getInt(row.get("age"), -1);
		if (age == -1 || age <= 22 || age >= 60) {
			age = 28;
		}
		Random random = new Random();
		Calendar ca = Calendar.getInstance();
		int year = ca.get(Calendar.YEAR)-age;
		int month = random.nextInt(12)%(12) + 1;
		int day = random.nextInt(30)%(30) + 1;
		String birthday = year +"-" +(month<10? "0" +month : month+"") +"-" + (day<10 ? "0" +day : day+"");
		params.put("Birthday", birthday);
		
		params.put("LoanAmount", row.get("loanAmount"));
		int houseType = NumberUtil.getInt(row.get("houseType"), 2);
		switch (houseType) {
		case 2:
			params.put("HouseProperty", 1);
			break;
		case 3:
			params.put("HouseProperty", 2);
			break;
		case 4:
			params.put("HouseProperty", 3);
			break;
		}
		
		int carType = NumberUtil.getInt(row.get("carTYpe"), 2);
		switch (carType) {
		case 2:
			params.put("CarProperty", 1);
			break;
		case 3:
			params.put("CarProperty", 2);
			break;
		case 4:
			params.put("CarProperty", 3);
			break;
		}
		
		int insurType = NumberUtil.getInt(row.get("insurType"), 0);
		params.put("IsHasBx", CountGradeUtil.judgeInsurType(insurType) ? 1 : 0);
		
		int workType = NumberUtil.getInt(row.get("workType"), 1);
		if (workType == 4) {
			params.put("CareerType", 0);
		}else {
			params.put("CareerType", 1);
		}
		
		int wagesType = NumberUtil.getInt(row.get("wagesType"), 2);
		params.put("PayWay", (wagesType -1));
		
		int income = 1000;
		if ((!StringUtils.isEmpty(row.get("income"))) && (NumberUtil.getDouble(row.get("income"), 0) > 0)) {
			income = NumberUtil.getInt(row.get("income"), 0);
		}else if ((!StringUtils.isEmpty(row.get("pubManageLine"))) && (NumberUtil.getDouble(row.get("pubManageLine"), 0) > 0)) {
			int pubManageLine = NumberUtil.getInt(row.get("pubManageLine"), 0);
			income = pubManageLine * 10000;
		}else if ((!StringUtils.isEmpty(row.get("cashMonth"))) && (NumberUtil.getDouble(row.get("cashMonth"), 0) > 0)) {
			income = NumberUtil.getInt(row.get("cashMonth"), 0);
		}
		if (income <= 0) {
			income = 1000;
		}
		params.put("MonthlySalary", income);
		
		int fundType = NumberUtil.getInt(row.get("fundType"), 2);
		int socialType = NumberUtil.getInt(row.get("fundType"), 2);
		if (CountGradeUtil.judgeFundType(fundType) || CountGradeUtil.judgeSocialType(socialType)) {
			params.put("ShebaoOrGongjijin", 1);
		}else {
			params.put("ShebaoOrGongjijin", 3);
		}
		
		int manageYear = NumberUtil.getInt(row.get("manageYear"), 0);
		if (manageYear == 1) {
			params.put("WorkLong", 1);
		} else if (manageYear == 2) {
			params.put("WorkLong", 2);
		}else {
			params.put("WorkLong", 3);
		}
		return params;
	}


}
