package org.xxjr.fang.util;

import java.io.Serializable;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.math.RandomUtils;
import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.core.SpringAppContext;
import org.ddq.common.core.service.SoaManager;
import org.ddq.common.exception.SysException;
import org.ddq.common.util.DateUtil;
import org.ddq.model.cache.RedisUtils;
import org.ddq.zk.service.RemoteInvoke;
import org.xxjr.cust.util.member.ScoreUtils;
import org.xxjr.goods.util.ExchangeUtil;
import org.xxjr.sys.util.ServiceKey;
import org.xxjr.sys.util.SysParamsUtil;

public class LotteryUtil {
	
    private final static  String KEY_CONFIG = "LotteryCfg_fang_";
    //抽奖需要积分
    public final static String KEY_BUCKLE_INTEGRAL="buckle_integral_score";
    //每天抽奖次数限制
    public final static String KEY_DAY_LOTTERY_COUNT="day_lottery_count";
	//抽奖人配送信息
    public final static String KEY_CONFIGNEE = "Lottery_fang_consignee_";
	/**
	 * 摇奖后对奖品做相应处理
	 */
	public static AppResult getLottery(Object gzhId,Object openid,int orderIndex,String nickName){
		AppResult result=null;
		
		AppParam param = new AppParam();
		param.setService("lotteryConfigService");
		param.setMethod("query");
		param.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sho));
        param.addAttr("orderIndex", orderIndex);
		if (SpringAppContext.getBean("lotteryConfigService") == null) {
			result = RemoteInvoke.getInstance().call(param);
		}else{
			result = SoaManager.getInstance().invoke(param);
		}
        if(result.getRows().size()>0){
        	int wasteScore = SysParamsUtil.getIntParamByKey(KEY_BUCKLE_INTEGRAL, 10) * -1;
			ScoreUtils.scoreChangeOpenid(openid.toString(), gzhId.toString(), wasteScore, 0, "抽奖扣除");
        	Map<String,Object> lottery=result.getRow(0);
			AppParam record = new AppParam();
    		record.setService("lotteryRecordService");
    		record.setMethod("insert");
    		record.setRmiServiceName(AppProperties
    				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sho));
    		record.addAttr("openid", openid);
    		record.addAttr("lotteryId", orderIndex);
    		record.addAttr("nickName", nickName);
    		record.addAttr("costScore",wasteScore);
    		record.addAttr("status", 0);
    		if (SpringAppContext.getBean("lotteryRecordService") == null) {
    			result = RemoteInvoke.getInstance().call(record);
    		}else{
    			result = SoaManager.getInstance().invoke(record);
    		}
    		Object type=lottery.get("type");
    		Object awardDtl=lottery.get("awardDtl");
    		Object recordId=result.getAttr("recordId");
    		if("1".equals(type.toString())){
    			result = ScoreUtils.scoreChangeOpenid(openid.toString(), gzhId.toString(), Integer.parseInt(awardDtl.toString()), 1, "抽奖获得");
    		}else{
    			AppParam params = new AppParam();
    			params.addAttr("awardId", awardDtl);
    			params.addAttr("openid", openid);
    			params.addAttr("gzhId", gzhId);
    			result = ExchangeUtil.lotteryRecord(params);
    		}
    		if(result.isSuccess()){
    			AppParam recordUpdate = new AppParam();
    			recordUpdate.setService("lotteryRecordService");
    			recordUpdate.setMethod("update");
    			recordUpdate.setRmiServiceName(AppProperties
    				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sho));
    			recordUpdate.addAttr("recordId", recordId);
    			recordUpdate.addAttr("status", 1);
        		if (SpringAppContext.getBean("lotteryRecordService") == null) {
        			result = RemoteInvoke.getInstance().call(recordUpdate);
        		}else{
        			result = SoaManager.getInstance().invoke(recordUpdate);
        		}
    		}
        }else{
        	throw new SysException("奖品不存在或已被删除");
        }
		return result;
	}
	
	
	/**
	 * 获取奖品配置
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public static List<Map<String, Object>> getLotteryConfig(){
		List<Map<String, Object>> list = (List<Map<String, Object>>)RedisUtils.getRedisService().get(KEY_CONFIG);
		if(list == null || list.size() == 0){
			list = refreshLotteryConfig();
		}
		return list;
	}
	
	
	/**
	 * 刷新奖品配置
	 * @return
	 */
	public static List<Map<String, Object>> refreshLotteryConfig(){
		AppParam param = new AppParam();
		param.setService("lotteryConfigService");
		param.setMethod("query");
		param.addAttr("status", "1");
		param.setOrderBy("orderIndex");
		param.setOrderValue("asc");
		AppResult result = null;
		param.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sho));
		if (SpringAppContext.getBean("lotteryConfigService") == null) {
			result = RemoteInvoke.getInstance().call(param);
		}else{
			result = SoaManager.getInstance().invoke(param);
		}
		List<Map<String, Object>> list =  result.getRows();
		RedisUtils.getRedisService().set(KEY_CONFIG, (Serializable)list, 4 * 60 * 60);
		return list;
	}
	
	/**
	 * 获取抽奖人配置
	 * @return
	 */
	public static Map<String, Object> getConsigneeCfg(Object gzhId,Object openId){
		AppParam param = new AppParam();
		Map<String, Object> map = new HashMap<String,Object>();
		param.setService("lotteryConsigneeService");
		param.setMethod("query");
		param.addAttr("gzhId", gzhId);
		param.addAttr("openId", openId);
		AppResult result = null;
		param.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sho));
		if (SpringAppContext.getBean("lotteryConfigService") == null) {
			result = RemoteInvoke.getInstance().call(param);
		}else{
			result = SoaManager.getInstance().invoke(param);
		}
		if(result.getRows().size() > 0){
			map = result.getRow(0);
		}
		return map;
	}
	
	/**
	 * 生成对应的奖品
	 * @return
	 */
	public static int getRandomLottery(){
		 List<Map<String, Object>> list =getLotteryConfig();
		 int sumRate = 0;
		 int startSumRate =0;
		 int endSumRate =0;
		 int size = list.size();
		 Integer[] rates = new Integer[size+1];
		 rates[0] = 0;
		 for (int i=0;i<list.size();i++) {
			 rates[i+1] = Integer.parseInt(list.get(i).get("winScale").toString());
			 sumRate += rates[i+1];
		 }
		 int random =RandomUtils.nextInt(sumRate);
         for (int i = 0; i < list.size(); i++) {
        	 startSumRate +=rates[i];
        	 endSumRate += rates[i+1];
			if(random >=startSumRate && random < endSumRate){
				return i+1;
			}
		}
		return SysParamsUtil.getIntParamByKey("fangLotteryIndex", 3);
	}
	

	
	/**
	 * 判断用户是否可以抽奖
	 * 
	 */
	public static boolean haslottery(Object gzhId,Object openid){
		AppParam param = new AppParam();
		param.setService("lotteryRecordService");
		param.setMethod("hasLotteryRecord");
		param.addAttr("openid", openid);
		String createTime=DateUtil.toStringByParttern(new Date(),DateUtil.DATE_PATTERN_YYYY_MM_DD);
		param.addAttr("createTime", createTime);
		param.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sho));
		AppResult result = RemoteInvoke.getInstance().call(param);
		Object size=result.getRows().get(0);
		return Integer.parseInt(size.toString()) >= SysParamsUtil.getIntParamByKey(KEY_DAY_LOTTERY_COUNT, 3)?false:true;
	}
	
}
