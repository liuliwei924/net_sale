package org.ddq.active.mq.activity;

import java.util.HashMap;
import java.util.Map;

import org.ddq.active.mq.MQNames;
import org.ddq.active.mq.XxjrMqSendUtil;
import org.ddq.active.mq.message.RmiServiceSend;
import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppProperties;
import org.ddq.common.core.SpringAppContext;
import org.ddq.common.util.LogerUtil;
import org.springframework.util.StringUtils;
import org.xxjr.cust.util.CustConstant;
import org.xxjr.cust.util.info.CustomerIdentify;
import org.xxjr.cust.util.invite.CustInviteUtil;
import org.xxjr.sys.util.NumberUtil;
import org.xxjr.sys.util.ServiceKey;
import org.xxjr.sys.util.active.ActiveConstants;


/***
 * 推荐奖励相关
 * @author qinxcb
 *
 */
public class RewardRefererUtil {
	
	/**
	 * 实名认证奖励推荐人
	 * @param customerId
	 */
	public static void rewardIdentifyReferer(Object customerId){
		Map<String, Object> userMap = CustomerIdentify.getCustIdentify(customerId.toString());
		Object referer = userMap.get("referer");
		if(!StringUtils.isEmpty(referer)){
			Map<String,Object> map = new HashMap<String,Object>();
			map.put("customerId", referer);
			map.put("type", CustConstant.SCORE_TYPE_6);
			map.put(ActiveConstants.KEY_PARAM_operator, ActiveConstants.Operator_Identify);
			map.put("refererKey", "referer");
			map.put("refererFlag", "1");
			map.put("createDesc", "推荐人实名认证");
			try {
				XxjrMqSendUtil.sendMessage(map, MQNames.custActive);
			} catch (Exception e) {
				LogerUtil.error(RewardRefererUtil.class, e, "rewardIdentifyReferer error!");
				XxjrMqSendUtil.saveFailureLog("rewardIdentifyReferer", map);
			}	
		}
	}
	
	/**
	 * 工作认证奖励推荐人
	 * @param customerId
	 */
	public static void rewardIdentifyCardReferer(Object customerId){
		Map<String, Object> custInfo = CustomerIdentify.getCustIdentify(customerId.toString());
		Object referer = custInfo.get("referer");
		if(!StringUtils.isEmpty(referer)){
			// 工作认证成功奖励推荐人
			if (CustInviteUtil.sendTicketByActivity(referer)) {
				Map<String,Object> rewardMap = new HashMap<String,Object>();
				rewardMap.put("refererIdentifyKey", "refererIdentify");
				rewardMap.put(ActiveConstants.KEY_PARAM_operator, ActiveConstants.Operator_IdentifyCard);
				rewardMap.put("refererIdentifyCardKey", "refererIdentifyCard");
				rewardMap.put("customerId", referer);
				rewardMap.put("type", CustInviteUtil.TICKET_TYPE_RECOMMEND);
				rewardMap.put("activityType", "2");
				rewardMap.put("infoType", "1");
				rewardMap.put("selfId",customerId);
				rewardMap.put("createDesc", "一级好友工作认证");
				String smsContent = "您邀请的好友"+custInfo.get("realName")+"工作认证成功，奖励您1张5折劵，有效期3天，请尽快使用哦！";
				rewardMap.put("smsContent", smsContent);
				sendReward(rewardMap);
			}
			
			// 邀请多个新用户完成工作认证和首次充值，奖励推荐人
			rewardByIdentifyCardAndRecharge(customerId.toString());
		}
	}
	
	/**
	 * 新用户完成首次充值奖励本人
	 * @param customerId
	 */
	public static void rewardByFirstRecharge(String customerId){
		Map<String, Object> custInfo =  CustomerIdentify.getCustIdentify(customerId);
		if (custInfo.isEmpty() || StringUtils.isEmpty(custInfo.get("referer"))) {
			return;
		}
		Object referer = custInfo.get("referer");
		// 好友完成首次充值，赠送推荐人
		if (CustInviteUtil.inviteActivityIsInActive() && CustInviteUtil.sendTicketByActivity(referer)) {
			Map<String,Object> rewardMap = new HashMap<String,Object>();
			rewardMap.put("customerId", referer);
			rewardMap.put("refererKey", "referer");
			rewardMap.put(ActiveConstants.KEY_PARAM_operator, ActiveConstants.Operator_First_Recharge);
			rewardMap.put("createDesc",  "好友首次充值");
			rewardMap.put("activityType", "2");
			rewardMap.put("selfId",customerId);
			rewardMap.put("type", CustInviteUtil.TICKET_TYPE_RECOMMEND);
			rewardMap.put("infoType", "1");// 1表示根据configId获取劵信息
			Object userName = custInfo.get("realName");
			if (StringUtils.isEmpty(userName)) {
				userName = custInfo.get("userName");
			}
			String smsContent = "您邀请的好友"+userName+"完成首次充值，奖励您1张免单券，有效期3天，请尽快使用哦！";
			rewardMap.put("smsContent", smsContent);
			sendReward(rewardMap);
		}
	}
	
	/**
	 * 邀请多个新用户完成工作认证和首次充值，奖励推荐人
	 * @param customerId	用户id
	 * @param refererNums	推荐人数
	 * @param refererCount  达到奖励的推荐数量
	 */
	public static void rewardByIdentifyCardAndRecharge(Object customerId, Object refererNums, int refererCount){
		Map<String,Object> rewardMap = new HashMap<String,Object>();
		rewardMap.put("customerId", customerId);
		rewardMap.put("refererIdentifyKey", "refererIdentify");
		rewardMap.put(ActiveConstants.KEY_PARAM_operator, ActiveConstants.Operator_IdentifyCardAndRecharge);
		rewardMap.put("refererNums", refererCount);
		rewardMap.put("type", CustInviteUtil.TICKET_TYPE_EXTRA);
		rewardMap.put("createDesc", "好友完成工作认证和充值");
		rewardMap.put("rewardType", "rewardReferer");
		rewardMap.put("infoType", "1");// 1表示根据configId获取劵信息
		rewardMap.put("activityType", "2");
		int sendTicketCount = NumberUtil.getInt(refererCount) == 10?7:3;
		String smsContent = "您邀请的"+refererNums+"位好友都完成了工作认证和首次充值，额外奖励您"+sendTicketCount+"张五折券，有效期3天，请尽快使用哦！";
		rewardMap.put("smsContent", smsContent);
		sendReward(rewardMap);
	}
	
	/**
	 * 邀请多个新用户完成工作认证和首次充值，奖励推荐人
	 * @param customerId    用户id
	 */
	public static void rewardByIdentifyCardAndRecharge(String customerId) {
		Map<String, Object> custInfo = CustomerIdentify.getCustIdentify(customerId);
		if (custInfo.isEmpty() || StringUtils.isEmpty(custInfo.get("referer"))) {
			return;
		}
		Map<String, Object> paramsMap = new HashMap<String, Object>();
		paramsMap.put("service", "custActivityRecordService");
		paramsMap.put("method", "queryRewardSituation");
		paramsMap.put("customerId", custInfo.get("referer"));
		paramsMap.put("rmiServiceName", AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_cust));
		try {
			RmiServiceSend messageSend = SpringAppContext.getBean(RmiServiceSend.class);
			messageSend.sendExecuteMessage(paramsMap);
		} catch (Exception e) {
			LogerUtil.error(RewardRefererUtil.class, e, "rewardByIdentifyCardAndRecharge error");
		}
	}
	
	/**
	 * 发送奖励
	 * @param params
	 */
	private static void sendReward(Map<String,Object> params){
		try {
			XxjrMqSendUtil.sendMessage(params, MQNames.custActive);
		} catch (Exception e) {
			LogerUtil.error(RewardRefererUtil.class, e, "sendReward error!");
			XxjrMqSendUtil.saveFailureLog("sendReward", params);
		}
	}
	
}
