package org.xxjr.mq.listener.receiver;

import java.util.Map;

import javax.annotation.PreDestroy;

import org.ddq.active.mq.XxjrMqSendUtil;
import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.util.LogerUtil;
import org.llw.ddq.mq.rabbitmq.RabbitMqConfig;
import org.ddq.common.core.service.RemoteInvoke;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.xxjr.mq.listener.consumer.RabbitMqConsumer;
import org.xxjr.mq.listener.util.XxjrInitAnnotation;
import org.xxjr.sys.util.ServiceKey;

@Component
@XxjrInitAnnotation(beanName="xxxjRewardReceiver",initMethod="init")
public class XxxjRewardReceiver extends RabbitMqConsumer {
	
	@Autowired
	private RabbitMqConfig rabbitMqConfig;
	
	@Value("${rabbit.queue.xxxjReward}")
	private String queueName;

	public void onMessage(Map<String, Object> param) {
		try {
			LogerUtil.log(XxxjRewardReceiver.class,"XxxjRewardReceiverMessage params:" + param.toString());
			// 保留：1做任务领取狗粮，2直接发放狗币， 3贷款申请奖励狗粮
			Object type = param.get("type");
			Object customerId = param.get("customerId");
			if("1".equals(type)){
				Object taskId = param.get("taskId");
				Object typeId = param.get("typeId");
				AppParam sendParam = new AppParam("xjRecAbilityRecordService","sendAbility");
				sendParam.addAttr("customerId", customerId);
				sendParam.addAttr("taskId", taskId);
				sendParam.addAttr("typeId", typeId);
				sendParam.setRmiServiceName(AppProperties
							.getProperties(DuoduoConstant.RMI_SERVICE_START
									+ ServiceKey.Key_XJ));
				RemoteInvoke.getInstance().call(sendParam);
			}else if("2".equals(type)){
				Object coinValue = param.get("coinValue");
				Object typeId = param.get("typeId");
				AppParam sendParam = new AppParam("xjRecCoinRecordService","directSendCoin");
				sendParam.addAttr("customerId", customerId);
				sendParam.addAttr("coinValue", coinValue);
				sendParam.addAttr("typeId", typeId);
				sendParam.setRmiServiceName(AppProperties
							.getProperties(DuoduoConstant.RMI_SERVICE_START
									+ ServiceKey.Key_XJ));
				RemoteInvoke.getInstance().call(sendParam);
			}
		} catch (Exception e) {
			LogerUtil.error(XxxjRewardReceiver.class, e, "XxxjRewardReceiver reward params:" + param.toString());
			XxjrMqSendUtil.saveFailureLog("XxxjRewardReceiver", param);
		}
	}
	
	@Override
	public void init(String queueName ,RabbitMqConfig rabbitMqConfig) {
		super.init(queueName,rabbitMqConfig);
	}
	
    public void init() {
		init(queueName,rabbitMqConfig);
	}
	
	@PreDestroy
	public void destroy(){
		reaseResource();
	}
	
}
