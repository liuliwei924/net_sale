package org.xxjr.job.listener.busi.sum;

import java.util.Date;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.core.service.RemoteInvoke;
import org.ddq.common.util.DateUtil;
import org.ddq.common.util.LogerUtil;
import org.llw.job.core.BaseExecteJob;
import org.llw.job.util.JobConstant;
import org.llw.job.util.JobUtil;
import org.llw.model.cache.RedisUtils;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;
import org.xxjr.busi.util.push.PushPlatformUtils;
import org.xxjr.job.listener.busi.kf.ExportJobUtil;
import org.xxjr.job.listener.busi.store.StoreCallRecordUtils;
import org.xxjr.job.listener.busi.sum.util.AppSumUtil;
import org.xxjr.job.listener.busi.sum.util.BaseSumUtil;
import org.xxjr.job.listener.busi.sum.util.BookSumUtil;
import org.xxjr.job.listener.busi.sum.util.RetSumUtil;
import org.xxjr.job.listener.busi.sum.util.SaleSumUtil;
import org.xxjr.job.listener.busi.sum.util.SignSumUtil;
import org.xxjr.job.listener.busi.sum.util.SumTeamUtil;
import org.xxjr.job.listener.busi.sum.util.SumaryChannelUtil;
import org.xxjr.job.listener.xxxj.DailySumUtil;
import org.xxjr.sys.util.ServiceKey;
import org.xxjr.sys.util.SysParamsUtil;

/**
 * 延迟统计数据
 *
 */
@Lazy
@Component
public class DelaySumJob implements BaseExecteJob {

	@Override
	public AppResult executeJob(AppParam param) {
		AppResult result = new AppResult();
		Object processId = param.getAttr(JobConstant.KEY_processId);
		String today = DateUtil.toStringByParttern(DateUtil.getNextDay(new Date(),-1),DateUtil.DATE_PATTERN_YYYY_MM_DD);
		String toMonth = DateUtil.toStringByParttern(new Date(),"yyyy-MM");

		//查询需要统计的客服
		AppParam summaryKf = new AppParam("custRightService", "querySummary");
		summaryKf.setRmiServiceName(AppProperties.
						getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_cust));
		AppResult summaryResult = RemoteInvoke.getInstance().callNoTx(summaryKf);
		String isSummaryKf = null;
		if(summaryResult.getRows().size() > 0){
			isSummaryKf = summaryResult.getRow(0).get("customerIds").toString();
		}
		
		//基本数据统计
		BaseSumUtil.channelBase(processId, today);
		BaseSumUtil.kfBase(processId, today, isSummaryKf);
		BaseSumUtil.storeBase(processId, today);
		BaseSumUtil.orgBase(processId, today);
		BaseSumUtil.totalBase(processId, today);
		BaseSumUtil.storeBaseMonth(processId, toMonth);
		BaseSumUtil.riskBase(processId, today);
		BaseSumUtil.wzCardSum(processId, today);
		BaseSumUtil.dealOrderTypeSum(processId, today);
		BaseSumUtil.orderRateSum(processId, today);
		BaseSumUtil.channelDealOrderTypeSum(processId, today);
		BaseSumUtil.orgDealOrderSum(processId, today);
		
		//上门统计
		BookSumUtil.channelBook(processId, today);
		BookSumUtil.kfBook(processId, today, isSummaryKf);
		BookSumUtil.storeBook(processId, today);
		BookSumUtil.sumTotalBook(processId, today);
		BookSumUtil.storeBookMonth(processId, toMonth);
		
		//签单统计
		SignSumUtil.signFailChannel(processId, today);
		SignSumUtil.channelSign(processId, today);
		SignSumUtil.kfSign(processId, today, isSummaryKf);
		SignSumUtil.storeSign(processId, today);
		SignSumUtil.sumTotalSign(processId, today);
		SignSumUtil.storeSignMonth(processId, toMonth);
		
		//回款相关统计
		RetSumUtil.channelRet(processId, today);
		RetSumUtil.kfRet(processId, today, isSummaryKf);
		RetSumUtil.storeRet(processId, today);
		RetSumUtil.retByBase(processId, today);
		RetSumUtil.storeRetMonth(processId, toMonth);
		
		//天狗窝用户注册、星舰币发放统计
		DailySumUtil.sumCust(processId);
		DailySumUtil.sumCoin(processId);
		
		//天狗窝骰子游戏每天生成下一天的游戏记录
		createDiceGame(processId);
		
		
		//挂卖相关统计
		SaleSumUtil.channelSale(processId, today);
		SaleSumUtil.kfSale(processId, today, isSummaryKf);

		SaleSumUtil.saleByBase(processId, today);
		
		//简单实时统计
		SumaryChannelUtil.simpleSummary(processId,today);

	
		// kf跟进的信贷员充值统计
		BaseSumUtil.successChargeByKf(processId, today);
		BaseSumUtil.mjbSuccessChargeByKf(processId, today);
		
		//門店人員通話統計
		StoreCallRecordUtils.sumStoreCall(processId, today);
		
		try {
			//推送数据统计
			int count = PushPlatformUtils.sumPushData(today);
			JobUtil.addProcessExecute(processId, "推送数据插入成功" + count +" 条记录");
		} catch (Exception e) {
			LogerUtil.error(PushPlatformUtils.class, e, "PushPlatformUtils sumPushData error");
		}
		try {
			PushPlatformUtils.sumChannelPushData(today);
		} catch (Exception e) {
			LogerUtil.error(PushPlatformUtils.class, e, "PushPlatformUtils sumChannelPushData error");
		}
		// 退款倒推挂卖重新统计
		SaleSumUtil.updateFailSale(processId);
		
		//APP登录，贷款申请，抢单情况按天统计
		sumInfoByDate(processId, today);
		
		//天狗窝用户来源统计
		DailySumUtil.sumCustSource(processId);

		
		//app渠道注册统计
		AppSumUtil.sumAppRegisterCount(processId,today);
		
		//在每天最后时刻更新申请总数
		try{
			refreshApplyCount();
		} catch (Exception e) {
			LogerUtil.error(DelaySumJob.class, e, "DelaySumJob BorrowApplyUtils refreshApplyCount error");
		}
		
		SumTeamUtil.sumBaseTeamData(processId, today);
		SumTeamUtil.updateFailSale(processId);
		//定期删除导出的文件
		ExportJobUtil.deleteExpireDir(processId);
		return result;
	}

	public static final String allApplyCountKey = "key_all_apply_count";
	
	public static void refreshApplyCount () {
		AppParam queryParam = new AppParam();
		String timeStr = DateUtil.toStringByParttern(new Date(), DateUtil.DATE_PATTERN_YYYY_MM_DD);
		queryParam.addAttr("queryCountTime", timeStr);
		int queryCount = queryCount(queryParam);
		RedisUtils.getRedisService().set(allApplyCountKey, queryCount);
	}
	
	public static int queryCount(AppParam params) {
		params.setService("borrowApplyService");
		params.setMethod("queryCount");
		params.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START
						+ ServiceKey.Key_busi_in));

		AppResult result = RemoteInvoke.getInstance().callNoTx(params);

		int count = (Integer) result.getAttr(DuoduoConstant.TOTAL_SIZE);

		return count;
	}
	
	//APP登录，贷款申请，抢单情况按天统计
	public AppResult sumInfoByDate(Object processId,String today) {
		AppResult result = new AppResult();
		try {
			AppParam insertParam = new AppParam("sumInfoBydateService","save");
			insertParam.addAttr("recordDate", today);
			
			//获取
			AppParam custLoginParam = new AppParam("custLoginLogService","queryLoginCount");
			custLoginParam.addAttr("recordDate", today);
			custLoginParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_cust));
			AppResult custLoginResult = RemoteInvoke.getInstance().callNoTx(custLoginParam);
			insertParam.addAttrs(custLoginResult.getRow(0));
			
			AppParam applyParam = new AppParam("thirdDataService","queryApplyCount");
			applyParam.addAttr("recordDate", today);
			applyParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_busi_in));
			AppResult applyResult = RemoteInvoke.getInstance().callNoTx(applyParam);
			insertParam.addAttrs(applyResult.getRow(0));
			
			AppParam robParam = new AppParam("daiBorrowReService","queryRobCount");
			robParam.addAttr("recordDate", today);
			robParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_busi));
			AppResult robResult = RemoteInvoke.getInstance().callNoTx(robParam);
			insertParam.addAttrs(robResult.getRow(0));
			
			insertParam.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sum));
			result = RemoteInvoke.getInstance().call(insertParam);
		} catch (Exception e) {
			LogerUtil.error(DelaySumJob.class, e,
					"sumInfoByDate >>>>>>>>>>>>>>>>>>error");
			JobUtil.addProcessExecute(processId, "APP登录，贷款申请，抢单情况按天统计：" + e.getMessage());
		}
		return result;
	}
	
	public static AppResult createDiceGame(Object processId) {
		AppResult result = new AppResult();
		try {
			String tomorrow = DateUtil.toStringByParttern(DateUtil.getDayFirstSecond(DateUtil.getNextDay(new Date(),1)),DateUtil.DATE_PATTERN_YYYY_MM_DD_HHMMSS);
			int timeInterval = SysParamsUtil.getIntParamByKey("xj_game_dice_interval", 30);
			AppParam createParam = new AppParam();
			createParam.setService("gameDiceService");
			createParam.setMethod("createDiceGame");
			createParam.addAttr("gameDate", tomorrow);
			createParam.addAttr("timeInterval", timeInterval);
			createParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_XJ));
			result = RemoteInvoke.getInstance().call(createParam);
		} catch (Exception e) {
			LogerUtil.error(DelaySumJob.class, e,
					"createDiceGame >>>>>>>>>>>>>>>>>>error");
			JobUtil.addProcessExecute(processId, "创建明天的骰子游戏记录错误：" + e.getMessage());
		}
		return result;
	}
}
