package org.xxjr.store.web.action.account.xxxj;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.exception.ExceptionUtil;
import org.ddq.common.util.DateUtil;
import org.ddq.common.util.LogerUtil;
import org.ddq.common.util.StringUtil;
import org.ddq.common.web.session.DuoduoSession;
import org.ddq.common.web.session.RequestUtil;
import org.llw.model.cache.RedisUtils;
import org.ddq.zk.service.RemoteInvoke;
import org.springframework.stereotype.Controller;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.xxjr.busi.util.store.StoreUserUtil;
import org.xxjr.cust.util.info.CustomerIdentify;
import org.xxjr.cust.util.info.CustomerUtil;
import org.xxjr.sys.util.NumberUtil;
import org.xxjr.sys.util.ServiceKey;
import org.xxjr.sys.util.SysParamsUtil;
import org.xxjr.sys.util.ValidUtils;

/**
 * 小小星舰客户管理
 * @author zenghw
 *
 */
@Controller()
@RequestMapping("/account/xj/")
public class XjCustAction {
	
	/**
	 * 查询当前已经注册用户
	 * @param request
	 * @return
	 */
	@RequestMapping("xjCust/queryCust")
	@ResponseBody
	public AppResult queryCust(HttpServletRequest request){
		AppResult result = new AppResult();
		try{
			AppParam param = new AppParam("xjCustService","queryCust");
			RequestUtil.setAttr(param, request);
			String nickNameAndTel = request.getParameter("nickNameAndTel");
			if(!StringUtils.isEmpty(nickNameAndTel)){
				if(ValidUtils.validateTelephone(nickNameAndTel)){//加快查询效率
					param.addAttr("telephone", nickNameAndTel);
					param.removeAttr("nickNameAndTel");
				}else{
					param.addAttr("nickName", nickNameAndTel);
					param.removeAttr("nickNameAndTel");
				}
			}
			param.setOrderBy("registerTime");
			param.setOrderValue("desc");
			param.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START
								+ ServiceKey.Key_XJ));
			result = RemoteInvoke.getInstance().callNoTx(param);
		}catch(Exception e){
			LogerUtil.error(XjCustAction.class, e, "queryCust error");
			ExceptionUtil.setExceptionMessage(e, result,
					DuoduoSession.getShowLog());
		}
		return result;
	}
	
	
	
	/**
	 * 修改当前已经注册用户
	 * @param request
	 * @return
	 */
	@RequestMapping("xjCust/updateCust")
	@ResponseBody
	public AppResult updateCust(HttpServletRequest request){
		AppResult result = new AppResult();
		String customerId = request.getParameter("customerId");
		if (StringUtils.isEmpty(customerId)) {
			result.setSuccess(false);
			result.setMessage("客户编号不能为空");
			return result;
		}
		String status = request.getParameter("status");
		if (StringUtils.isEmpty(status)) {
			result.setSuccess(false);
			result.setMessage("用户状态不能为空");
			return result;
		}
		try{
			AppParam param = new AppParam("xjCustService","update");
			param.addAttr("customerId", customerId);
			param.addAttr("status", status);
			param.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START
								+ ServiceKey.Key_XJ));
			result = RemoteInvoke.getInstance().call(param);
			
			if(result.isSuccess()){
				RedisUtils.getRedisService().del("CustXJ" +customerId);
				if("1".equals(status)){//修改为正常用户更新最近获币时间
					AppParam updateLevel = new AppParam("xjCustLevelService","update");
					updateLevel.addAttr("customerId", customerId);
					updateLevel.addAttr("getLastTime", new Date());
					updateLevel.setRmiServiceName(AppProperties
							.getProperties(DuoduoConstant.RMI_SERVICE_START
										+ ServiceKey.Key_XJ));
					result = RemoteInvoke.getInstance().call(updateLevel);
				} else{//修改为非正常用户，清楚signId
					String custKey = (String) RedisUtils.getRedisService().get("xj_user_session" +customerId);
					RedisUtils.getRedisService().del(custKey);
				}
			}
		}catch(Exception e){
			LogerUtil.error(XjCustAction.class, e, "updateCust error");
			ExceptionUtil.setExceptionMessage(e, result,
					DuoduoSession.getShowLog());
		}
		return result;
	}
	
	
	/**
	 * 查询用户实名列表
	 * @param request
	 * @return
	 */
	@RequestMapping("xjReal/queryCustRealName")
	@ResponseBody
	public AppResult queryCustRealName(HttpServletRequest request){
		AppResult result = new AppResult();
		try{
			AppParam param = new AppParam("xjIdentifyService","queryCustRealName");
			RequestUtil.setAttr(param, request);
			String nickNameAndTel = request.getParameter("nickNameAndTel");
			if(!StringUtils.isEmpty(nickNameAndTel)){
				if(ValidUtils.validateTelephone(nickNameAndTel)){//加快查询效率
					param.addAttr("telephone", nickNameAndTel);
					param.removeAttr("nickNameAndTel");
				}else{
					param.addAttr("nickName", nickNameAndTel);
					param.removeAttr("nickNameAndTel");
				}
			}
			param.setOrderBy("createTime");
			param.setOrderValue("desc");
			param.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START
								+ ServiceKey.Key_XJ));
			result = RemoteInvoke.getInstance().callNoTx(param);
		}catch(Exception e){
			LogerUtil.error(XjCustAction.class, e, "queryCustRealName error");
			ExceptionUtil.setExceptionMessage(e, result,
					DuoduoSession.getShowLog());
		}
		return result;
	}
	
	
	
	/**
	 * 审核用户实名信息
	 * @param request
	 * @return
	 */
	@RequestMapping("xjReal/checkCustRealName")
	@ResponseBody
	public AppResult checkCustRealName(HttpServletRequest request){
		AppResult result = new AppResult();
		String customerId = request.getParameter("customerId");
		if (StringUtils.isEmpty(customerId)) {
			result.setSuccess(false);
			result.setMessage("客户编号不能为空");
			return result;
		}
		try{
			AppParam queryParam = new AppParam("xjIdentifyService","query");
			queryParam.addAttr("customerId", customerId);
			queryParam.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START
								+ ServiceKey.Key_XJ));
			AppResult queryResult = RemoteInvoke.getInstance().callNoTx(queryParam);
			if(queryResult.getRows() != null && queryResult.getRows().size() > 0){
				String identityStatus = StringUtil.getString(queryResult.getRow(0).get("identityStatus"));
				if(SysParamsUtil.getBoleanByKey("xj_identity_switch", false) && "1".equals(identityStatus)){//1-实名状态正常
					result.setSuccess(false);
					result.setMessage("该用户实名已经通过审核，不用重新审核");
					return result;
				}
			}
			AppParam param = new AppParam("xjIdentifyService","updateCustIdentifyInfo");
			RequestUtil.setAttr(param, request);
			param.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START
								+ ServiceKey.Key_XJ));
			//获取用户信息
			Map<String, Object> custInfo = CustomerIdentify.getCustIdentify(StoreUserUtil.getCustomerId(request));
			param.addAttr("auditBy", custInfo.get("userName"));
			param.addAttr("auditTime", new Date());
			result = RemoteInvoke.getInstance().call(param);
			if(result.isSuccess()){
				RedisUtils.getRedisService().del("CustXJ" +customerId);
			}
		}catch(Exception e){
			LogerUtil.error(XjCustAction.class, e, "checkCustRealName error");
			ExceptionUtil.setExceptionMessage(e, result,
					DuoduoSession.getShowLog());
		}
		return result;
	}
	
	
	/**
	 * 刷新天狗币排行榜
	 * @param request
	 * @return
	 */
	@RequestMapping("xjCust/refCoinRanking")
	@ResponseBody
	public AppResult refCoinRanking(HttpServletRequest request){
		AppResult result = new AppResult();
		try{
			AppParam param = new AppParam("xjCustLevelService","queryXjCoinRanking");
			param.setRmiServiceName(AppProperties
						.getProperties(DuoduoConstant.RMI_SERVICE_START
								+ ServiceKey.Key_XJ));
			result = RemoteInvoke.getInstance().callNoTx(param);
			
			List<Map<String,Object>> baseList =  new ArrayList<Map<String,Object>>();
			if(result.getRows().size()>0){
				baseList =  result.getRows();
				RedisUtils.getRedisService().set("xj_coin_ranging_key", (Serializable) baseList, 86400);
				result.setMessage("刷新天狗币排行榜成功！");
			}else{
				result.setMessage("未获取到需要刷新的天狗币数据！");
			}
		}catch(Exception e){
			LogerUtil.error(XjCustAction.class, e, "refCoinRanking error");
			ExceptionUtil.setExceptionMessage(e, result,
					DuoduoSession.getShowLog());
		}
		return result;
	}
	
	
	/**
	 * 刷新狗粮排行榜
	 * @param request
	 * @return
	 */
	@RequestMapping("xjCust/refAbilityRanking")
	@ResponseBody
	public AppResult refAbilityRanking(HttpServletRequest request){
		AppResult result = new AppResult();
		try{
			AppParam param = new AppParam("xjCustLevelService","queryXjAbilityRanking");
			param.setRmiServiceName(AppProperties
						.getProperties(DuoduoConstant.RMI_SERVICE_START
								+ ServiceKey.Key_XJ));
			result = RemoteInvoke.getInstance().callNoTx(param);
			
			List<Map<String,Object>> baseList =  new ArrayList<Map<String,Object>>();
			if(result.getRows().size()>0){
				baseList =  result.getRows();
				RedisUtils.getRedisService().set("xj_ability_ranging_key",(Serializable) baseList, 86400);
				result.setMessage("刷新狗粮排行榜成功！");
			}else{
				result.setMessage("未获取到需要刷新的狗粮数据！");
			}
		}catch(Exception e){
			LogerUtil.error(XjCustAction.class, e, "refAbilityRanking error");
			ExceptionUtil.setExceptionMessage(e, result,
					DuoduoSession.getShowLog());
		}
		return result;
	}
	
	/**
	 * 刷新活动邀请排行榜
	 * @param request
	 * @return
	 */
	@RequestMapping("xjCust/refInviteRanking")
	@ResponseBody
	public AppResult refInviteRanking(HttpServletRequest request){
		AppResult result = new AppResult();
		try{
			AppParam param = new AppParam("xjInviteRecordService","queryInviteRanking");
			param.addAttr("startTime", SysParamsUtil.getStringParamByKey("invite_active_startTime", "2018-08-06 00:00:00"));
			param.addAttr("endTime", SysParamsUtil.getStringParamByKey("invite_active_endTime", "2018-08-20 23:59:59"));
			param.setRmiServiceName(AppProperties
						.getProperties(DuoduoConstant.RMI_SERVICE_START
								+ ServiceKey.Key_XJ));
			result = RemoteInvoke.getInstance().callNoTx(param);
			
			List<Map<String,Object>> baseList =  new ArrayList<Map<String,Object>>();
			if(result.getRows().size()>0){
				baseList =  result.getRows();
				RedisUtils.getRedisService().set("xj_invite_ranging_key",(Serializable) baseList, 86400);
				result.setMessage("刷新活动邀请排行榜成功！");
			}else{
				result.setMessage("未获取到需要刷新的活动邀请数据！");
			}
		}catch(Exception e){
			LogerUtil.error(XjCustAction.class, e, "refInviteRanking error");
			ExceptionUtil.setExceptionMessage(e, result,
					DuoduoSession.getShowLog());
		}
		return result;
	}
	
	
	/**
	 * 查询用户等级列表
	 * @param request
	 * @return
	 */
	@RequestMapping("xjCustLevel/queryCustLevel")
	@ResponseBody
	public AppResult queryCustLevel(HttpServletRequest request){
		AppResult result = new AppResult();
		try{
			AppParam param = new AppParam("xjCustLevelService","queryCustLevel");
			RequestUtil.setAttr(param, request);
			String nickNameAndTel = request.getParameter("nickNameAndTel");
			if(!StringUtils.isEmpty(nickNameAndTel)){
				if(ValidUtils.validateTelephone(nickNameAndTel)){//加快查询效率
					param.addAttr("telephone", nickNameAndTel);
					param.removeAttr("nickNameAndTel");
				}else{
					param.addAttr("nickName", nickNameAndTel);
					param.removeAttr("nickNameAndTel");
				}
			}
			//排序选择
			String orderByName = request.getParameter("ordeByName");
			if("0".equals(orderByName)){//天狗币降序
				param.setOrderBy("xjCoinCount");
				param.setOrderValue("desc");
			}else if("1".equals(orderByName)){//天狗币升序
				param.setOrderBy("xjCoinCount");
				param.setOrderValue("asc");
			}else if("2".equals(orderByName)){//狗粮降序
				param.setOrderBy("abilityValue");
				param.setOrderValue("desc");
			}else if("3".equals(orderByName)){ //狗粮升序
				param.setOrderBy("abilityValue");
				param.setOrderValue("asc");
			}else if("4".equals(orderByName)){ //幸运币降序
				param.setOrderBy("luckCoinCount");
				param.setOrderValue("desc");
			}else if("5".equals(orderByName)){ //幸运币升序
				param.setOrderBy("luckCoinCount");
				param.setOrderValue("asc");
			}else{
				param.setOrderBy("getLastTime");
				param.setOrderValue("desc");
			}
			param.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START
								+ ServiceKey.Key_XJ));
			result = RemoteInvoke.getInstance().callNoTx(param);
		}catch(Exception e){
			LogerUtil.error(XjCustAction.class, e, "queryCustLevel error");
			ExceptionUtil.setExceptionMessage(e, result,
					DuoduoSession.getShowLog());
		}
		return result;
	}
	
	
	
	
	/**
	 * 手工发放狗粮
	 * @param request
	 * @return
	 */
	@RequestMapping("xjCust/sendAbility")
	@ResponseBody
	public AppResult sendAbility(HttpServletRequest request){
		AppResult result = new AppResult();
		String typeId = request.getParameter("typeId");
		if(StringUtils.isEmpty(typeId)){
			return CustomerUtil.retErrorMsg("发放类型不能为空");
		}
		String taskId = request.getParameter("taskId");
		if(StringUtils.isEmpty(typeId)){
			return CustomerUtil.retErrorMsg("任务奖励类型不能为空");
		}
		try{
			//查询用户信息
			AppParam queryParam = new AppParam("xjCustService","loginQuery");
			String codeAndtel = request.getParameter("codeAndtel");
			if(!StringUtils.isEmpty(codeAndtel)){
				if(ValidUtils.validateTelephone(codeAndtel)){//加快查询效率
					queryParam.addAttr("telephone", codeAndtel);
					queryParam.removeAttr("codeAndtel");
				}else{
					queryParam.addAttr("inviteCode", codeAndtel);
					queryParam.removeAttr("codeAndtel");
				}
			}
			queryParam.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START
								+ ServiceKey.Key_XJ));
			result = RemoteInvoke.getInstance().callNoTx(queryParam);
			if(result.getRows() != null && result.getRows().size() > 0){
				Map<String,Object> custMap = result.getRow(0);
				String customerId = StringUtil.getString(custMap.get("customerId"));
				//实名状态
				String identityStatus = StringUtil.getString(custMap.get("identityStatus"));
				if("1".equals(identityStatus)){//身份认证状态 1-正常
					//1.根据taskId 到t_xj_task_cfg查询奖励值rewardValue
					AppParam queryTaskParam = new AppParam("xjTaskCfgService","query");
					queryTaskParam.addAttr("taskId", taskId);
					queryTaskParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_XJ));
					AppResult taskResult = RemoteInvoke.getInstance().call(queryTaskParam);
					if(taskResult.getRows() == null && taskResult.getRows().size() == 0){
						return result;
					}
					Map<String,Object> taskMap = taskResult.getRow(0);
					//更新客户狗粮值
					AppParam updateParam = new AppParam("xjCustLevelService","update");
					updateParam.setRmiServiceName(AppProperties
							.getProperties(DuoduoConstant.RMI_SERVICE_START
										+ ServiceKey.Key_XJ));
					updateParam.addAttr("customerId", customerId);
					updateParam.addAttr("addAbilityValue", NumberUtil.getInt(taskMap.get("rewardValue"),0));
					AppResult updateResult = RemoteInvoke.getInstance().call(updateParam);
					int updateSize = NumberUtil.getInt(updateResult.getAttr(DuoduoConstant.DAO_Update_SIZE),0);
					if(updateSize > 0){
						//获取用户信息
						Map<String, Object> custInfo = CustomerIdentify.getCustIdentify(StoreUserUtil.getCustomerId(request));
						//添加狗粮记录
						AppParam sendParam = new AppParam("xjRecAbilityRecordService","insert");
						sendParam.setRmiServiceName(AppProperties
								.getProperties(DuoduoConstant.RMI_SERVICE_START
											+ ServiceKey.Key_XJ));
						sendParam.addAttr("customerId", customerId);
						sendParam.addAttr("abilityValue", NumberUtil.getBigDecimal(taskMap.get("rewardValue"),BigDecimal.ZERO));
						sendParam.addAttr("typeId", typeId);
						sendParam.addAttr("flag", "+");
						sendParam.addAttr("remark", "手动发放狗粮--"+custInfo.get("userName"));
						sendParam.addAttr("recoveryTime", DateUtil.getNextDay(new Date(), NumberUtil.getInt(taskMap.get("rewardTerm"))));
						sendParam.addAttr("recoveryStatus",0);
						sendParam.addAttr("abilityType",taskMap.get("rewardType"));
						result = RemoteInvoke.getInstance().call(sendParam);
						if(result.isSuccess()){
							result.setSuccess(true);
							result.setMessage("奖励发放成功");
						}
					}
				}else{//必须实名认证之后才可以送狗粮
					return CustomerUtil.retErrorMsg("此用户未完成未实名认证");
				}
			}else{
				result.setSuccess(false);
				result.setMessage("用户不存在，请重新输入手机号");
				return result;
			}
		}catch(Exception e){
			LogerUtil.error(XjRecordAction.class, e, "sendAbility error");
			ExceptionUtil.setExceptionMessage(e, result,
					DuoduoSession.getShowLog());
		}
		return result;
	}
	
	/**
	 * 手工发放狗币
	 * @param request
	 * @return
	 */
	@RequestMapping("xjCust/sendCoin")
	@ResponseBody
	public AppResult sendCoin(HttpServletRequest request){
		AppResult result = new AppResult();
		String typeId = request.getParameter("typeId");
		if(StringUtils.isEmpty(typeId)){
			return CustomerUtil.retErrorMsg("发放类型不能为空");
		}
		BigDecimal abilityValue = NumberUtil.getBigDecimal(request.getParameter("abilityValue"),BigDecimal.ZERO);
		if(abilityValue.doubleValue() <= 0){
			return CustomerUtil.retErrorMsg("发放数量不能小于0");
		}
		try{
			//查询用户信息
			AppParam queryParam = new AppParam("xjCustService","loginQuery");
			String codeAndtel = request.getParameter("codeAndtel");
			if(!StringUtils.isEmpty(codeAndtel)){
				if(ValidUtils.validateTelephone(codeAndtel)){//加快查询效率
					queryParam.addAttr("telephone", codeAndtel);
					queryParam.removeAttr("codeAndtel");
				}else{
					queryParam.addAttr("inviteCode", codeAndtel);
					queryParam.removeAttr("codeAndtel");
				}
			}
			queryParam.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START
								+ ServiceKey.Key_XJ));
			result = RemoteInvoke.getInstance().callNoTx(queryParam);
			if(result.getRows() != null && result.getRows().size() > 0){
				Map<String,Object> custMap = result.getRow(0);
				String customerId = StringUtil.getString(custMap.get("customerId"));
				//实名状态
				String identityStatus = StringUtil.getString(custMap.get("identityStatus"));
				if("1".equals(identityStatus)){//身份认证状态 1-正常
					AppParam updateParam = new AppParam("xjCustLevelService","update");
					updateParam.setRmiServiceName(AppProperties
							.getProperties(DuoduoConstant.RMI_SERVICE_START
										+ ServiceKey.Key_XJ));
					updateParam.addAttr("customerId", customerId);
					updateParam.addAttr("addXjCoinCount", abilityValue);
					AppResult resultUpdate = RemoteInvoke.getInstance().call(updateParam);
					int updateSize = NumberUtil.getInt(resultUpdate.getAttr(DuoduoConstant.DAO_Update_SIZE),0);
					if(updateSize > 0){
						AppParam addParam = new AppParam("xjRecCoinRecordService","insert");
						addParam.setRmiServiceName(AppProperties
								.getProperties(DuoduoConstant.RMI_SERVICE_START
											+ ServiceKey.Key_XJ));
						addParam.addAttr("coinValue", abilityValue);
						addParam.addAttr("customerId", customerId);
						addParam.addAttr("typeId", typeId);
						addParam.addAttr("flag", "+");
						addParam.addAttr("sendTime", new Date());
						result = RemoteInvoke.getInstance().call(addParam);
						if(result.isSuccess()){
							result.setSuccess(true);
							result.setMessage("奖励发放成功");
						}
					}
				}else{//必须实名认证之后才可以送狗粮
					return CustomerUtil.retErrorMsg("此用户未完成未实名认证");
				}
			}else{
				result.setSuccess(false);
				result.setMessage("用户不存在，请重新输入手机号");
				return result;
			}
		}catch(Exception e){
			LogerUtil.error(XjRecordAction.class, e, "sendCoin error");
			ExceptionUtil.setExceptionMessage(e, result,
					DuoduoSession.getShowLog());
		}
		return result;
	}
	
	
	/**
	 * 查询奖励类型列表
	 * @param request
	 * @return
	 */
	@RequestMapping("xjCust/queryTaskCfgList")
	@ResponseBody
	public AppResult queryTaskCfgList(HttpServletRequest request){
		AppResult result = new AppResult();
		try{
			AppParam param = new AppParam("xjTaskCfgService","queryTaskCfgList");
			RequestUtil.setAttr(param, request);
			param.setOrderBy("rewardTerm");
			param.setOrderValue("ASC");
			param.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START
								+ ServiceKey.Key_XJ));
			result = RemoteInvoke.getInstance().callNoTx(param);
			if(result.getRows() != null && result.getRows().size() > 0){
				result.putAttr("taskCfgList", result.getRows());
			}
		}catch(Exception e){
			LogerUtil.error(XjRecordAction.class, e, "queryTaskCfgList error");
			ExceptionUtil.setExceptionMessage(e, result,
					DuoduoSession.getShowLog());
		}
		return result;
	}
}
