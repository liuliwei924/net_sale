package org.xxjr.store.web.action.account.sms;

import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import jxl.Workbook;
import jxl.write.WritableWorkbook;

import org.apache.commons.io.IOUtils;
import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.exception.ExceptionUtil;
import org.ddq.common.util.DateUtil;
import org.ddq.common.util.JsonUtil;
import org.ddq.common.util.LogerUtil;
import org.ddq.common.util.StringUtil;
import org.ddq.common.web.session.DuoduoSession;
import org.ddq.common.web.session.RequestUtil;
import org.ddq.common.core.service.RemoteInvoke;
import org.springframework.stereotype.Controller;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.xxjr.busi.util.kf.ExportUtil;
import org.xxjr.sys.util.NumberUtil;
import org.xxjr.sys.util.ServiceKey;

import com.alibaba.fastjson.JSONArray;

/**
 * 短信通道
 * 
 * @author Administrator
 *
 */
@Controller()
@RequestMapping("/account/sms/")
public class SmsAction {
	/***
	 * 批量导入手机号码
	 * 
	 * @param request
	 * @return
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	@RequestMapping("data/batchImport")
	@ResponseBody
	public AppResult batchImport(MultipartHttpServletRequest request) {
		AppResult result = new AppResult();
		String[] keys = { "tel", "telcity" };// 每列的key
		try {
			List<Map<String, Object>> telephoneList = ExportUtil.readExcel(
					keys, request);
			if (telephoneList != null && !telephoneList.isEmpty()) {
				int totalSize = telephoneList.size();
				int everySize = 5000;
				int xhCount = 1;
				int xhSize = 0;
				while (xhSize < totalSize && xhCount <= 100) {// 最多循环100次
					int formIndex = (xhCount - 1) * everySize;
					int toIndex = xhCount * everySize;
					if (toIndex > totalSize) {
						toIndex = totalSize;
					}
					if (formIndex > toIndex) {
						formIndex = toIndex;
					}
					List<Map<String, Object>> subtelephoneList = new ArrayList(
							telephoneList.subList(formIndex, toIndex));
					AppParam addParam = new AppParam();
					addParam.addAttr("list", subtelephoneList);
					addParam.setService("smsTelephoneService");
					addParam.setMethod("batchImportTel");
					addParam.setRmiServiceName(AppProperties
							.getProperties(DuoduoConstant.RMI_SERVICE_START
									+ ServiceKey.Key_log));
					RemoteInvoke.getInstance().call(addParam);
					xhSize = xhSize + subtelephoneList.size();
					xhCount++;
				}
				result.setSuccess(true);
			} else {
				result.setSuccess(false);
				result.setMessage("文件中没有数据记录!");
			}
		} catch (Exception e) {
			LogerUtil.error(this.getClass(), e, "batchImport error");
			ExceptionUtil.setExceptionMessage(e, result,
					DuoduoSession.getShowLog());
		}
		return result;
	}

	/**
	 * 根据条件查询手机号码
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("data/queryTelephone")
	@ResponseBody
	public AppResult queryTelephone(HttpServletRequest request) {
		AppResult result = new AppResult();
		AppParam param = new AppParam();
		RequestUtil.setAttr(param, request);
		param.setService("smsTelephoneService");
		param.setMethod("queryByPage");
		param.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START
						+ ServiceKey.Key_log));
		result = RemoteInvoke.getInstance().call(param);
		if(result.getRows().size()>0){
			for(Map<String, Object> map : result.getRows()){
				map.put("tel", StringUtil.getHideTelphone(map.get("tel").toString()));
			}
		}
		return result;
	}

	/**
	 * 根据条件发送短信
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("data/sendSms")
	@ResponseBody
	public AppResult sendSms(HttpServletRequest request) {
		AppResult result = new AppResult();
		AppParam param = new AppParam();
		RequestUtil.setAttr(param, request);
		param.setService("smsUserService");
		param.setMethod("sendSmsCount");
		param.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START
						+ ServiceKey.Key_sys));
		result = RemoteInvoke.getInstance().call(param);

		AppParam saveParam = new AppParam();
		int sendNum = NumberUtil.getInt(request.getParameter("sendNum"), 0);//短信发送条数
		if(sendNum == 0){
			sendNum = NumberUtil.getInt(result.getAttr("totalSize"));
		}
		saveParam.addAttr("sendNum", sendNum);
		saveParam.addAttr("sendParam", result.getAttr("sendParam"));
		saveParam.addAttr("queryNum", result.getAttr("totalSize"));// 查询出来的总条数
		saveParam.addAttr("tempId", request.getParameter("tempId"));// 短信模板id
		saveParam.addAttr("channelId", request.getParameter("channelId"));// 短信渠道id
		saveParam.addAttr("status", 0);// 0待处理
		saveParam.setService("smsSendRecordService");
		saveParam.setMethod("insert");
		saveParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START
						+ ServiceKey.Key_sys));
		RemoteInvoke.getInstance().call(saveParam);
		return result;
	}

	/***
	 * Excel导出
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@SuppressWarnings({ "unchecked", "deprecation" })
	@RequestMapping("data/exportExcel")
	@ResponseBody
	public void exportExcel(HttpServletRequest request,HttpServletResponse response) {
		AppResult result = new AppResult();
		PrintWriter printWriter = null;
		OutputStream os = null;
		try {
			response.setCharacterEncoding("UTF-8");
			response.setContentType("text/html;charset=UTF-8");
			printWriter = response.getWriter();
			AppParam params = new AppParam("smsTelephoneService", "queryExportTelephone");
			RequestUtil.setAttr(params, request);
			params.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_log));
			if (StringUtils.isEmpty(params.getAttr("exportTitles"))) {
				printWriter.print("导出Excel表头不能为空！");
				printWriter.flush();
				return;
			}
			if (StringUtils.isEmpty(params.getAttr("exportParams"))) {
				printWriter.print("导出查询参数不能为空！");
				printWriter.flush();
				return;
			}
			String exportTitles = params.removeAttr("exportTitles").toString();
			String exportParams = params.removeAttr("exportParams").toString();// 查询参数
			Map<String, Object> queryParams = JsonUtil.getInstance().json2Object(exportParams, Map.class);
			params.addAttrs(queryParams);
			result = RemoteInvoke.getInstance().call(params);
			this.getExportExcel(result.getRows(), result.getRows().size(), response, exportTitles);
		} catch (Exception e) {
			LogerUtil.error(this.getClass(), e,"DataExportAction exportExcel error");
			ExceptionUtil.setExceptionMessage(e, result,DuoduoSession.getShowLog());
			printWriter.print("error exportExcel:" + e.getMessage());
			printWriter.flush();
		} finally {
			IOUtils.closeQuietly(printWriter);
			IOUtils.closeQuietly(os);
		}
	}
	
	/**
	 * 导出Excel方法
	 * @param list 导出列表
	 * @param totalSize 导出总数目
	 * @param response
	 * @param exportTitles 导出表头
	 * @throws Exception
	 */
	private void getExportExcel(List<Map<String,Object>> list,int totalSize,HttpServletResponse response,
			String exportTitles) throws Exception{
		OutputStream os = null;
		LinkedHashMap<String, String> excelTitle = new LinkedHashMap<String, String>();// excel表头
		JSONArray titleJson = JSONArray.parseArray(exportTitles);
		for (int i = 0; i < titleJson.size(); i++) {
			@SuppressWarnings("unchecked")
			Map<String, String> titleMap = (Map<String, String>) titleJson.get(i);
			if (titleMap.containsKey("title") && titleMap.containsKey("name")) {
				excelTitle.put(titleMap.get("title"),titleMap.get("name"));
			}
		}
		String fileName = "手机号";
		fileName = fileName + "_" + DateUtil.toStringByParttern(new Date(),
						DateUtil.DATE_PATTERNYYYYMMDDHHMMSSSSS) + ".xls";
		response.reset();// 清空输出流
		response.setHeader("Content-disposition", "attachment; filename="
				+ new String(fileName.getBytes(), "iso-8859-1"));
		// 设定输出文件头
		response.setContentType("application/msexcel");// 定义输出类型
		response.setCharacterEncoding("UTF-8");  
		os = response.getOutputStream();
		WritableWorkbook workbook = Workbook.createWorkbook(os);// 创建Excel
		int maxRow = 50000;// excel每页最大导出行数
		int index = 1;// sheet命名数
		if (totalSize > maxRow) {// 若超过五万，则分批导出
			int forCount = 0;
			if (totalSize % maxRow == 0) {
				forCount = totalSize / maxRow;
			} else {
				forCount = totalSize / maxRow + 1;
			}
			for (int i = 0; i < forCount; i++) {
				List<Map<String, Object>> subResultList = null;
				if (totalSize >= (i + 1) * maxRow) {
					subResultList = list.subList(i * maxRow, (i + 1) * maxRow);
				} else {
					subResultList = list.subList(i * maxRow, totalSize);
				}
				ExportUtil.createManySheet(workbook, excelTitle, subResultList, index);
				index++;
			}
		} else {
			ExportUtil.createManySheet(workbook, excelTitle, list, index);
		}
		workbook.write();
		workbook.close();
	}
}
