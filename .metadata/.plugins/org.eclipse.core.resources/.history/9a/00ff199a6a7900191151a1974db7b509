package org.xxjr.job.listener.busi.kf;

import java.util.List;
import java.util.Map;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.util.LogerUtil;
import org.ddq.job.core.BaseExecteJob;
import org.ddq.job.util.JobConstant;
import org.ddq.job.util.JobUtil;
import org.ddq.common.core.service.RemoteInvoke;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;
import org.xxjr.sys.util.ServiceKey;

/**
 * 系统自动挂卖处理(将2天前或7天前未处理的普通单自动挂卖)
 * @author 2017-05-28 by liulw
 *
 */
@Lazy
@Component
public class SysAutoSaleJob  implements BaseExecteJob {

	@Override
	public AppResult executeJob(AppParam param) {
		AppResult result = new AppResult();
		Object processId = param.getAttr(JobConstant.KEY_processId);
		try {
			LogerUtil.log("*****************转移客服未跟进的数据去挂卖 begin********************");
			// 解锁借款项目
			AppParam updateParam = new AppParam();
			updateParam.setService("kfBusiOptExtService");
			updateParam.setMethod("kfDataAutoSale");
			updateParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_busi_in));
			result = RemoteInvoke.getInstance().call(updateParam);
			Integer totalCount = (Integer)result.getAttr(DuoduoConstant.DAO_Update_SIZE);
						
			JobUtil.addProcessExecute(processId, "转移客服未跟进的数据去挂卖：" + totalCount +" 条记录");
			
			result.setMessage("转移客服未跟进的数据去挂卖：" + totalCount +" 条记录");
			LogerUtil.log("*****************转移客服未跟进的数据去挂卖 end********************");
		} catch (Exception e) {
			LogerUtil.error(SysAutoSaleJob.class, e, "转移客服未跟进的数据去挂卖!");
			result.setSuccess(Boolean.FALSE);
			result.setMessage(e.getMessage());
		}
		
		// 删除客服池中的错误数据
		delErrorKfPoolData(processId);
		return result;
	}
	
	/**
	 *  删除客服池中的错误数据
	 * @param processId
	 */
	public static void delErrorKfPoolData(Object processId){


		AppParam queryParam = new AppParam("allotKfPoolService", "queryErrorData");
		queryParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_busi_in));
		AppResult result = RemoteInvoke.getInstance().callNoTx(queryParam);
		
		List<Map<String,Object>> handleList = result.getRows();
		if(handleList.size() > 0){
			for(Map<String, Object> handleMap : handleList){
				try{
					AppParam delParam = new AppParam("allotKfPoolService", "delete");
					delParam.addAttr("applyId", handleMap.get("applyId"));
					delParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_busi_in));
					RemoteInvoke.getInstance().callNoTx(delParam);
				}catch(Exception e){
					LogerUtil.error(SysAutoSaleJob.class, e, "delErrorKfPoolData error applyId" + handleMap.get("applyId").toString());
				}
			}
		}
	
	}

}
