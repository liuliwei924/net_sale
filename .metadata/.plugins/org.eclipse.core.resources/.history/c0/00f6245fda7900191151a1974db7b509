package org.xxjr.store.web.action.account.sys;

import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppResult;
import org.ddq.common.web.session.RequestUtil;
import org.springframework.stereotype.Controller;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.xxjr.mall.sys.CommonUtil;
import org.xxjr.mall.sys.ServerCallUtil;
import org.xxjr.mall.util.AdminUtil;
import org.xxjr.store.web.action.BaseController;

@RestController
@RequestMapping("/account/sys/")
public class JobController extends BaseController{
	
	/**
	 * 任务列表
	 * @param request
	 * @return
	 */
	@RequestMapping("job/queryList")
	public AppResult queryList(){
		AppResult result = new AppResult();
		try {	
			AppParam param = new AppParam("jobService","queryByPage");
			RequestUtil.setAttr(param, request);
			param.setOrderBy("createTime");
			param.setOrderValue("DESC");
			result = ServerCallUtil.doCallNoTx(param, ServerCallUtil.serverKey_admin);
		} catch (Exception e) {
			CommonUtil.commException(this.getClass(), e, result, "任务类型列表错误");
		}
		return result;
	}
	
	/**
	 * 增加job
	 * @param request
	 * @return
	 */
	@RequestMapping("job/insert")
	public AppResult insert(){
		AppResult result = new AppResult();
		try {
			AppParam param = new AppParam("jobService","insert");
			RequestUtil.setAttr(param, request);
			result = ServerCallUtil.doCall(param, ServerCallUtil.serverKey_admin);
		} catch (Exception e) {
			CommonUtil.commException(this.getClass(), e, result, "增加job错误");
		}
		return result;
	}
	
	/**
	 * 立即执行
	 * @param request
	 * @return
	 */
	@RequestMapping("job/executeQuick")
	public AppResult executeQuick(){
		AppResult result = new AppResult();
		try {	
			String jobId = request.getParameter("jobId");
			if (StringUtils.isEmpty(jobId)) {
				return AdminUtil.reErrorMessage("缺少必传参数");
			}
			AppParam param = new AppParam("executeJobService","executeQuick");
			param.addAttr("jobId", jobId);
			result = ServerCallUtil.doCall(param, ServerCallUtil.serverKey_admin);
		} catch (Exception e) {
			CommonUtil.commException(this.getClass(), e, result, "任务立即执行错误");
		}
		return result;
	}
	
	/**
	 * 删除任务
	 * @param request
	 * @return
	 */
	@RequestMapping("job/delete")
	public AppResult delete(){
		AppResult result = new AppResult();
		try {	
			String jobId = request.getParameter("jobId");
			if (StringUtils.isEmpty(jobId)) {
				return AdminUtil.reErrorMessage("缺少必传参数");
			}
			AppParam param = new AppParam("jobService","delete");
			param.addAttr("jobId", jobId);
			result = ServerCallUtil.doCall(param, ServerCallUtil.serverKey_admin);
		} catch (Exception e) {
			CommonUtil.commException(this.getClass(), e, result, "删除任务错误");
		}
		return result;
	}
	
	/**
	 * 修改任务
	 * @param request
	 * @return
	 */
	@RequestMapping("job/update")
	public AppResult update(){
		AppResult result = new AppResult();
		try {	
			String jobId = request.getParameter("jobId");
			if (StringUtils.isEmpty(jobId)) {
				return AdminUtil.reErrorMessage("缺少必传参数");
			}
			AppParam param = new AppParam("executeJobService","resetJob");
			RequestUtil.setAttr(param, request);
			result = ServerCallUtil.doCall(param, ServerCallUtil.serverKey_admin);
		} catch (Exception e) {
			CommonUtil.commException(this.getClass(), e, result, "修改任务错误");
		}
		return result;
	}
	
	/**
	 * 查询运行记录
	 * @param request
	 * @return
	 */
	@RequestMapping("job/queryRecord")
	public AppResult queryRecord(){
		AppResult result = new AppResult();
		try {
			AppParam param = new AppParam("jobProcessService","queryByPage");
			RequestUtil.setAttr(param, request);
			param.setOrderBy("startTime");
			param.setOrderValue("DESC");
			result = ServerCallUtil.doCallNoTx(param, ServerCallUtil.serverKey_admin);
		} catch (Exception e) {
			CommonUtil.commException(this.getClass(), e, result, "查询运行记录错误");
		}
		return result;
	}
	
	/**
	 * 查询任务锁
	 * @param request
	 * @return
	 */
	@RequestMapping("jobLock/queryJobLock")
	public AppResult queryJobLock(){
		AppResult result = new AppResult();
		try {
			AppParam param = new AppParam("jobLockService","queryByPage");
			RequestUtil.setAttr(param, request);
			result = ServerCallUtil.doCallNoTx(param, ServerCallUtil.serverKey_admin);
		} catch (Exception e) {
			CommonUtil.commException(this.getClass(), e, result, "查询任务锁错误");
		}
		return result;
	}
	
	/**
	 * 删除任务锁
	 * @param request
	 * @return
	 */
	@RequestMapping("jobLock/deleteJobLock")
	public AppResult deleteJobLock(){
		AppResult result = new AppResult();
		try {	
			String lockId = request.getParameter("lockId");
			if (StringUtils.isEmpty(lockId)) {
				return AdminUtil.reErrorMessage("缺少必传参数");
			}
			AppParam param = new AppParam("jobLockService","delete");
			param.addAttr("lockId", lockId);
			result = ServerCallUtil.doCall(param, ServerCallUtil.serverKey_admin);
		} catch (Exception e) {
			CommonUtil.commException(this.getClass(), e, result, "删除任务锁错误");
		}
		return result;
	}
}
