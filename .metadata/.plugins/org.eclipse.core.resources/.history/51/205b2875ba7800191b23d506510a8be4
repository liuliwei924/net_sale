package org.xxjr.cust.member;

import java.util.Date;
import java.util.Map;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppResult;
import org.ddq.common.core.service.BaseService;
import org.ddq.common.core.service.SoaManager;
import org.ddq.common.exception.AppException;
import org.ddq.common.exception.DuoduoError;
import org.ddq.common.util.DateUtil;
import org.ddq.common.util.StringUtil;
import org.ddq.common.web.session.DuoduoSession;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import org.xxjr.cust.util.invite.CustInviteUtil;
import org.xxjr.cust.util.member.TicketConfigUtils;
import org.xxjr.cust.util.member.TicketShareRuleUtils;

@Lazy
@Service
public class TicketShareDtlService extends BaseService {
	private static final String NAMESPACE = "TICKETSHAREDTL";

	/**
	 * 查寻数据
	 * @param params
	 * @return
	 */
	public AppResult query(AppParam params) {
		return super.query(params, NAMESPACE);
	}
	
	/**
	 * 分页查寻数据
	 * @param params
	 * @return
	 */
	public AppResult queryByPage(AppParam params) {
		return super.queryByPage(params, NAMESPACE);
	}
	
	/**
	 * 查寻分页统计数据
	 * @param params
	 * @return
	 */
	public AppResult queryCount(AppParam params) {
		int size = getDao().count(NAMESPACE, super.COUNT,params.getAttr(),params.getDataBase());
		AppResult result = new AppResult();
		result.putAttr(DuoduoConstant.TOTAL_SIZE, size);
		return result;
	}
	
	/**
	 * 添加数据处理
	 * @param params
	 * @return
	 */
	public AppResult insert(AppParam params) {
		params.addAttr("createTime", new Date());
		params.addAttr("createBy", DuoduoSession.getUserName());
		return super.insert(params, NAMESPACE);
	}
	
	/**
	 * 修改数据处理
	 * @param params
	 * @return
	 */
	public AppResult update(AppParam params) {
		params.addAttr("updateTime", new Date());
		return super.update(params, NAMESPACE);
	}
	
	public AppResult delete(AppParam params) {
		String ids = (String) params.getAttr("ids");
		AppResult  result = null;
		if (!StringUtils.isEmpty(ids)) {
			for (String id : ids.split(",")) {
				AppParam param = new AppParam();
				param.addAttr("dtlId", id);
				
				result = super.delete(param, NAMESPACE);
			}
		} else if (!StringUtils.isEmpty(params.getAttr("dtlId"))) {
			result = super.delete(params, NAMESPACE);
		} else {
			throw new AppException(DuoduoError.DELETE_NO_ID);
		}
		return result;
	}
	
	/**
	 * 初始化要分享的券
	 * @param params
	 * @return
	 */
	public AppResult initShareTicket(AppParam params) {
		AppResult result = new AppResult();
		int size = super.getDao().insert(NAMESPACE, "initShareTicket", params.getAttr(), params.getDataBase());
		result.putAttr(DuoduoConstant.DAO_Insert_SIZE, size);
		return result;
	}
	
	/**
	 * 领券
	 * @param params
	 * @return
	 */
	public AppResult receiveTicket(AppParam params){
		AppResult result = new AppResult();
		Object customerId = params.getAttr("customerId");
		Object telephone = params.getAttr("telephone");
		Object recordId = params.getAttr("recordId");// 分享记录id
		// 判断是否可以领劵
		result = TicketShareRuleUtils.canReceiveTicket(params);
		if (!result.isSuccess()) {
			return result;
		}
		// 插入领劵记录
		params.addAttr("isNew", StringUtils.isEmpty(customerId) ? "1" : "0");// 是否为新用户(0否 1是)
		int size = this.getDao().update(NAMESPACE, "receiveTicket", params.getAttr(), params.getDataBase());
		if (size > 0) {
			// 若用户存在，则记录抢单劵信息
			if(!StringUtils.isEmpty(customerId)){
				// 根据recordId 手机号 获取劵id
				AppParam queryShareDtl = new AppParam();
				queryShareDtl.addAttr("telephone", telephone);
				queryShareDtl.addAttr("recordId", recordId);
				AppResult shareDtl = this.query(queryShareDtl); 
				String configId = StringUtil.getString(shareDtl.getRow(0).get("configId"));// 劵Id
				
				Date now = new Date();
				AppParam ticketParam = new AppParam();
				ticketParam.setService("custTicketService");
				ticketParam.setMethod("insert");
				ticketParam.addAttr("customerId", customerId);
				ticketParam.addAttr("configId", configId);
				ticketParam.addAttr("startDate", now);// 抢单劵可用起始日期
				// 积分兑换的有效期7天
				Map<String,Object> ticketInfo = TicketConfigUtils.getTickeConfig(configId.toString());// 获取抢单劵对应的有效期天数
				int validDay = Integer.valueOf(ticketInfo.get("validDay").toString());
				String endDate = DateUtil.toStringByParttern(
						DateUtil.getNextDay(now, validDay-1),
						DateUtil.DATE_PATTERN_YYYY_MM_DD);
				ticketParam.addAttr("endDate", endDate);// 抢单劵失效日期
				ticketParam.addAttr("status", "1");
				ticketParam.addAttr("type", CustInviteUtil.TICKET_TYPE_SHARE);
				ticketParam.addAttr("createDesc", "分享红包获取");
				SoaManager.getInstance().invoke(ticketParam);
			}
		}
		result.putAttr(DuoduoConstant.DAO_Insert_SIZE, size);
		return result;
	}
	
	/**
	 * 领取记录
	 * @param params
	 * @return
	 */
	public AppResult receiveRecord(AppParam params) {
		return super.query(params, NAMESPACE, "receiveRecord");
	}
	
	/**
	 * 个人领取券信息
	 * @param params
	 * @return
	 */
	public AppResult receiveInfo(AppParam params) {
		return super.query(params, NAMESPACE, "receiveInfo");
	}
	
	/**
	 * 新用户获得分享抢单劵，更新用户信息 
	 * @param params
	 * @return
	 */
	public AppResult updateCustInfo(AppParam params) {
		AppResult result = new AppResult();
		int size = this.getDao().update(NAMESPACE, "updateCustInfo", params.getAttr(), params.getDataBase());
		result.putAttr(DuoduoConstant.DAO_Update_SIZE, size);
		return result;
		
	}
	
	/**
	 * 验证领劵信息
	 * @param params
	 * @return
	 */
	public AppResult validateReceiveInfo(AppParam params) {
		return super.query(params, NAMESPACE, "validateReceiveInfo");
	}
	
}