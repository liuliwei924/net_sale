package org.xxjr.busi.util.borrow;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.ddq.active.mq.message.CustMessageSend;
import org.ddq.active.mq.message.JpushMessageSend;
import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.core.SpringAppContext;
import org.ddq.common.util.DateUtil;
import org.ddq.common.util.LogerUtil;
import org.ddq.common.util.StringUtil;
import org.ddq.zk.service.RemoteInvoke;
import org.springframework.util.StringUtils;
import org.xxjr.cust.util.info.CustomerIdentify;
import org.xxjr.sys.util.NumberUtil;
import org.xxjr.sys.util.ServiceKey;
import org.xxjr.sys.util.SysParamsUtil;
import org.xxjr.sys.util.message.MessageConstants;

/**
 * 自动抢单
 * @author Administrator
 *
 */
public class AutoRobUtil {

	/**
	 * 自动抢单
	 * @param borrowId
	 * @param jpushSend
	 * @param messageSend
	 */
	public static void autoRobBorrow(Object borrowId){
		// 是否开启自动抢单
		boolean autoRobFlag = SysParamsUtil.getBoleanByKey("autoRobFlag", false);
		if(!autoRobFlag){
			return;
		}
		try{
			// 查询直借信息
			AppParam borrowParam = new AppParam();
			borrowParam.setService("daiBorrowService");
			borrowParam.setMethod("query");
			borrowParam.addAttr("borrowId", borrowId);
			borrowParam.addAttr("status", "0");
			borrowParam.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_busi));
			AppResult queryResult = RemoteInvoke.getInstance().callNoTx(borrowParam);
			if(queryResult.getRows().size() > 0){
				Map<String,Object> borrowInfo = queryResult.getRow(0);
				// 城市为空不匹配
				if(StringUtils.isEmpty(borrowInfo.get("cityName"))){
					return;
				}
				// 价格小于等于0不匹配
				double price = NumberUtil.getDouble(borrowInfo.get("price"), 0)/100;
				if (price <= 0) {
					return;
				}
				String workType = StringUtil.getString(borrowInfo.get("workType"));
				String houseType = StringUtil.getString(borrowInfo.remove("houseType"));// 房产
				String carType = StringUtil.getString(borrowInfo.remove("carType"));// 车产
				String insurType = StringUtil.getString(borrowInfo.remove("insurType"));// 保单
				// 企业主
				if ("2".equals(workType)) {
					borrowInfo.put("workTypeQyz", workType);
				}
				// 上班族
				if ("4".equals(workType)) {
					borrowInfo.put("workTypeSbz", workType);
				}
				// 不等于0且不等于2 有房产
				if (!"0".equals(houseType) && !"2".equals(houseType)) {
					borrowInfo.put("houseType", houseType);
				}
				// 当不等于0,2,5时 ，表示有车产
				if (!"0".equals(carType) && !"2".equals(carType) && !"5".equals(carType)) {
					borrowInfo.put("carType", carType);
				}
				// 等于1或等于2  有保单
				if ("1".equals(insurType) || "2".equals(insurType)) {
					borrowInfo.put("insurType", insurType);
				}
				borrowInfo.put("price", price);
				autoRobHandle(borrowInfo);
			}
		}catch(Exception e){
			LogerUtil.error(BorrowRobUtils.class, e, "自动抢单失败，单号：" + borrowId);
		}
	}
	
	/**
	 * 自动抢单处理
	 * @param row
	 */
	private static void autoRobHandle(Map<String,Object> borrowInfo) {
		AppResult result = new AppResult();
		try {
			LogerUtil.log("AutoRobHandleUtil autoRobHandle >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> start");
			// 查询客户设置自动抢单条件
			AppParam queryParam = new AppParam();
			queryParam.setService("daiRemindConfigService");
			queryParam.setMethod("queryConformAutoRob");
			queryParam.addAttrs(borrowInfo);
			queryParam.addAttr("autoRob", "1");
			queryParam.setOrderBy("lastRobTime");
			queryParam.setOrderValue("ASC");
			queryParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_busi));
			result = RemoteInvoke.getInstance().callNoTx(queryParam);
			
			JpushMessageSend jpushSend = (JpushMessageSend) SpringAppContext.getBean(JpushMessageSend.class);
			CustMessageSend messageSend = (CustMessageSend) SpringAppContext.getBean(CustMessageSend.class);
			String today = DateUtil.toStringByParttern(new Date(), DateUtil.DATE_PATTERN_YYYY_MM_DD);
			for (Map<String,Object> rows : result.getRows()) {
				String customerId = StringUtil.getString(rows.get("customerId"));// 自动抢单人id
				int dayMaxCount = NumberUtil.getInt(rows.get("dayMaxCount"),0);// 每日最大抢单数
				int dayRobCount = NumberUtil.getInt(rows.get("dayRobCount"),0);// 每日已抢单数
				
				String lastRobTime = StringUtil.getString(rows.get("lastRobTime"));// 最后抢单时间
				// 判断每日限制的最大抢单金、抢单数
				if (dayRobCount < dayMaxCount || StringUtils.isEmpty(lastRobTime)
						|| (dayMaxCount == dayRobCount && !lastRobTime.startsWith(today))) {
					
					// 判断价格区间
					double robMinAmt = NumberUtil.getDouble(rows.get("robMinAmt"), 0);// 抢单最小金额
					double robMaxAmt = NumberUtil.getDouble(rows.get("robMaxAmt"), 0);// 抢单最大金额
					double price = NumberUtil.getDouble(borrowInfo.get("price"), 0);// 单子价格
					if (price < robMinAmt && price > robMaxAmt) {
						continue;
					}
					AppParam params = new AppParam();
					params.addAttr("customerId", customerId);
				
					params.addAttr("daiCustomerId", borrowInfo.get("customerId"));// 借款人id
			
					params.addAttr("price", price);
					params.addAttr("lastRobTime", lastRobTime);
					params.addAttr("useTicket", rows.get("useTicket"));
					params.addAttr("jpushSend", jpushSend);
					params.addAttr("messageSend", messageSend);
					boolean robFlag = autoRobBorrow(params,borrowInfo);
					if (!robFlag) {
						continue;
					}
				}
			}
			LogerUtil.log("AutoRobHandleUtil autoRobHandle >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> end");
		} catch (Exception e) {
			LogerUtil.error(AutoRobUtil.class,e, "autoRobHandle error");
		}
	}
	
	
	
	/**
	 * 自动抢单
	 * @param customerId
	 * @param borrowId
	 * @param lastRobTime
	 * @param messageSend
	 * @return
	 */
	private static boolean autoRobBorrow(AppParam params,Map<String,Object> borrowInfo){
		String customerId = StringUtil.getString(params.getAttr("customerId"));
		String borrowId = StringUtil.getString(params.getAttr("borrowId"));
		Object price = params.getAttr("price");
		JpushMessageSend jpushSend = (JpushMessageSend)params.getAttr("jpushSend");
		CustMessageSend messageSend = (CustMessageSend)params.getAttr("messageSend");
		
		// 获取客户抢单劵
		int useTicket = NumberUtil.getInt(params.getAttr("useTicket"), 0);// 是否使用抢单劵 0-否 1-是
		Map<String,Object> ticketInfo = getTicketInfo(customerId, price, useTicket);
		Object ticketId = StringUtil.getString(ticketInfo.get("ticketId"));
		double savePrice = NumberUtil.getDouble(ticketInfo.get("savePrice"), 0);// 节省金额
		
		try {
			AppResult robResult = BorrowRobUtils.autoRobByAmount(customerId,ticketId,savePrice,borrowInfo);
			if (robResult.isSuccess()) {
				Map<String, Object> custInfo = CustomerIdentify.getCustIdentify(customerId);// 获取抢单人信息
				Object realName = custInfo.get("userName");
				// 当天抢单数量+1
				AppParam updateParam = new AppParam();
				updateParam.setService("daiRemindConfigService");
				updateParam.setMethod("updateRobCount");
				updateParam.addAttr("customerId", customerId);
				updateParam.addAttr("lastRobTime", params.getAttr("lastRobTime"));
				updateParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START 
						+ ServiceKey.Key_busi));
				RemoteInvoke.getInstance().call(updateParam);
				LogerUtil.log("客户" + customerId + "自动抢单成功！单号" + borrowId);
				
				// 发送自动抢单成功消息
				Map<String, Object> msgParam = new HashMap<String, Object>();
				msgParam.put("tradeTime", DateUtil.toStringByParttern(new Date(), DateUtil.DATE_PATTERN_YYYY_MM_DD_HHMM));
				msgParam.put("price", robResult.getAttr("robPrice"));
				msgParam.put("realName", realName);
				//封装极光推送消息类型
				msgParam.put("jpushType", MessageConstants.jpush_Type_1);
				msgParam.put("jpushClientType", "xdjl");//推送给信贷经理app
				
				//推送微信消息
				messageSend.sendCustMessage(customerId, "autoRobSuccess", msgParam);
				jpushSend.sendCustMessage(customerId, "autoRobSuccess", msgParam);
				return true;
			}
		} catch (Exception e) {
			LogerUtil.error(AutoRobUtil.class, e, "客户" + customerId + "自动抢单失败！单号" + borrowId);
		}
		return false;
	}
	
	/**
	 * 获取抢单劵信息
	 * @param params
	 * @return
	 */
	private static Map<String,Object> getTicketInfo(String customerId,Object robPrice,int useTicket){
		Map<String,Object> ticketMap = new HashMap<String, Object>(); 
		if (useTicket == 0) {
			return ticketMap;
		}
		// 获取有效的抢单劵
		AppParam param = new AppParam("custTicketService","queryTicketDtl");
		param.addAttr("customerId", customerId);
		param.addAttr("status", "1");
		param.addAttr("validateTime", "1");//判断抢单劵有效期
		param.setOrderBy("endDate");
		param.setOrderValue("ASC");
		param.setRmiServiceName(AppProperties.
				getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_cust));
		AppResult queryResult = RemoteInvoke.getInstance().callNoTx(param);
		
		// 计算最优券
		double price = NumberUtil.getDouble(robPrice, 0);
		List<Map<String, Object>> ticketList = BorrowRobUtils.getOptimalTicket(queryResult.getRows(), price);
		// 自动抢单支持使用抢单劵(免单劵除外)
		for(Map<String, Object> ticketInfo : ticketList){
			int ticketType = NumberUtil.getInt(ticketInfo.get("ticketType"), 0);//0-抢单券  1-免单券
			if(ticketType == 0){
				ticketMap.put("ticketId", ticketInfo.get("ticketId"));// 抢单劵id
				ticketMap.put("savePrice", ticketInfo.get("savePrice"));// 节省金额
				break;
			}
		}
		return ticketMap;
	}
}
