package org.xxjr.store.web.action.account.xxxj;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.exception.ExceptionUtil;
import org.ddq.common.util.LogerUtil;
import org.ddq.common.util.StringUtil;
import org.ddq.common.web.session.DuoduoSession;
import org.ddq.common.web.session.RequestUtil;
import org.ddq.model.cache.RedisUtils;
import org.ddq.zk.service.RemoteInvoke;
import org.springframework.stereotype.Controller;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.xxjr.sys.util.ServiceKey;
import org.xxjr.sys.util.ValidUtils;

/**
 * 星舰币发放失败、领取、未领取记录
 * @author zenghw
 *
 */
@Controller()
@RequestMapping("/account/xj/")
public class XjRecordAction {
	
	
	/**
	 * 查询未领取记录
	 * @param request
	 * @return
	 */
	@RequestMapping("xjUnReceive/queryUnReceiveRecord")
	@ResponseBody
	public AppResult queryCoinNotReceiveRecord(HttpServletRequest request){
		AppResult result = new AppResult();
		try{
			AppParam param = new AppParam("xjSendCoinNowService","queryUnReceiveRecord");
			RequestUtil.setAttr(param, request);
			String nickNameAndTel = request.getParameter("nickNameAndTel");
			if(!StringUtils.isEmpty(nickNameAndTel)){
				if(ValidUtils.validateTelephone(nickNameAndTel)){//加快查询效率
					param.addAttr("telephone", nickNameAndTel);
					param.removeAttr("nickNameAndTel");
				}else{
					param.addAttr("nickName", nickNameAndTel);
					param.removeAttr("nickNameAndTel");
				}
			}
			param.setOrderBy("createTime");
			param.setOrderValue("desc");
			param.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START
								+ ServiceKey.Key_XJ));
			result = RemoteInvoke.getInstance().callNoTx(param);
		}catch(Exception e){
			LogerUtil.error(XjRecordAction.class, e, "queryUnReceiveRecord error");
			ExceptionUtil.setExceptionMessage(e, result,
					DuoduoSession.getShowLog());
		}
		return result;
	}
	
	
	/**
	 * 查询狗币领取记录
	 * @param request
	 * @return
	 */
	@RequestMapping("xjReceive/queryReceiveRecord")
	@ResponseBody
	public AppResult queryCoinReceiveRecord(HttpServletRequest request){
		AppResult result = new AppResult();
		try{
			AppParam param = new AppParam("xjRecCoinRecordService","queryReceiveRecord");
			RequestUtil.setAttr(param, request);
			String nickNameAndTel = request.getParameter("nickNameAndTel");
			if(!StringUtils.isEmpty(nickNameAndTel)){
				if(ValidUtils.validateTelephone(nickNameAndTel)){//加快查询效率
					param.addAttr("telephone", nickNameAndTel);
					param.removeAttr("nickNameAndTel");
				}else{
					param.addAttr("nickName", nickNameAndTel);
					param.removeAttr("nickNameAndTel");
				}
			}
			param.setOrderBy("createTime");
			param.setOrderValue("desc");
			param.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START
								+ ServiceKey.Key_XJ));
			result = RemoteInvoke.getInstance().callNoTx(param);
		}catch(Exception e){
			LogerUtil.error(XjRecordAction.class, e, "queryReceiveRecord error");
			ExceptionUtil.setExceptionMessage(e, result,
					DuoduoSession.getShowLog());
		}
		return result;
	}
	
	
	/**
	 * 查询发放失败记录
	 * @param request
	 * @return
	 */
	@RequestMapping("xjSendFail/querySendFailRecord")
	@ResponseBody
	public AppResult queryCoinSendRecord(HttpServletRequest request){
		AppResult result = new AppResult();
		try{
			AppParam param = new AppParam("xjSendCoinFailService","querySendFailRecord");
			RequestUtil.setAttr(param, request);
			String nickNameAndTel = request.getParameter("nickNameAndTel");
			if(!StringUtils.isEmpty(nickNameAndTel)){
				if(ValidUtils.validateTelephone(nickNameAndTel)){//加快查询效率
					param.addAttr("telephone", nickNameAndTel);
					param.removeAttr("searchKey");
				}else{
					param.addAttr("nickName", nickNameAndTel);
					param.removeAttr("searchKey");
				}
			}
			param.setOrderBy("createTime");
			param.setOrderValue("desc");
			param.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START
								+ ServiceKey.Key_XJ));
			result = RemoteInvoke.getInstance().callNoTx(param);
		}catch(Exception e){
			LogerUtil.error(XjRecordAction.class, e, "querySendFailRecord error");
			ExceptionUtil.setExceptionMessage(e, result,
					DuoduoSession.getShowLog());
		}
		return result;
	}
	
	
	/**
	 * 狗粮值领取记录
	 * @param request
	 * @return
	 */
	@RequestMapping("xjAbility/queryAbilityReceiveRecord")
	@ResponseBody
	public AppResult queryAbilityReceiveRecord(HttpServletRequest request){
		AppResult result = new AppResult();
		try{
			AppParam param = new AppParam("xjRecAbilityRecordService","queryAbilityReceive");
			RequestUtil.setAttr(param, request);
			String nickNameAndTel = request.getParameter("nickNameAndTel");
			if(!StringUtils.isEmpty(nickNameAndTel)){
				if(ValidUtils.validateTelephone(nickNameAndTel)){//加快查询效率
					param.addAttr("telephone", nickNameAndTel);
					param.removeAttr("searchKey");
				}else{
					param.addAttr("nickName", nickNameAndTel);
					param.removeAttr("searchKey");
				}
			}
			param.setOrderBy("createTime");
			param.setOrderValue("desc");
			param.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START
								+ ServiceKey.Key_XJ));
			result = RemoteInvoke.getInstance().callNoTx(param);
		}catch(Exception e){
			LogerUtil.error(XjRecordAction.class, e, "queryAbilityReceiveRecord error");
			ExceptionUtil.setExceptionMessage(e, result,
					DuoduoSession.getShowLog());
		}
		return result;
	}
	
	
	/**
	 * 刷新未领取狗币缓存
	 * @param request
	 * @return
	 */
	@RequestMapping("xjUnReceive/refUnReceiveRecord")
	@ResponseBody
	public AppResult refUnReceiveRecord(HttpServletRequest request){
		AppResult result = new AppResult();
		try{
			AppParam param = new AppParam("xjCustService","query");
			param.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START
							+ ServiceKey.Key_XJ));
			result = RemoteInvoke.getInstance().callNoTx(param);
			if(result.getRows() != null && result.getRows().size() > 0){
				List<Map<String,Object>> custList = result.getRows();
				//刷新未领取星际币缓存
				AppParam refParam = new AppParam("xjSendCoinNowService","query");
				for(Map<String,Object> custMap : custList){
					String customerId = StringUtil.getString(custMap.get("customerId"));
					refParam.addAttr("customerId", customerId);
					refParam.setRmiServiceName(AppProperties
								.getProperties(DuoduoConstant.RMI_SERVICE_START
										+ ServiceKey.Key_XJ));
					AppResult refResult = RemoteInvoke.getInstance().callNoTx(refParam);
					
					List<Map<String,Object>> unReceiveList =  new ArrayList<Map<String,Object>>();
					if(refResult.getRows().size() > 0){
						unReceiveList =  refResult.getRows();
					}
					//有无查询到未领取记录都要刷新
					RedisUtils.getRedisService().set("xj_un_receive_key_"+customerId, (Serializable) unReceiveList, 86400);
				}
				result.setMessage("刷新未领取天狗币缓存成功！");
			}
		}catch(Exception e){
			LogerUtil.error(XjRecordAction.class, e, "refUnReceiveRecord error");
			ExceptionUtil.setExceptionMessage(e, result,
					DuoduoSession.getShowLog());
		}
		return result;
	}
	
	
	/**
	 * 查询领取类型列表
	 * @param request
	 * @return
	 */
	@RequestMapping("xjReceive/queryTypeName")
	@ResponseBody
	public AppResult queryTypeName(HttpServletRequest request){
		AppResult result = new AppResult();
		try{
			AppParam param = new AppParam("xjTypeService","queryTypeNameList");
			RequestUtil.setAttr(param, request);
			param.setOrderBy("typeId");
			param.setOrderValue("desc");
			param.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START
								+ ServiceKey.Key_XJ));
			result = RemoteInvoke.getInstance().callNoTx(param);
			if(result.getRows() != null && result.getRows().size() > 0){
				result.putAttr("typeNameList", result.getRows());
			}
		}catch(Exception e){
			LogerUtil.error(XjRecordAction.class, e, "queryTypeName error");
			ExceptionUtil.setExceptionMessage(e, result,
					DuoduoSession.getShowLog());
		}
		return result;
	}
	
	
	
	/**
	 * 查询推广用户申请记录
	 * @param request
	 * @return
	 */
	@RequestMapping("xjTgRecord/queryTgUserRecord")
	@ResponseBody
	public AppResult queryTgUserRecord(HttpServletRequest request){
		AppResult result = new AppResult();
		try{
			AppParam param = new AppParam("xjTgUserRecordService","queryByPage");
			RequestUtil.setAttr(param, request);
			param.setOrderBy("createTime");
			param.setOrderValue("desc");
			param.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START
								+ ServiceKey.Key_XJ));
			result = RemoteInvoke.getInstance().callNoTx(param);
		}catch(Exception e){
			LogerUtil.error(XjRecordAction.class, e, "queryTgUserRecord error");
			ExceptionUtil.setExceptionMessage(e, result,
					DuoduoSession.getShowLog());
		}
		return result;
	}
}
