package org.xxjr.busi.util;

import java.io.Serializable;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.core.SpringAppContext;
import org.ddq.common.core.service.RemoteInvoke;
import org.ddq.common.core.service.SoaManager;
import org.ddq.common.web.session.DuoduoSession;
import org.llw.model.cache.RedisUtils;
import org.springframework.util.StringUtils;
import org.xxjr.cust.util.info.CustomerUtil;
import org.xxjr.sys.util.ServiceKey;

public class QuestionUtils {
	
	/** 问答类型 */
	public static final String KEY_QUESTION_TYPES = "key_questionTypes";
	/**
	 * 获取所有问题类型
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public static List<Map<String, Object>> getQuestionTypes(){
		List<Map<String, Object>> list = (List<Map<String, Object>>)RedisUtils.getRedisService().get(KEY_QUESTION_TYPES);
		if(list == null || list.size() == 0){
			list = refreshQuestionTypes();
		}
		return list;
	}
	
	
	/**
	 * 刷新所有问题类型
	 * @return
	 */
	public static List<Map<String, Object>> refreshQuestionTypes(){
		AppParam param = new AppParam();
		param.setService("questionTypeService");
		param.setMethod("query");
		param.addAttr("enable", "1");
		AppResult result = null;
		if(SpringAppContext.getBean("questionTypeService") == null){
			param.setRmiServiceName(AppProperties.
					getProperties(DuoduoConstant.RMI_SERVICE_START+ ServiceKey.Key_zx));
			result = RemoteInvoke.getInstance().call(param);
		}else{
			result = SoaManager.getInstance().invoke(param);
		}
		List<Map<String, Object>> list =  result.getRows();
		RedisUtils.getRedisService().set(KEY_QUESTION_TYPES, (Serializable)list, 4 * 60 * 60);
		return list;
	}
	
	
	/**
	 * 解析标签
	 */
	public static void initTag(AppParam param){
		StringBuffer content = new StringBuffer(param.getAttr("title").toString()+param.getAttr("content").toString());
		Set<String> tag= new HashSet<String>();
		String[] type1={"常用知识","贷款流程","资质咨询","利息咨询"};//贷款常识
		String[] type2={"无抵押贷","抵押贷款","按揭贷款","担保咨询","信用卡"};//贷款产品
		String[] type3={"消费贷款","经营贷款","买车贷款","买房贷款"};//贷款用途
		String[][][] type={{type1,{"常用,50","小知识,50","基础,50","实用,50","常识,50","小贴士,50","举例,10"}//常用知识
		                         ,{"流程,50","手续,50","程序,50","贷款,10"}//贷款流程
		                         ,{"资质,50","资格,50","门槛,50","咨询,10","问,10"}//资质咨询
		                         ,{"利息,50","利率,50","咨询,10","常识,10","问,10"}},//利息咨询
				           {type2,{"有抵押,50","无,10","抵押,10","贷,10","产品,10"}//无抵押贷
				                 ,{"无抵押,50","有,10","抵押,10","贷,10","产品,10"}//抵押贷款
				                 ,{"按揭,50","贷款,10","产品,10"}//按揭贷款
				                 ,{"担保,50","贷款,10","咨询,10","产品,10","问,10"}//担保咨询
				                 ,{"信用,50","额度,50","产品,10"}},//信用卡
				           {type3,{"消费,50","贷款,10","用途,10"}//消费贷款
				                 ,{"经营,50","贷款,10","用途,10"}//经营贷款
				                 ,{"车,50","按揭,50","贷款,10","用途,10"}//买车贷款
				                 ,{"房,50","按揭,50","贷款,10","用途,10"}}//买房贷款
				           };
		for (int i = 0; i < type.length; i++) {
			String[][] word=type[i];
			for (int j = 0; j < word[0].length; j++) {
				String[] tagw=word[0];
				for (int k = 0; k < tagw.length; k++) {
					if(content.indexOf(tagw[k])>=0){//全匹配
						tag.add(tagw[k]);
					}else{//近义词匹配
					  String[] synonyms=word[k+1];
					  int count=0;
						for (int m = 0; m < synonyms.length; m++) {
							 String[] w=synonyms[m].split(",");
							if(content.indexOf(w[0])>=0){
								count+=Integer.parseInt(w[1]);
								
								if(count>=60){
								tag.add(tagw[k]);
								continue;
								}
							}
						}
					}
				}
			}
	}
		param.addAttr("tag", tag.size()<=0?"":tag.toString());
	}
	
	
	/**
	 * 查询类型详细信息
	 * @return
	 */
	public static Map<String, Object> queryTypeDtl(String typeId){
		AppParam param = new AppParam();
		Map<String, Object> info=null;
		param.addAttr("typeId", typeId);
		if(!StringUtils.isEmpty(DuoduoSession.getUser())){
		    param.addAttr("cityName", DuoduoSession.getUser().getSessionData().get("QcityName"));
		}
		if(!StringUtils.isEmpty(param.getAttr("cityName"))&&"全国".equals(param.getAttr("cityName").toString())){
			param.removeAttr("cityName");
		}
		param.setService("questionTypeService");
		param.setMethod("queryDtl");
		AppResult result = null;
		if(SpringAppContext.getBean("questionTypeService") == null){
			param.setRmiServiceName(AppProperties.
					getProperties(DuoduoConstant.RMI_SERVICE_START+"busi"));
			result = RemoteInvoke.getInstance().callNoTx(param);
		}else{
			result = SoaManager.getInstance().callNoTx(param);
		}
		if(result.getRows().size()>0){
			info=result.getRow(0);
		}
		return info;
	}

	
	/**
	 * 查询问题详情
	 * @return
	 */
	public static Map<String, Object> queryDtl(String questionId){
		AppParam param = new AppParam();
		Map<String,Object> detail =null;
		param.setService("custQuestionService");
		param.setMethod("updateViewCount");
		param.addAttr("questionId",questionId);
		AppResult result = null;
		param.setRmiServiceName(AppProperties.
				getProperties(DuoduoConstant.RMI_SERVICE_START+ ServiceKey.Key_zx));
		if(SpringAppContext.getBean("custQuestionService") == null){
			RemoteInvoke.getInstance().call(param);//更新浏览次数
		}else{
			SoaManager.getInstance().invoke(param);//更新浏览次数
		}
		param.setMethod("queryDtl");
		if(SpringAppContext.getBean("custQuestionService") == null){
			result = RemoteInvoke.getInstance().call(param);//更新浏览次数
		}else{
			result = SoaManager.getInstance().invoke(param);//更新浏览次数
		}
		if(result.getRows().size()>0){
			detail=result.getRows().get(0);
			String questionCustomerId = detail.get("customerId").toString();
			String typeId=detail.get("typeId").toString();
			if(StringUtils.isEmpty(DuoduoSession.getUser())){//如果用户没有登录
				detail.put("isSelf", false);//判断是否是自己
				detail.put("questionType",QuestionUtils.queryTypeDtl(typeId));
			}else{
				String sessionId = CustomerUtil.getCustId();
				detail.put("isSelf", sessionId.equals(questionCustomerId));//判断是否是自己
				detail.put("questionType",QuestionUtils.queryTypeDtl(typeId));
			}
		}
		return detail;
	}
	
	
	/**
	 * 是否可免费置顶
	 * @param customerId
	 * @return
	 */
	public static boolean freeTop(Object customerId){
		AppParam param = new AppParam();
		param.setService("questionTopService");
		param.setMethod("query");
		param.addAttr("type", "0");
		param.addAttr("customerId", customerId);
		AppResult result = null;
		if(SpringAppContext.getBean("questionTopService") == null){
			param.setRmiServiceName(AppProperties.
					getProperties(DuoduoConstant.RMI_SERVICE_START+ ServiceKey.Key_zx));
			result = RemoteInvoke.getInstance().callNoTx(param);
		}else{
			result = SoaManager.getInstance().callNoTx(param);
		}
		return !(result.getRows().size() >0);
	}
		
}
