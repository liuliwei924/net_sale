package org.xxjr.open.util;

import java.io.Serializable;
import java.util.List;
import java.util.Map;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.core.SpringAppContext;
import org.ddq.common.core.service.RemoteInvoke;
import org.ddq.common.core.service.SoaManager;
import org.ddq.common.util.StringUtil;
import org.ddq.common.web.page.PageUtil;
import org.llw.model.cache.RedisUtils;
import org.springframework.util.StringUtils;
import org.xxjr.cust.util.info.CustomerIdentify;
import org.xxjr.sys.util.ServiceKey;

public class LoanProdUtil {

	/** 产品类型信息缓存  **/
	public final static String KEY_PROD_TYPE_LIST = "key_prod_type_list";
	
	/**产品详情信息*/
	public final static String  KEY_PROD_DETAIL="key_prod_detail_";
	
	/**最新的申请信息*/
	public final static String KEY_PROD_NEW_APPLY_LIST="key_prod_new_apply_list";
	
	
	/**
	 * 获取产品类型列表
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public static List<Map<String, Object>> getProdTypeList(){
		List<Map<String, Object>> prodTypeList = (List<Map<String, Object>>) RedisUtils
			.getRedisService().get(KEY_PROD_TYPE_LIST);
		if(prodTypeList == null){
			prodTypeList = refreshProdTypeList();
		}
		return prodTypeList;
	}
	
	/**
	 * 根据产品类型id获取产品类型信息
	 * @param typeId
	 * @return
	 */
	public static Map<String, Object> getProdTypeById(String typeId){
		List<Map<String, Object>> prodTypeList = getProdTypeList();
		for(Map<String, Object> prodType : prodTypeList){
			if(prodType.get("typeId").toString().equals(typeId)){
				return prodType;
			}
		}
		return null;
	}
	
	/**
	 * 刷新产品类型列表
	 * @return
	 */
	private static List<Map<String, Object>> refreshProdTypeList(){
		AppResult result = new AppResult();
		AppParam param = new AppParam();
		param.setService("prodTypeService");
		param.setMethod("query");
		param.addAttr("status",1);
		param.setOrderBy("indexNum");
		param.setOrderValue(PageUtil.ORDER_ASC);
		param.setRmiServiceName(AppProperties.
				getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_open));
		if (SpringAppContext.getBean("prodTypeService") == null) {
			result = RemoteInvoke.getInstance().call(param);
		}else{
			result = SoaManager.getInstance().invoke(param);
		}
		List<Map<String, Object>> prodTypeList = result.getRows();
		RedisUtils.getRedisService().set(KEY_PROD_TYPE_LIST, (Serializable)prodTypeList, 3600 * 24 *7);
		return prodTypeList;
	}
	
	/**
	 * 获取产品详情
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public static Map<String, Object> getProdDetail(String prodId){
		Map<String, Object> prodDetail = (Map<String, Object>) RedisUtils
			.getRedisService().get(KEY_PROD_DETAIL + prodId);
		if(prodDetail == null){
			prodDetail = refreshProdDetail(prodId);
		}
		return prodDetail;
	}
	
	/**
	 * 刷新产品类型下的产品列表
	 * @return
	 */
	public static Map<String, Object> refreshProdDetail(String prodId){
		AppResult result = new AppResult();
		AppParam param = new AppParam();
		param.setService("prodService");
		param.setMethod("query");
		param.addAttr("prodId",prodId);
		param.setRmiServiceName(AppProperties.
				getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_open));
		if (SpringAppContext.getBean("prodService") == null) {
			result = RemoteInvoke.getInstance().call(param);
		}else{
			result = SoaManager.getInstance().invoke(param);
		}
		Map<String, Object> prodDetail = result.getRow(0);
		
		//查询申请流程
		AppParam authParam = new AppParam();
		authParam.setService("prodAuthService");
		authParam.setMethod("queryProdAuth");
		authParam.addAttr("prodId", prodId);
		authParam.setOrderBy("indexNum");
		authParam.setOrderValue("asc");
		authParam.setRmiServiceName(AppProperties.
				getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_open));
		AppResult authResult = new AppResult();
		if (SpringAppContext.getBean("prodAuthService") == null) {
			authResult = RemoteInvoke.getInstance().call(authParam);
		}else{
			authResult = SoaManager.getInstance().invoke(authParam);
		}
		List<Map<String, Object>> authList = authResult.getRows();
		prodDetail.put("authList", authList);
		
		RedisUtils.getRedisService().set(KEY_PROD_DETAIL + prodId, (Serializable)prodDetail, 3600 * 24 *7);
		return prodDetail;
	}
	
	
	/**
	 * 获取最新的申请信息
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public static List<Map<String, Object>> getNewApply(){
		List<Map<String, Object>> prodList = (List<Map<String, Object>>) RedisUtils
			.getRedisService().get(KEY_PROD_NEW_APPLY_LIST);
		if(prodList == null){
			prodList = refreshNewApply();
		}
		return prodList;
	}
	
	/**
	 * 刷新最新的申请信息
	 * @return
	 */
	private static List<Map<String, Object>> refreshNewApply(){
		AppResult result = new AppResult();
		AppParam param = new AppParam();
		param.setService("prodApplyService");
		param.setMethod("queryNewApply");
		param.setOrderBy("createTime");
		param.setOrderValue(PageUtil.ORDER_DESC);
		param.addAttr("size", 5);
		param.setRmiServiceName(AppProperties.
				getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_open));
		if (SpringAppContext.getBean("prodApplyService") == null) {
			result = RemoteInvoke.getInstance().call(param);
		}else{
			result = SoaManager.getInstance().invoke(param);
		}
		List<Map<String, Object>> prodList = result.getRows();
		RedisUtils.getRedisService().set(KEY_PROD_NEW_APPLY_LIST, (Serializable)prodList, 60*5);
		return prodList;
	}
	
	
	
	/***
	 * 设置小额贷款点击的次数
	 * @param params
	 * @return
	 */
	public static AppResult updateLoanCount(AppParam params){
		AppResult result = new AppResult();
		
		params.addAttr("cardCount", "1");
		String sysCount = params.getAttr("sysCode")+"Count";
		params.addAttr(sysCount, "1");

		params.setService("loanBrowseRecordService");
		params.setMethod("updateLoanCount");
		params.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START
						+ ServiceKey.Key_sum));
		RemoteInvoke.getInstance().call(params);

		return result;
	}
	/**
	 * 记录用户行为
	 * @param appParam
	 */
	public static void updateUserBehaviour(AppParam appParam) {
		String customerId = StringUtil.getString(appParam.getAttr("customerId"));
		if (!StringUtils.isEmpty(customerId)) {
			Map<String, Object> custInfo = CustomerIdentify.getCustIdentify(customerId);
			AppParam params = new AppParam("sumUserBehaviourService","insert");
			params.addAttr("customerId", customerId);
			params.addAttr("telephone", custInfo.get("telephone"));
			params.addAttr("proId", appParam.getAttr("proId"));
			params.addAttr("appVersion", appParam.getAttr("appVersion"));
			ServiceKey.doCall(params, ServiceKey.Key_sum);
		}
	}

}
