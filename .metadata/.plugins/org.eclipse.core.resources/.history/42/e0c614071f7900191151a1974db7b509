package org.xxjr.busi.util.dai;

import java.util.Calendar;
import java.util.Date;
import java.util.Map;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.core.SpringAppContext;
import org.ddq.common.core.service.RemoteInvoke;
import org.ddq.common.core.service.SoaManager;
import org.ddq.common.util.DateUtil;
import org.ddq.common.util.StringUtil;
import org.springframework.util.StringUtils;
import org.xxjr.busi.util.BorrowConstant;
import org.xxjr.sys.util.ServiceKey;
import org.xxjr.sys.util.SysParamsUtil;

/**
 * 
 * @author Administrator
 *
 */
public class BorrowHandleUtil {
	
	
	/**
	 * 判断是否可以申请退单
	 * @param map
	 * @return
	 */
	public static AppResult canBorrowBack(Map<String, Object> borrowInfo){
		AppResult result = new AppResult();
		String robWay = StringUtil.getString(borrowInfo.get("robWay"));
		String receiveStatus = StringUtil.getString(borrowInfo.get("receiveStatus"));
		Date createTime = DateUtil.toDateByString(StringUtil.objectToStr(borrowInfo.get("createTime")),
				DateUtil.DATE_PATTERN_YYYY_MM_DD_HHMMSS);
		
		// 判断是否免费单
		if(BorrowConstant.RobWay_1.equals(robWay)){
			result.setSuccess(false);
			result.setMessage("抱歉！免费抢的单不能申请退单！");
			return result;
		}
		// 判断是否已申请退单
		if(BorrowConstant.receiveStatus_5.equals(receiveStatus)){
			result.setSuccess(false);
			result.setMessage("抱歉！该单已经申请退单！");
			return result;
		}
		
		// 判断是否为会员特价单，只针对抢单判断
		if(BorrowConstant.RobWay_7.equals(robWay)){
			result.setSuccess(false);
			result.setMessage("抱歉！特价单不能申请退单！");
			return result;
		}
		// 判断抢单时间 3天内抢的单可退
		int canBackDate = SysParamsUtil.getIntParamByKey("canBackDate", 3);
		Date threeDayDate = DateUtil.toDateByString(DateUtil
				.toStringByParttern(
						DateUtil.getNextDay(new Date(), -canBackDate),
						DateUtil.DATE_PATTERN_YYYY_MM_DD),
				DateUtil.DATE_PATTERN_YYYY_MM_DD);
		if(createTime.getTime() < threeDayDate.getTime()){
			result.setSuccess(false);
			result.setErrorCode("10011");
			result.setMessage("对不起，最长退单时限是抢单后" + canBackDate + "天内，您的处理时间已经超过最长时限，不能申请退单。");
			return result;
		}
		return result;
	}

	
	/**
	 * 判断推广是否可以申请退单
	 * @param map
	 * @return
	 */
	public static AppResult canTgBack(Map<String, Object> borrowInfo){
		AppResult result = new AppResult();
		String clickStatus = StringUtil.getString(borrowInfo.get("clickStatus"));
		String payTimeStr = StringUtil.getString(borrowInfo.get("payTime"));
		String receiveStatus = StringUtil.getString(borrowInfo.get("receiveStatus"));
		
		// 判断是否已申请退单
		if(BorrowConstant.receiveStatus_5.equals(receiveStatus)){
			result.setSuccess(false);
			result.setMessage("抱歉！该单已经申请退单！");
			return result;
		}
		// 判断是否点击拨号或查看 详情
		if (!"1".equals(clickStatus)) {
			result.setSuccess(false);
			result.setMessage("抱歉！未点击拨号或查看详情，不能申请退单！");
			return result;
		}
		// 判断付款时间 在3天内的单可退
		if (!StringUtils.isEmpty(payTimeStr)) {
			Date payTime = DateUtil.toDateByString(payTimeStr,DateUtil.DATE_PATTERN_YYYY_MM_DD_HHMMSS);
			int canTgBackDate = SysParamsUtil.getIntParamByKey("canTgBackDate", 3);
			Date threeDayDate = DateUtil.toDateByString(DateUtil
					.toStringByParttern(
							DateUtil.getNextDay(new Date(), -canTgBackDate),
							DateUtil.DATE_PATTERN_YYYY_MM_DD),
					DateUtil.DATE_PATTERN_YYYY_MM_DD);
			if(payTime.getTime() < threeDayDate.getTime()){
				result.setSuccess(false);
				result.setErrorCode("10011");
				result.setMessage("对不起，最长退单时限是付款后" + canTgBackDate + "天内，您的处理时间已经超过最长时限，不能申请退单。");
				return result;
			}
		}
		return result;
	}
	
	/**
	 * 删除订单详情信息
	 * @param borrowInfo
	 * @return
	 */
	public static AppResult delBorrowDtl(Object receiveId,Object customerId,String sourceType){
		AppResult result = new AppResult();
		// 标记信息
		AppParam labelParam = new AppParam();
		labelParam.setService("daiLabelInfoService");
		labelParam.setMethod("delLabelInfo");
		labelParam.addAttr("receiveId", receiveId);
		labelParam.addAttr("customerId", customerId);
		labelParam.addAttr("sourceType", sourceType);
		labelParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_busi));
		if (SpringAppContext.getBean("daiLabelInfoService") == null) {
			result = RemoteInvoke.getInstance().call(labelParam);
		}else{
			result = SoaManager.getInstance().invoke(labelParam);
		}
		// 跟进记录
		AppParam followParam = new AppParam();
		followParam.setService("daiFollowRecordService");
		followParam.setMethod("delFollowInfo");
		followParam.addAttr("receiveId", receiveId);
		followParam.addAttr("customerId", customerId);
		followParam.addAttr("sourceType", sourceType);
		followParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_busi));
		if (SpringAppContext.getBean("daiFollowRecordService") == null) {
			result = RemoteInvoke.getInstance().call(followParam);
		}else{
			result = SoaManager.getInstance().invoke(followParam);
		}
		// 处理记录
		AppParam handleParam = new AppParam();
		handleParam.setService("daiHandleRecordService");
		handleParam.setMethod("delHandleInfo");
		handleParam.addAttr("receiveId", receiveId);
		handleParam.addAttr("customerId", customerId);
		handleParam.addAttr("sourceType", sourceType);
		handleParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_busi));
		if (SpringAppContext.getBean("daiHandleRecordService") == null) {
			result = RemoteInvoke.getInstance().call(handleParam);
		}else{
			result = SoaManager.getInstance().invoke(handleParam);
		}
		return result;
	}
	
	/**
	 * 判断是否为测试号码
	 * @param telephone
	 * @return
	 */
	public static boolean isTestTelephone(String telephone) {
		String telephones = SysParamsUtil.getStringParamByKey("robTestTelephone","18148563422,15140670150");
		if (!StringUtils.isEmpty(telephones)) {
			if (telephones.indexOf(telephone) > -1) {
				return true;
			}
		}
		return false;
	}
	
	/**
	 * 
	 * @param firstDayOfWeek 以星期几为一周起始
	 * @param dayOfWeek 所要获取星期几的日期
	 * @param weekOffset  周偏移，上周为-1，本周为0，下周为1，依此类推
	 * @return
	 */
    public static String getDayOfWeek(int firstDayOfWeek, int dayOfWeek, int weekOffset){
        if(dayOfWeek > Calendar.SATURDAY || dayOfWeek < Calendar.SUNDAY){
            return null;
        }
        if(firstDayOfWeek > Calendar.SATURDAY || firstDayOfWeek < Calendar.SUNDAY){
            return null;
        }
        Calendar date = Calendar.getInstance();
        date.setFirstDayOfWeek(firstDayOfWeek);
        date.add(Calendar.WEEK_OF_MONTH, weekOffset);
        date.set(Calendar.DAY_OF_WEEK, dayOfWeek);
        //时分秒全部置0
        date.set(Calendar.HOUR_OF_DAY, 0);
        date.set(Calendar.MINUTE, 0);
        date.set(Calendar.SECOND, 0);
        date.set(Calendar.MILLISECOND, 0);
        return DateUtil.toStringByParttern(date.getTime(), DateUtil.DATE_PATTERN_YYYY_MM_DD);
    }
}
