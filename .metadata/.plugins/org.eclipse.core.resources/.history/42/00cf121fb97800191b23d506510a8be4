package org.xxjr.busi.store.record;

import java.util.Date;
import java.util.List;
import java.util.Map;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppResult;
import org.ddq.common.core.service.BaseService;
import org.ddq.common.core.service.SoaManager;
import org.ddq.common.exception.AppException;
import org.ddq.common.exception.DuoduoError;
import org.ddq.common.web.session.DuoduoSession;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import org.xxjr.busi.util.BorrowConstant;
import org.xxjr.sys.util.NumberUtil;

@Lazy
@Service
public class BorrowSelRecordService extends BaseService {
	private static final String NAMESPACE = "BORROWSELRECORD";

	/**
	 * querys
	 * @param params
	 * @return
	 */
	public AppResult query(AppParam params) {
		return super.query(params, NAMESPACE);
	}
	
	/**
	 * queryByPage
	 * @param params
	 * @return
	 */
	public AppResult queryByPage(AppParam params) {
		return super.queryByPage(params, NAMESPACE);
	}
	
	/**
	 * queryCount
	 * @param params
	 * @return
	 */
	public AppResult queryCount(AppParam params) {
		int size = getDao().count(NAMESPACE, super.COUNT,params.getAttr(),params.getDataBase());
		AppResult result = new AppResult();
		result.putAttr(DuoduoConstant.TOTAL_SIZE, size);
		return result;
	}
	
	/**
	 * batchInsert
	 * @param params
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public AppResult batchInsert(AppParam params) {
		AppResult result = new AppResult();
		List<Map<String, Object>> list = (List<Map<String, Object>>)params.getAttr("list");
	
		int size = super.getDao().batchInsert(NAMESPACE, "batchInsert", list, params.getDataBase());

		result.putAttr(DuoduoConstant.DAO_Insert_SIZE, size);
		return result;
	}
	
	
	/**
	 * saveRobInfo
	 * @param params
	 * @return
	 */
	public AppResult saveRobInfo(AppParam params) {
		AppResult result = new AppResult();
		if(!StringUtils.isEmpty(params.getAttr("applyId"))){
			AppParam applyParams = new AppParam("borrowApplyService", "update");
			applyParams.addAttr("applyId", params.getAttr("applyId"));
			applyParams.addAttr("status", BorrowConstant.apply_status_5);
			AppResult applyResult = SoaManager.getInstance().invoke(applyParams);
			
			int updateSize = NumberUtil.getInt(applyResult.getAttr(DuoduoConstant.DAO_Update_SIZE), 0);
			if(updateSize > 0){
				result = this.insert(params);
			}
			
			try{
				// 挂卖成功后，如果小贷池有更新创建时间
				AppParam xxLoan = new AppParam("thirdPushPoolService", "updateByApplyId");
				xxLoan.addAttr("applyId", params.getAttr("applyId"));
				xxLoan.addAttr("immediate", 2);
				Object createTime = params.getAttr("createTime");
				if(StringUtils.isEmpty(createTime)){
					createTime = new Date();
				}
				xxLoan.addAttr("createTime", createTime);
				SoaManager.getInstance().invoke(xxLoan);
				
				//删除回流池跟进数据
				AppParam delOldParams = new AppParam("kfOldDataService", "delete");
				delOldParams.addAttr("applyId", params.getAttr("applyId"));
				SoaManager.getInstance().invoke(delOldParams);
			}catch(Exception e){
				e.printStackTrace();
			}
		}
		return result;
	}
	
	
	/**
	 * insert
	 * @param params
	 * @return
	 */
	public AppResult insert(AppParam params) {
		AppResult result = new AppResult();
		if(StringUtils.isEmpty(params.getAttr("createTime"))){
			params.addAttr("createTime", new Date());
		}
		params.addAttr("createBy", DuoduoSession.getUserName());
		params.addAttr("updateTime", new Date());
		result = super.insert(params, NAMESPACE);
		if (result.isSuccess()) {
			params.setService("borrowSelCountService");
			params.setMethod("save");
			SoaManager.getInstance().invoke(params);
		}
		return result;
	}
	
	public AppResult save (AppParam params) {
		AppParam delParam = new AppParam();
		delParam.addAttr("applyId", params.getAttr("applyId"));
		this.getDao().delete(NAMESPACE, "delByApplyId", delParam.getAttr(), params.getDataBase());

		AppResult result = this.insert(params);
		return result;
	}
	
	/**
	 * update
	 * @param params
	 * @return
	 */
	public AppResult update(AppParam params) {
		params.addAttr("updateTime", new Date());
		return super.update(params, NAMESPACE);
	}
	
	/**
	 * delete
	 * @param params
	 * @return
	 */
	public AppResult delete(AppParam params) {
		String ids = (String) params.getAttr("ids");
		AppResult  result = null;
		if (!StringUtils.isEmpty(ids)) {
			for (String id : ids.split(",")) {
				AppParam param = new AppParam();
				param.addAttr("selId", id);
				
				result = super.delete(param, NAMESPACE);
			}
		} else if (!StringUtils.isEmpty(params.getAttr("selId"))) {
			result = super.delete(params, NAMESPACE);
		} else {
			throw new AppException(DuoduoError.DELETE_NO_ID);
		}
		return result;
	}
	
	
	@SuppressWarnings("unchecked")
	public AppResult batchSaveRobInfo(AppParam params) {
		AppResult result = new AppResult();
		List<Map<String, Object>> list = (List<Map<String, Object>>) params.getAttr("list");
		for (Map<String, Object> map : list) {
			if(!StringUtils.isEmpty(map.get("applyId"))){
				int handleType = NumberUtil.getInt(map.get("handleType"));
				AppParam applyParams = new AppParam("borrowApplyService", "update");
				applyParams.addAttr("applyId", map.get("applyId"));
				applyParams.addAttr("status", handleType == 2 ? BorrowConstant.apply_status_5 : BorrowConstant.apply_status_6);
				AppResult applyResult = SoaManager.getInstance().invoke(applyParams);
				
				int updateSize = NumberUtil.getInt(applyResult.getAttr(DuoduoConstant.DAO_Update_SIZE), 0);
				if(updateSize > 0){
					AppParam insertParam = new AppParam();
					insertParam.addAttrs(map);
					result = this.insert(insertParam);
				}
				
				try{
					// 挂卖成功后，如果小贷池有更新创建时间
					AppParam xxLoan = new AppParam("thirdPushPoolService", "updateByApplyId");
					xxLoan.addAttr("applyId", map.get("applyId"));
					xxLoan.addAttr("immediate", 2);
					Object createTime = map.get("createTime");
					if(StringUtils.isEmpty(createTime)){
						createTime = new Date();
					}
					xxLoan.addAttr("createTime", createTime);
					SoaManager.getInstance().invoke(xxLoan);
					
					//删除回流池跟进数据
					AppParam delOldParams = new AppParam("kfOldDataService", "delete");
					delOldParams.addAttr("applyId", map.get("applyId"));
					SoaManager.getInstance().invoke(delOldParams);
				}catch(Exception e){
					e.printStackTrace();
				}
			}
		}
		return result;
	}
}
