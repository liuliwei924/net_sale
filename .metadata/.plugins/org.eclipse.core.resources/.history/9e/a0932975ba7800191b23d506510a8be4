package org.xxjr.cust.member;

import java.util.Date;
import java.util.Map;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppResult;
import org.ddq.common.core.service.BaseService;
import org.ddq.common.exception.AppException;
import org.ddq.common.exception.DuoduoError;
import org.ddq.common.util.DateUtil;
import org.ddq.common.web.session.DuoduoSession;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

@Lazy
@Service
public class CustFreeService extends BaseService {
	private static final String NAMESPACE = "CUSTFREE";

	/**
	 * querys
	 * @param params
	 * @return
	 */
	public AppResult query(AppParam params) {
		return super.query(params, NAMESPACE);
	}
	
	/**
	 * queryByPage
	 * @param params
	 * @return
	 */
	public AppResult queryByPage(AppParam params) {
		return super.queryByPage(params, NAMESPACE);
	}
	
	/**
	 * queryCount
	 * @param params
	 * @return
	 */
	public AppResult queryCount(AppParam params) {
		int size = getDao().count(NAMESPACE, super.COUNT,params.getAttr(),params.getDataBase());
		AppResult result = new AppResult();
		result.putAttr(DuoduoConstant.TOTAL_SIZE, size);
		return result;
	}
	
	
	/**
	 * insert
	 * @param params
	 * @return
	 */
	public AppResult insert(AppParam params) {
		params.addAttr("createTime", new Date());
		params.addAttr("createBy", DuoduoSession.getUserName());
		return super.insert(params, NAMESPACE);
	}
	
	/**
	 * update
	 * @param params
	 * @return
	 */
	public AppResult update(AppParam params) {
		return super.update(params, NAMESPACE);
	}
	
    //查询用户可抽奖次数
	public AppResult queryLotteryCount(AppParam params){
		AppResult result = new AppResult();
		Object customerId = params.getAttr("customerId");
		if (StringUtils.isEmpty(customerId)
				|| StringUtils.isEmpty(params.getAttr("isVip"))) {
			throw new AppException(DuoduoError.UPDATE_NO_PARAMS);
		}
		//
		boolean isVip = (boolean)params.getAttr("isVip");
		//如果是会员则当天有3次抽奖机会，普通会员只有1次
		int todayCount = isVip ? 3 : 1;
		AppParam queryParam = new AppParam();
		queryParam.addAttr("customerId", customerId);
		AppResult queryResult = this.query(queryParam);
		//如果用户尚未初始化可抽奖次数配置信息，则插入一条初始信息
		if(queryResult.getRows().size() == 0){
			params.addAttr("tlotteryCount", todayCount);
			params.addAttr("updateTime", new Date());
			this.insert(params);
			result.putAttr("count", todayCount);
			return result;
		}
		Map<String,Object> resultMap = queryResult.getRow(0);
		//获取年月日
		String updateTime = resultMap.get("updateTime").toString()
				.split("\\s+")[0];
		int lotteryCount = (int)resultMap.get("lotteryCount");
		String today = DateUtil.toStringByParttern(new Date(),
				DateUtil.DATE_PATTERN_YYYY_MM_DD);
		// 判断是否需要初始化当天抽奖次数
		if (!updateTime.equals(today)) {
			params.addAttr("tlotteryCount", todayCount);
			params.addAttr("tlotteryCountF", 1);
			params.addAttr("updateTime", today);
			this.update(params);
		}else{
			todayCount = (int)resultMap.get("tlotteryCount");
		}
		result.putAttr("count", todayCount + lotteryCount);
		return result;
	}
	
	// 修改用户可抽奖次数
	public AppResult updateLotteryCount(AppParam params) {
		AppResult result = new AppResult();
		Object customerId = params.getAttr("customerId");
		if (StringUtils.isEmpty(customerId)
				|| StringUtils.isEmpty(params.getAttr("count"))
				|| StringUtils.isEmpty(params.getAttr("isVip"))) {
			throw new AppException(DuoduoError.UPDATE_NO_PARAMS);
		}
		//正数表示永久抽奖次数增加，负数表示扣除用户的中奖次数（优先扣除永久可用的次数）
		int count = (int)params.getAttr("count");
		boolean isVip = (boolean)params.getAttr("isVip");

		AppParam queryParam = new AppParam();
		queryParam.addAttr("customerId", customerId);
		AppResult queryResult = this.query(queryParam);
		
		int lotteryCount = 0;
		int tlotteryCount = isVip ? 3 : 1;
		if(queryResult.getRows().size() == 0){
			AppParam insertParam = new AppParam();
			insertParam.addAttr("customerId", customerId);
			insertParam.addAttr("tlotteryCount", tlotteryCount);
			insertParam.addAttr("updateTime", new Date());
			this.insert(insertParam);
		}else{
			Map<String,Object> resultMap = queryResult.getRow(0);
			lotteryCount = (int)resultMap.get("lotteryCount");
			String updateTime = resultMap.get("updateTime").toString()
					.split("\\s+")[0];
			String today = DateUtil.toStringByParttern(new Date(),
					DateUtil.DATE_PATTERN_YYYY_MM_DD);
			// 判断是否需要初始化当天抽奖次数
			if (!updateTime.equals(today)) {
				params.addAttr("tlotteryCount", tlotteryCount);
				params.addAttr("tlotteryCountF", 1);
				params.addAttr("updateTime", today);
				this.update(params);
		    }else{
				tlotteryCount = (int)resultMap.get("tlotteryCount");
		    }
		}
		AppParam updateParam = new AppParam();
		updateParam.addAttr("customerId", customerId);
		if(count >0){//增加用户的可抽奖次数
			updateParam.addAttr("lotteryCount", lotteryCount + count);
			updateParam.addAttr("lotteryCountF", 1);
			result = this.update(updateParam);
		}else{//减少用户的可抽奖次数
			if(lotteryCount == 0){//如果永久可用的次数扣完了，则扣除当日可用次数
				updateParam.addAttr("tlotteryCount", tlotteryCount + count);
				result = this.update(updateParam);
			}else{
				updateParam.addAttr("lotteryCount", lotteryCount + count);
				result = this.update(updateParam);
			}
		}
		return result;
	}	
	
	/**
	 * delete
	 * @param params
	 * @return
	 */
	public AppResult delete(AppParam params) {
		String ids = (String) params.getAttr("ids");
		AppResult  result = null;
		if (!StringUtils.isEmpty(ids)) {
			for (String id : ids.split(",")) {
				AppParam param = new AppParam();
				param.addAttr("customerId", id);
				
				result = super.delete(param, NAMESPACE);
			}
		} else if (!StringUtils.isEmpty(params.getAttr("customerId"))) {
			result = super.delete(params, NAMESPACE);
		} else {
			throw new AppException(DuoduoError.DELETE_NO_ID);
		}
		return result;
	}
}