package org.xxjr.busi.util.push.impl;

import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.core.service.RemoteInvoke;
import org.ddq.common.util.DateUtil;
import org.ddq.common.util.LogerUtil;
import org.ddq.common.util.StringUtil;
import org.xxjr.busi.util.CountGradeUtil;
import org.xxjr.busi.util.push.PushCode;
import org.xxjr.busi.util.push.PushPlatformUtils;
import org.xxjr.busi.util.push.PushUtil;
import org.xxjr.sys.util.NumberUtil;
import org.xxjr.sys.util.ServiceKey;
import org.xxjr.sys.util.SysParamsUtil;

import com.alibaba.fastjson.JSONObject;

@PushCode(13)
public class PushBaoJieUtil implements PushUtil{
	private static final String url = "http://daikuan.kanzhundai.com/v1/dk/add";
	
//	private static final String cert = "V5fDqn9AgyBAQR+NhhdqkQ==";
	
//	private static final String test_cert = "xd24Qx1vqd/Fs59QW3uPLw==";
	
	@Override
	public int pushData(Map<String, Object> row, Integer pushType) {
		int status = 2;
		try {
			Map<String, Object> config = PushPlatformUtils.getConfigByCode(pushType);
			
			if ((!PushPlatformUtils.checkChannelOpen(config))) {
				LogerUtil.log(PushBaoJieUtil.class, config.get("pushName") + "推送未打开");
				return 3;
			}
			if ((!PushPlatformUtils.checkChannelMaxCount(config))) {
				LogerUtil.log(PushBaoJieUtil.class, config.get("pushName") + "推送已达上限");
				return 3;
			}
			if ((!PushPlatformUtils.checkChannelLimit(row, config))) {
				LogerUtil.log(PushBaoJieUtil.class, config.get("pushName") + "筛选条件无法通过");
				return 4;
			}
			if ((!PushPlatformUtils.checkStopDate(config))) {
				LogerUtil.log(PushBaoJieUtil.class, config.get("pushName") + "推送数据推送已暂停");
				return 5;
			}
			String json = dataToJson(row);
			Map<String, String> connParam = new HashMap<String, String>();
			connParam.put("customerList", json);
			Map<String, Object> resMap = PushPlatformUtils.httpPost(url, null, json, true, null);
			if ("true".equals(StringUtil.getString(resMap.get("status")))) {
				status = 1;
			}
			AppParam updateParam = new AppParam("thirdPushPoolService", "updateStatus");
			updateParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_busi_in));
			updateParam.addAttrs(row);
			updateParam.addAttr("pushType", pushType);
			updateParam.addAttr("status", status);
			updateParam.addAttr("message", resMap.get("msg"));
			RemoteInvoke.getInstance().call(updateParam);
			LogerUtil.log("推送保街数据任务 PushBaoJieUtil end");
		} catch (Exception e) {
			LogerUtil.error(PushXqbUtil.class, e, "PushBaoJieUtil >>>>>>>>>>>>>>>>>>error");
		}
		return status;
	}

	private String dataToJson(Map<String, Object> row) {
		JSONObject context = new JSONObject();
		String cert = SysParamsUtil.getStringParamByKey("push_baojie_cfg_cert", "V5fDqn9AgyBAQR+NhhdqkQ==");
		context.put("cert", cert);
		context.put("uc", "DK");
		context.put("city", row.get("cityName"));
		context.put("username", row.get("applyName"));
		context.put("mobile", row.get("telephone"));
		int age = NumberUtil.getInt(row.get("age"), -1);
		if (age == -1 || age <= 22 || age >= 60) {
			age = 28;
		}
		Random random = new Random();
		Calendar ca = Calendar.getInstance();
		int year = ca.get(Calendar.YEAR)-age;
		int month = random.nextInt(12)%(12) + 1;
		int day = random.nextInt(30)%(30) + 1;
		String birthday = year +"-" +(month<10? "0" +month : month+"") +"-" + (day<10 ? "0" +day : day+"");
		context.put("birthday", birthday);
		
		String sex = StringUtil.getString(row.get("sex"));//性别处理
		if ("1".equals(sex)) {
			context.put("sex", "M");
		} else {
			context.put("sex", "F");
		}
		context.put("idcard", row.get("identifyNo"));
		//1无固定职业 2企业主 3个体户 4上班族  5-学生
		Integer workType = NumberUtil.getInt(row.get("workType"), 1);
		if (workType == 2) {
			context.put("occupation", "企业主");
		}else if (workType == 4) {
			context.put("occupation", "在职员工");
		}else {
			context.put("occupation", "自由职业");
		}
		Double loanAmount = NumberUtil.getDouble(row.get("loanAmount"), 1);
		if (loanAmount < 2) {
			context.put("loanMoney", "5000元-2万元");
		}else if (loanAmount >= 2 && loanAmount < 5) {
			context.put("loanMoney", "2-5万元");
		}else if (loanAmount >= 5 && loanAmount < 10) {
			context.put("loanMoney", "5-10万元");
		}else {
			context.put("loanMoney", "10万元以上");
		}
		
		int socialType = NumberUtil.getInt(row.get("socialType"), 2);
		context.put("security", CountGradeUtil.judgeSocialType(socialType) ? "Y" : "N");
		
		int fundType = NumberUtil.getInt(row.get("fundType"), 2);
		context.put("fund", CountGradeUtil.judgeFundType(fundType) ? "Y" : "N");
		
		int houseType = NumberUtil.getInt(row.get("houseType"), 2);
		context.put("house", CountGradeUtil.judgeHouse(houseType) ? "Y" : "N");
		context.put("hasHouseLoan", houseType == 3 ? "Y" : "N");

		int carType = NumberUtil.getInt(row.get("carType"), 2);
		context.put("car", CountGradeUtil.judgeCar(carType) ? "Y" : "N");
		context.put("hasCarLoan", carType == 3 ? "Y" : "N");
		
		context.put("creditCard", "Y");
		
		int insurType = NumberUtil.getInt(row.get("insurType"), 0);
		context.put("policy", CountGradeUtil.judgeInsurType(insurType) ? "Y" : "N");
		if (CountGradeUtil.judgeInsurType(insurType)) {
			int insurMonthAmt = NumberUtil.getInt(row.get("insurMonthAmt"), 1000);
			int insurPayType = NumberUtil.getInt(row.get("insurPayType"), 0);
			if (insurPayType == 0 || (insurPayType == 1 && insurMonthAmt > 1500)) {
				context.put("lifeInsuranceTotal", "年保费大于2400");
			}else {
				context.put("lifeInsuranceTotal", "年保费不足2400");
			}
		}
		context.put("ip", row.get("applyIp"));
		context.put("referurl", "https://tg.dai35.com/dswpage/page8");
		context.put("applytime", DateUtil.toStringByParttern(new Date(), DateUtil.DATE_PATTERN_YYYY_MM_DD_HHMMSS));
		return context.toJSONString();
	}

}
