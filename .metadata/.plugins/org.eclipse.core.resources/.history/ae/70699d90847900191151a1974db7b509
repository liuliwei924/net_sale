package org.xxjr.job.listener.busi;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.util.DateUtil;
import org.ddq.common.util.LogerUtil;
import org.llw.ddq.job.core.BaseExecteJob;
import org.llw.ddq.job.util.JobConstant;
import org.llw.ddq.job.util.JobUtil;
import org.llw.xxjr.busi.util.borrow.BorrowUtils;
import org.llw.xxjr.busi.util.borrow.MjbBorrowRobUtil;
import org.ddq.common.core.service.RemoteInvoke;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;
import org.xxjr.cust.util.CustConstant;
import org.xxjr.sys.util.ServiceKey;
import org.xxjr.sys.util.SysParamsUtil;

/**
 * 免费抢单每天概总(每周日晚24点前执行，插入下一周的数据)
 * 
 * @author Administrator
 *
 */
@Lazy
@Component
public class AutoFreeRobJob implements BaseExecteJob {
	private static Logger log = LogManager.getLogger(AutoFreeRobJob.class);

	@Override
	public AppResult executeJob(AppParam param) {
		LogerUtil.log("AutoFreeRobJob >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> start");
		AppResult result = new AppResult();
		Object processId = param.getAttr(JobConstant.KEY_processId);
		// 获取免费抢单时间配置
		String[] timeCfgArr = BorrowUtils.getFreeRobTimeCfg();
		List<String> timeCfgList = Arrays.asList(timeCfgArr);
		List<Map<String,Object>> list = new ArrayList<Map<String,Object>>();
		try {
			for (int i = 1; i <= 7; i++) {
				String recordDate = DateUtil.toStringByParttern(
						DateUtil.getNextDay(new Date(), i),
						DateUtil.DATE_PATTERN_YYYY_MM_DD);
				for(String timeCfg : timeCfgList){
					String[] times = timeCfg.split("-");
					Map<String,Object> row = new HashMap<String, Object>();
					row.put("recordDate", recordDate);// 抢单日期
					row.put("roundNum", times[0]);// 每天轮数
					row.put("beginRobTime", recordDate + " "+ times[1] + ":00:00");// 抢单开始日期
					row.put("endRobTime", recordDate + " "+ times[2] + ":00:00");// 抢单结束日期
					row.put("leftCount", SysParamsUtil.getIntParamByKey("freeRobActualChancePerDay", 80));// 每轮免费抢单实际单数80
					list.add(row);
				}
			}
			if (list.size() > 0) {
				AppParam addParam = new AppParam();
				addParam.setService("freeRobCountService");
				addParam.setMethod("batchInsert");
				addParam.addAttr("list", list);
				addParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_busi));
					RemoteInvoke.getInstance().call(addParam);
			}
			LogerUtil.log("成功添加了：" + list.size() +" 条记录");
			LogerUtil.log("AutoFreeRobJob >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> end");
			
			generateMjbFreeRob();//生成马甲包的免费抢单数量
		} catch (Exception e) {
			JobUtil.addProcessExecute(processId, "免费抢单每天概总报错：" + e.getMessage());
			log.error("AutoFreeRobJob executeJob error:", e);
			result.setSuccess(Boolean.FALSE);
			result.setMessage(e.getMessage());
		}
		return result;
	}
	
	
	private static void generateMjbFreeRob(){
		String timeCfg = MjbBorrowRobUtil.getMjbFreeRobTimeCfg();
		List<Map<String,Object>> list = new ArrayList<Map<String,Object>>();
		int freeRobChancePerDay = SysParamsUtil.getIntParamByKey("mjb_freeRobChancePerDay", 100);
		for (int i = 1; i <= 7; i++) {
			String recordDate = DateUtil.toStringByParttern(
					DateUtil.getNextDay(new Date(), i),
					DateUtil.DATE_PATTERN_YYYY_MM_DD);
			String[] times = timeCfg.split("-");
			Map<String,Object> row = new HashMap<String, Object>();
			row.put("recordDate", recordDate);// 抢单日期
			row.put("roundNum", times[0]);// 每天轮数
			row.put("beginRobTime", recordDate + " "+ times[1] + ":00:00");// 抢单开始日期
			row.put("endRobTime", recordDate + " "+ times[2] + ":00:00");// 抢单结束日期
			row.put("leftCount", freeRobChancePerDay);
			row.put("appType", CustConstant.CUST_mjb_Xdyzj);
			list.add(row);
		}
		if (list.size() == 0) {
			return;
		}
		AppParam addParam = new AppParam();
		addParam.setService("freeRobCountService");
		addParam.setMethod("batchInsert");
		addParam.addAttr("list", list);
		addParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_mjb));
			RemoteInvoke.getInstance().call(addParam);
	}

}
