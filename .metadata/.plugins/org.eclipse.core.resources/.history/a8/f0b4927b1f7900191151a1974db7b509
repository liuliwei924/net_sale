package org.xxjr.sys.util;

import java.io.Serializable;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.core.SpringAppContext;
import org.ddq.common.core.service.RemoteInvoke;
import org.ddq.common.core.service.SoaManager;
import org.llw.model.cache.RedisUtils;

public class PathConfigUtil {

	/** 路径配置信息缓存  **/
	public final static String KEY_PATH_CONFIG = "key_path_config";
	
	/** 缓存保留时长为7天 **/
	public static Integer PATHCONFIG_CACHE_TIME = 7*24*60*60;
	
	
	@SuppressWarnings("unchecked")
	public static List<Map<String, Object>> getPathConfigList() {
		List<Map<String, Object>> list = (List<Map<String, Object>>) RedisUtils
				.getRedisService().get(KEY_PATH_CONFIG);
		if (list == null || list.size() <= 0) {
			list = refreshPathConfigList();
		}
		return list;
	}
	
	/**
	 * 获取路径配置信息
	 * @return
	 */
	public static Map<String, Object> getPathConfig(String pathCode){
		List<Map<String, Object>> configs = getPathConfigList();
		for(Map<String, Object> row : configs){
			if(pathCode.equals(row.get("pathCode").toString())){
				return row;
			}
		}
		return new HashMap<String,Object>();
	}
	
	
	/**
	 * 刷新路径配置信息
	 * @return
	 */
	public static List<Map<String, Object>> refreshPathConfigList(){
		AppResult result = new AppResult();
		AppParam param = new AppParam();
		param.setService("pathConfigService");
		param.setMethod("query");
		param.setOrderBy("createTime");
		param.setOrderValue("DESC");
		param.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sys));
		if (SpringAppContext.getBean("pathConfigService") == null) {
			result = RemoteInvoke.getInstance().call(param);
		}else{
			result = SoaManager.getInstance().invoke(param);
		}
		List<Map<String, Object>> list = result.getRows();
		RedisUtils.getRedisService().set(KEY_PATH_CONFIG, (Serializable)list, PATHCONFIG_CACHE_TIME);
		return list;
	}
	
	
}
