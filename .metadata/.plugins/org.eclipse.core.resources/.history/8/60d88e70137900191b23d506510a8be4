package org.xxjr.store.web.action.account.fx;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.exception.ExceptionUtil;
import org.ddq.common.exception.SysException;
import org.ddq.common.util.LogerUtil;
import org.ddq.common.util.StringUtil;
import org.ddq.common.web.session.DuoduoSession;
import org.ddq.common.web.session.RequestUtil;
import org.llw.model.cache.RedisUtils;
import org.ddq.zk.service.RemoteInvoke;
import org.springframework.stereotype.Controller;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.xxjr.busi.util.kf.ExportUtil;
import org.xxjr.busi.util.store.StoreUserUtil;
import org.xxjr.cust.util.info.CustInfoUtil;
import org.xxjr.cust.util.info.CustomerIdentify;
import org.xxjr.cust.util.info.CustomerUtil;
import org.xxjr.fx.util.FxCustomerUtil;
import org.xxjr.fx.util.FxProdUtil;
import org.xxjr.log.util.ThreadLogUtil;
import org.xxjr.sys.util.NumberUtil;
import org.xxjr.sys.util.ServiceKey;
import org.xxjr.sys.util.SysParamsUtil;
import org.xxjr.sys.util.ValidUtils;

import com.alibaba.fastjson.JSONObject;

/**
 * 分销系统用户相关
 * @author Administrator
 *
 */
@Controller()
@RequestMapping("/account/fx/fxCust/")
public class FxCustAction {

	
	/**
	 * 查询用户管理列表
	 * @param request
	 * @return
	 */
	@RequestMapping("queryCustManagerList")
	@ResponseBody
	public AppResult queryCustManagerList(HttpServletRequest request) {
		AppResult result = new AppResult();
		try {
			String refererName = request.getParameter("refererName");// 代理人工号/姓名/手机
			String cardNo = request.getParameter("cardNo");// 申请人身份证号
			if(!StringUtils.isEmpty(cardNo) && cardNo.contains("*")){
				cardNo = cardNo.replaceFirst("\\*", "\\%").replaceAll("\\*", "");
			}
			AppParam params = new AppParam();
			RequestUtil.setAttr(params, request);
			params.setService("fxCustIdentifyService");
			params.setMethod("queryViewByPage");
			params.addAttr("cardNo", cardNo);
			String customerId = StoreUserUtil.getCustomerId(request);
			Map<String, Object> custInfo = CustomerIdentify.getCustIdentify(customerId);
			String telephone = StringUtil.getString(custInfo.get("telephone"));
			String fxFullTel = SysParamsUtil.getStringParamByKey("fxQueryFullTelRole", "18277103611");// 指定手机号，查看完整手机的权限
			if(!AppProperties.isDebug() && fxFullTel.contains(telephone)){
				params.addAttr("roleType", "1");
			} else if (AppProperties.isDebug()) {
				params.addAttr("roleType", "1");
			}
			// 根据代理人信息，获取代理人id号
			if (!StringUtils.isEmpty(refererName)) {
				String referer = "0";
				AppParam custParam = new AppParam("fxCustService","newQuery");
				custParam.addAttr("userName", refererName);
				if (refererName.length() == 7 && NumberUtil.isNumber(refererName)) {
					custParam.addAttr("workNo", refererName);
					custParam.removeAttr("userName");
				}
				if (refererName.length() == 11) {
					custParam.addAttr("telephone", refererName);
					custParam.removeAttr("userName");
				}
				custParam.setRmiServiceName(AppProperties
						.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sho));
				AppResult custResult = RemoteInvoke.getInstance().callNoTx(custParam);
				if (custResult.getRows().size() > 0) {
					referer = StringUtil.getString(custResult.getRow(0).get("custId"));
				}
				params.addAttr("referer", referer);
			}
			params.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sho));
			result = RemoteInvoke.getInstance().callNoTx(params);
			int sendMessageCount = SysParamsUtil.getIntParamByKey("fxSendMessageTotalCount", 5000);
			result.putAttr("sendMessageCount", sendMessageCount);
		} catch (Exception e) {
			LogerUtil.error(FxCustAction.class, e, "queryCustManagerList error");
			ExceptionUtil.setExceptionMessage(e, result, DuoduoSession.getShowLog());
		}
		return result;
	}
	
	
	/**
	 * 修改用户基本信息
	 * @param request
	 * @return
	 */
	@RequestMapping("modifyCustInfo")
	@ResponseBody
	public AppResult modifyApplyInfo(HttpServletRequest request) {
		AppResult result = new AppResult();
		try {
			String custId = request.getParameter("custId");
			String fxRealName = request.getParameter("fxRealName");
			String fxCardNo = request.getParameter("fxCardNo");
			if (StringUtils.isEmpty(custId) || StringUtils.isEmpty(fxRealName)
					|| StringUtils.isEmpty(fxCardNo)) {
				result.setSuccess(false);
				result.setMessage("缺少必要参数！");
				return result;
			}
			// 校验身份证号码格式
			fxCardNo = fxCardNo.toUpperCase();
			AppResult validateResult = FxCustomerUtil.validateCardNo(fxCardNo);
			if (!validateResult.isSuccess()) {
				return validateResult;
			}
			String customerId = StoreUserUtil.getCustomerId(request);
			Map<String, Object> custInfo = CustomerIdentify.getCustIdentify(customerId);
			String fxRoleTel = SysParamsUtil.getStringParamByKey("fxModifyApplyInfoRole", "18126382005");
            if(!fxRoleTel.contains(StringUtil.getString(custInfo.get("telephone")))){
            	result.setSuccess(false);
            	result.setMessage("您没有对应的权限！");
            	return result;
            }
			AppParam params = new AppParam();
			params.setService("fxCustIdentifyService");
			params.setMethod("modifyCustInfo");
			params.addAttr("custId", custId);
			params.addAttr("realName", fxRealName);// 姓名
			params.addAttr("cardNo", fxCardNo);// 身份证
			params.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sho));
			result = RemoteInvoke.getInstance().call(params);
		} catch (Exception e) {
			LogerUtil.error(this.getClass(), e, "modifyCustInfo error");
			ExceptionUtil.setExceptionMessage(e, result, DuoduoSession.getShowLog());
		}
		return result;
	}
	
	
	/**
	 * 审核通过
	 * @param request
	 * @return
	 */
	@RequestMapping("custAuditPass")
	@ResponseBody
	public AppResult custAuditPass(HttpServletRequest request) {
		AppResult result = new AppResult();
		String customerId = StoreUserUtil.getCustomerId(request);
		Map<String, Object> custInfo = CustomerIdentify.getCustIdentify(customerId);
		
		String custIds = request.getParameter("custIds");
		if (StringUtils.isEmpty(custIds)) {
			result.setSuccess(false);
			result.setMessage("缺少用户Id");
			return result;
		}
		try {
			AppParam params = new AppParam();
			RequestUtil.setAttr(params, request);
			params.setService("fxCustIdentifyService");
			params.setMethod("custAuditPass");
			params.addAttr("custIds", custIds);
			params.addAttr("auditBy", custInfo.get("realName"));// 审核人
			params.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sho));
			result = RemoteInvoke.getInstance().call(params);
			if (!result.isSuccess()) {
				int errCount = NumberUtil.getInt(result.getAttr("errCount"), 0);
				String msg = "第" + errCount + "条数据操作失败，错误信息：" +  result.getMessage();
				result.setSuccess(false);
				result.setMessage(msg);
				return result;
			}
		} catch (Exception e) {
			LogerUtil.error(FxCustAction.class, e, "custAuditPass error");
			ExceptionUtil.setExceptionMessage(e, result, DuoduoSession.getShowLog());
		}
		return result;
	}
	
	/**
	 * 审核不通过
	 * @param request
	 * @return
	 */
	@RequestMapping("custAuditNoPass")
	@ResponseBody
	public AppResult custAuditNoPass(HttpServletRequest request) {
		AppResult result = new AppResult();
		String customerId = StoreUserUtil.getCustomerId(request);
		Map<String, Object> custInfo = CustomerIdentify.getCustIdentify(customerId);
		
		String custIds = request.getParameter("custIds");
		if (StringUtils.isEmpty(custIds)) {
			result.setSuccess(false);
			result.setMessage("缺少用户Id");
			return result;
		}
		try {
			AppParam params = new AppParam();
			RequestUtil.setAttr(params, request);
			params.setService("fxCustIdentifyService");
			params.setMethod("custAuditNoPass");
			params.addAttr("custIds", custIds);
			params.addAttr("auditBy", custInfo.get("realName"));// 审核人
			params.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sho));
			result = RemoteInvoke.getInstance().call(params);
			if (!result.isSuccess()) {
				int errCount = NumberUtil.getInt(result.getAttr("errCount"), 0);
				String msg = "第" + errCount + "条数据操作失败，错误信息：" +  result.getMessage();
				result.setSuccess(false);
				result.setMessage(msg);
				return result;
			}
		} catch (Exception e) {
			LogerUtil.error(FxCustAction.class, e, "custAuditNoPass error");
			ExceptionUtil.setExceptionMessage(e, result, DuoduoSession.getShowLog());
		}
		return result;
	}
	
	
	/**
	 * 查询用户详情信息
	 * @param request
	 * @return
	 */
	@RequestMapping("queryFxCustDtl")
	@ResponseBody
	public AppResult queryFxCustDtl(HttpServletRequest request) {
		AppResult result = new AppResult();
		try {
			AppParam params = new AppParam();
			String custId = request.getParameter("custId");
			params.setService("fxCustIdentifyService");
			params.setMethod("queryCustDetail");
			params.addAttr("custId", custId);
			params.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sho));
			AppResult queryResult = RemoteInvoke.getInstance().callNoTx(params);
			if (queryResult.getRows().size() > 0) {
				result.putAttr("custInfo", queryResult.getRow(0));
			}
		} catch (Exception e) {
			LogerUtil.error(FxCustAction.class, e, "queryFxCustDtl error");
			ExceptionUtil.setExceptionMessage(e, result, DuoduoSession.getShowLog());
		}
		return result;
	}
	
	
	/**
	 * 修改用户信息
	 * @param request
	 * @return
	 */
	@RequestMapping("updateCustInfo")
	@ResponseBody
	public AppResult updateCustInfo(HttpServletRequest request) {
		AppResult result = new AppResult();
		try {
			String custId = request.getParameter("custId");// 用户id
			String grade = request.getParameter("grade");// 用户等级
			if (StringUtils.isEmpty(custId)) {
				result.setSuccess(false);
				result.setMessage("用户id为空");
				return result;
			}
			AppParam params = new AppParam();
			params.setService("fxCustService");
			params.setMethod("update");
			params.addAttr("custId", custId);
			params.addAttr("grade", grade);
			params.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sho));
			result = RemoteInvoke.getInstance().call(params);
			if (result.isSuccess()) {
				FxCustomerUtil.refreshIdentifyById(custId);
//				Map<String,Object> refererInfo2 = FxCustomerUtil.getCustIdentify(StringUtil.getString(referer2));
//				// 升级记录
//				AppParam upgradeParam = new AppParam("fxUpgradeRecordService", "insert");
//				upgradeParam.addAttr("custId", custId);
//				upgradeParam.addAttr("referer", referer);
//				upgradeParam.addAttr("grade", grade);
//				upgradeParam.addAttr("gradeType", "2");// 批卡
//				upgradeParam.addAttr("remark", remark);
//				SoaManager.getInstance().invoke(upgradeParam);
//				// 用户等级升级通知
//				FxAdminUtil.sendGradeTempMessage(custId, remark);
			}
		} catch (Exception e) {
			LogerUtil.error(FxCustAction.class, e, "updateCustInfo error");
			ExceptionUtil.setExceptionMessage(e, result, DuoduoSession.getShowLog());
		}
		return result;
	}
	
	/**
	 * 查询用户升级记录
	 * @param request
	 * @return
	 */
	@RequestMapping("queryCustUpdateRecord")
	@ResponseBody
	public AppResult queryCustUpdateRecord(HttpServletRequest request) {
		AppResult result = new AppResult();
		try {
			AppParam params = new AppParam();
			RequestUtil.setAttr(params, request);
			params.setService("fxUpgradeRecordService");
			params.setMethod("query");
			params.setOrderBy("createTime");
			params.setOrderValue("DESC");
			params.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sho));
			result = RemoteInvoke.getInstance().callNoTx(params);
		} catch (Exception e) {
			LogerUtil.error(FxCustAction.class, e, "queryCustUpdateRecord error");
			ExceptionUtil.setExceptionMessage(e, result, DuoduoSession.getShowLog());
		}
		return result;
	}
	
	
	/**
	 * 实习专员手动升级处理
	 * @param request
	 * @return
	 */
	@RequestMapping("upgradeHandle")
	@ResponseBody
	public AppResult upgradeHandle(HttpServletRequest request) {
		AppResult result = new AppResult();
		try {
			String custId = request.getParameter("custId");
			if (StringUtils.isEmpty(custId)) {
				result.setSuccess(false);
				result.setMessage("用户custId为空");
				return result;
			}
			String customerId = StoreUserUtil.getCustomerId(request);
			Map<String, Object> custInfo = CustomerIdentify.getCustIdentify(customerId);
			String realName = StringUtil.getString(custInfo.get("realName"));// 操作人
			String telephone = StringUtil.getString(custInfo.get("telephone"));
			String fxRoleTel = SysParamsUtil.getStringParamByKey("fxModifyApplyInfoRole", "18126382005");
            if(!AppProperties.isDebug() && !fxRoleTel.contains(telephone)){
            	result.setSuccess(false);
            	result.setMessage("您没有升级处理的权限！");
            	return result;
            }
			AppParam params = new AppParam();
			params.setService("fxUpgradeRecordService");
			params.setMethod("upgradeHandle");
			params.addAttr("operator", realName);
			params.addAttr("custId", custId);
			params.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sho));
			result = RemoteInvoke.getInstance().call(params);
		} catch (Exception e) {
			LogerUtil.error(this.getClass(), e, "upgradeHandle error");
			ExceptionUtil.setExceptionMessage(e, result, DuoduoSession.getShowLog());
		}
		return result;
	}
	
	
	/**
	 * 佣金补发处理
	 * @param request
	 * @return
	 */
	@RequestMapping("reissueReward")
	@ResponseBody
	public AppResult reissueReward(HttpServletRequest request) {
		AppResult result = new AppResult();
		try {
			String customerId = StoreUserUtil.getCustomerId(request);
			Map<String, Object> custInfo = CustomerIdentify.getCustIdentify(customerId);
			String realName = StringUtil.getString(custInfo.get("realName"));// 操作人
			AppParam params = new AppParam();
			RequestUtil.setAttr(params, request);
			params.setService("fxFundRecordService");
			params.setMethod("reissueReward");
			params.addAttr("operator", realName);
			params.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sho));
			result = RemoteInvoke.getInstance().call(params);
		} catch (Exception e) {
			LogerUtil.error(this.getClass(), e, "reissueReward error");
			ExceptionUtil.setExceptionMessage(e, result, DuoduoSession.getShowLog());
		}
		return result;
	}
	
	
	/**
	 * 刷新用户缓存，海报缓存
	 * @param request
	 * @return
	 */
	@RequestMapping("refreshCustCache")
	@ResponseBody
	public AppResult refreshCustCache(HttpServletRequest request) {
		AppResult result = new AppResult();
		try {
			String custId = request.getParameter("custId");
			if (StringUtils.isEmpty(custId)) {
				result.setSuccess(false);
				result.setMessage("用户id为空");
				return result;
			}
			// 用户缓存刷新
			FxCustomerUtil.refreshIdentifyById(custId);
			// 清除用户海报缓存
			List<Map<String, Object>> posterList = FxProdUtil.getPosterConfigList();
			for (Map<String, Object> row : posterList) {
				String configId = StringUtil.getString(row.get("configId"));
				if (!StringUtils.isEmpty(configId)) {
					RedisUtils.getRedisService().del("fxPosterMediaId" + custId + "_" + configId);
				}
			}
		} catch (Exception e) {
			LogerUtil.error(this.getClass(), e, "refreshCustCache error");
			ExceptionUtil.setExceptionMessage(e, result, DuoduoSession.getShowLog());
		}
		return result;
	}
	
	/**
	 * 发送代理商活跃度消息
	 * @param request
	 * @return
	 */
	@RequestMapping("sendAgentMessage")
	@ResponseBody
	public AppResult sendAgentMessage(HttpServletRequest request) {
		AppResult result = new AppResult();
		try {
			String content = request.getParameter("content");
			if (StringUtils.isEmpty(content)) {
				result.setSuccess(false);
				result.setMessage("标题不能为空");
				return result;
			}
			String proProcess = request.getParameter("proProcess");
			if (StringUtils.isEmpty(proProcess)) {
				result.setSuccess(false);
				result.setMessage("项目进度不能为空");
				return result;
			}
			String projectName = request.getParameter("projectName");
			if (StringUtils.isEmpty(projectName)) {
				result.setSuccess(false);
				result.setMessage("项目名称不能为空");
				return result;
			}
			AppParam params = new AppParam();
			RequestUtil.setAttr(params, request);
			params.setOrderBy(request.getParameter("orderBy"));
			params.setOrderValue(request.getParameter("orderValue"));
			params.setService("fxCustIdentifyService");
			params.setMethod("sendAgentMessage");
			params.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sho));
			ThreadLogUtil.sendMessageNewThread(params);
			
			//记录消息发送日志
			String customerId = StoreUserUtil.getCustomerId(request);
			Map<String, Object> custInfo = CustomerIdentify
					.getCustIdentify(customerId);
			String realName = StringUtil.getString(custInfo.get("realName"));
			AppParam savelogParam = new AppParam("fxMsgSendLogService","insert");
			savelogParam.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sho));
			savelogParam.addAttr("msgCode", "fxCustAgentNotify");
			savelogParam.addAttr("content", JSONObject.toJSONString(params.getAttr()));
			savelogParam.addAttr("operator", realName);
			RemoteInvoke.getInstance().call(savelogParam);
		} catch (Exception e) {
			LogerUtil.error(this.getClass(), e, "sendAgentMessage error");
			ExceptionUtil.setExceptionMessage(e, result, DuoduoSession.getShowLog());
		}
		return result;
	}
	
	/**
	 * 发送活动消息
	 * @param request
	 * @return
	 */
	@RequestMapping("sendActiveMessage")
	@ResponseBody
	public AppResult sendActiveMessage(HttpServletRequest request) {
		AppResult result = new AppResult();
		try {
			String content = request.getParameter("content");
			if (StringUtils.isEmpty(content)) {
				result.setSuccess(false);
				result.setMessage("标题不能为空");
				return result;
			}
			String activeContent = request.getParameter("activeContent");
			if (StringUtils.isEmpty(activeContent)) {
				result.setSuccess(false);
				result.setMessage("活动内容不能为空");
				return result;
			}
			String startTime = request.getParameter("startTime");
			if (StringUtils.isEmpty(startTime)) {
				result.setSuccess(false);
				result.setMessage("开始时间不能为空");
				return result;
			}
			AppParam params = new AppParam();
			RequestUtil.setAttr(params, request);
			params.setOrderBy(request.getParameter("orderBy"));
			params.setOrderValue(request.getParameter("orderValue"));
			params.setService("fxCustIdentifyService");
			params.setMethod("sendActiveMessage");
			params.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sho));
			ThreadLogUtil.sendMessageNewThread(params);
			
			// 操作记录 
			String customerId = StoreUserUtil.getCustomerId(request);
			Map<String, Object> custInfo = CustomerIdentify.getCustIdentify(customerId);
			String realName = StringUtil.getString(custInfo.get("realName"));
			AppParam savelogParam = new AppParam("fxMsgSendLogService","insert");
			savelogParam.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sho));
			savelogParam.addAttr("msgCode", "sendFxWxNotifyFlag");
			savelogParam.addAttr("content", JSONObject.toJSONString(params.getAttr()));
			savelogParam.addAttr("operator", realName);
			RemoteInvoke.getInstance().call(savelogParam);
		} catch (Exception e) {
			LogerUtil.error(this.getClass(), e, "sendActiveMessage error");
			ExceptionUtil.setExceptionMessage(e, result, DuoduoSession.getShowLog());
		}
		return result;
	}
	
	/**
	 * 发送服务通知消息
	 * @param request
	 * @return
	 */
	@RequestMapping("sendNotifyMessage")
	@ResponseBody
	public AppResult sendNotifyMessage(HttpServletRequest request) {
		AppResult result = new AppResult();
		try {
			String content = request.getParameter("content");
			if (StringUtils.isEmpty(content)) {
				result.setSuccess(false);
				result.setMessage("内容不能为空");
				return result;
			}
			String notifyContent = request.getParameter("notifyContent");
			if (StringUtils.isEmpty(notifyContent)) {
				result.setSuccess(false);
				result.setMessage("通知内容不能为空");
				return result;
			}
			String contactPhone = request.getParameter("contactPhone");
			if (StringUtils.isEmpty(contactPhone)) {
				result.setSuccess(false);
				result.setMessage("联系电话不能为空");
				return result;
			}
			AppParam params = new AppParam();
			RequestUtil.setAttr(params, request);
			params.setOrderBy(request.getParameter("orderBy"));
			params.setOrderValue(request.getParameter("orderValue"));
			params.setService("fxCustIdentifyService");
			params.setMethod("sendNotifyMessage");
			params.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sho));
			ThreadLogUtil.sendMessageNewThread(params);
		} catch (Exception e) {
			LogerUtil.error(this.getClass(), e, "sendNotifyMessage error");
			ExceptionUtil.setExceptionMessage(e, result, DuoduoSession.getShowLog());
		}
		return result;
	}
	
	/**
	 * 团队成员数据导入
	 * @param request
	 * @return
	 */
	@RequestMapping("teamCustImport")
	@ResponseBody
	public AppResult teamCustImport(MultipartHttpServletRequest request) {
		AppResult result = new AppResult();
		String[] keys = {"telephone","userName","cardNo"};//每列的key
		try {
			// 根据用户信息判断是否有导入权限
			//团队管理人手机号码
			String teamManagerTel = request.getParameter("teamManagerTel");
			if(StringUtils.isEmpty(teamManagerTel)){
				result.setSuccess(false);
				result.setMessage("请填写团队管理人手机号码");
				return result;
			}
			// 验证手机号 
			if(!ValidUtils.validateTelephone(teamManagerTel)){
				return CustomerUtil.retErrorMsg("请输入正确的手机号码");
			}
			String customerId = StoreUserUtil.getCustomerId(request);
			Map<String, Object> custInfo = CustomerIdentify.getCustIdentify(customerId);
			String fxTeamCustImportRole = SysParamsUtil.getStringParamByKey("fxTeamCustImportRole", "1,13");// 分销反馈数据导入权限
			if(!CustInfoUtil.isFxFullInfoRole(custInfo, fxTeamCustImportRole)){
				result.setMessage("抱歉，您没有导入团队成员数据的权限！");
				result.setSuccess(false);
				return result;
			}
			List<Map<String,Object>> dataList = ExportUtil.readExcel(keys,request);
			if(dataList == null || dataList.size() == 0){
				result.setSuccess(false);
				result.setMessage("导入数据为空,请重新导入");
				return result;
			}
			int importMaxRecords = SysParamsUtil.getIntParamByKey("fxTeamCustImportMaxRecords", 1000);
			if(dataList.size() > importMaxRecords){
				result.setSuccess(false);
				result.setMessage("数据已超过"+importMaxRecords+"条，请分批导入！");
				return result;
			}
			for(Map<String,Object> row : dataList){
				String telephone = StringUtil.getString(row.get("telephone"));// 手机号码
				String userName = StringUtil.getString(row.get("userName"));// 用户名
				if (StringUtils.isEmpty(telephone)
						|| StringUtils.isEmpty(userName)){
					throw new SysException("申请人姓名、手机号码不能为空！");
				}
			}
			AppParam params = new AppParam();
			params.setService("fxCustService");
			params.addAttr("telephone", teamManagerTel);
			params.addAttr("dataList", dataList);// 导入数据
			params.setMethod("importTeamCustData");
			params.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START
							+ ServiceKey.Key_sho));
			result = RemoteInvoke.getInstance().call(params);
			if (!result.isSuccess()) {
				int errCount = NumberUtil.getInt(result.getAttr("errCount"), 0);
				String msg = "第" + errCount + "行数据导入失败，错误信息：" +  result.getMessage();
				result.setSuccess(false);
				result.setMessage(msg);
				return result;
			}
		} catch (Exception e) {
			LogerUtil.error(this.getClass(), e, "teamCustImport error");
			ExceptionUtil.setExceptionMessage(e, result, DuoduoSession.getShowLog());
		}
		return result;
	}
	
	
	/**
	 * 后台手动发放奖励
	 * @param request
	 * @return
	 */
	@RequestMapping("sendReward")
	@ResponseBody
	public AppResult sendReward(HttpServletRequest request) {
		AppResult result = new AppResult();
		try {
			String custId = request.getParameter("custId");
			String rewardType = request.getParameter("rewardType");// 提成类型：0-管理修改
			String fundType = request.getParameter("fundType");// 资金类型：福利-welfare 工资salary
			String sendRewardAmt = request.getParameter("sendRewardAmt");// 发放金额
			if (StringUtils.isEmpty(custId) || StringUtils.isEmpty(rewardType)
					|| StringUtils.isEmpty(fundType) || StringUtils.isEmpty(sendRewardAmt)) {
				result.setSuccess(false);
				result.setMessage("缺少必要参数！");
				return result;
			}
		 
			String customerId = StoreUserUtil.getCustomerId(request);
			Map<String, Object> custInfo = CustomerIdentify.getCustIdentify(customerId);
			String fxRoleTel = SysParamsUtil.getStringParamByKey("fxCustSendRewardRole", "18617181791");
            if(!fxRoleTel.contains(StringUtil.getString(custInfo.get("telephone")))){
            	result.setSuccess(false);
            	result.setMessage("您没有奖励发放权限！");
            	return result;
            }
			AppParam params = new AppParam();
			params.setService("fxFundRecordService");
			params.setMethod("sendReward");
			params.addAttr("custId", custId);
			params.addAttr("rewardType", rewardType);
			params.addAttr("fundType", fundType);
			params.addAttr("sendRewardAmt", sendRewardAmt);
			params.addAttr("operator", custInfo.get("realName"));// 操作人
			params.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sho));
			result = RemoteInvoke.getInstance().call(params);
		} catch (Exception e) {
			LogerUtil.error(this.getClass(), e, "sendReward error");
			ExceptionUtil.setExceptionMessage(e, result, DuoduoSession.getShowLog());
		}
		return result;
	}
	
	/**
	 * 后台手动修改上下级关系
	 * @param request
	 * @return
	 */
	@RequestMapping("modifyRelation")
	@ResponseBody
	public AppResult modifyRelation(HttpServletRequest request) {
		AppResult result = new AppResult();
		try {
			String custId = request.getParameter("custId");// 修改用户的ID
			String upWorkNo = request.getParameter("upWorkNo");// 上级工号
			if (StringUtils.isEmpty(custId) || StringUtils.isEmpty(upWorkNo)) {
				result.setSuccess(false);
				result.setMessage("缺少必要参数！");
				return result;
			}
		 
			String customerId = StoreUserUtil.getCustomerId(request);
			Map<String, Object> custInfo = CustomerIdentify.getCustIdentify(customerId);
			String telephone = StringUtil.getString(custInfo.get("telephone"));
			String fxRoleTel = SysParamsUtil.getStringParamByKey("fxModifyApplyInfoRole", "18126382005");
            if(!AppProperties.isDebug() && !fxRoleTel.contains(telephone)){
            	result.setSuccess(false);
            	result.setMessage("您没有修改权限！");
            	return result;
            }
			AppParam params = new AppParam();
			params.setService("fxCustIdentifyService");
			params.setMethod("modifyRelation");
			params.addAttr("custId", custId);
			params.addAttr("upWorkNo", upWorkNo);
			params.addAttr("operator", custInfo.get("realName"));
			params.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sho));
			result = RemoteInvoke.getInstance().call(params);
		} catch (Exception e) {
			LogerUtil.error(this.getClass(), e, "modifyRelation error");
			ExceptionUtil.setExceptionMessage(e, result, DuoduoSession.getShowLog());
		}
		return result;
	}
	
	
	/**
	 * 后台手动锁定用户
	 * @param request
	 * @return
	 */
	@RequestMapping("lockFxCust")
	@ResponseBody
	public AppResult lockFxCust(HttpServletRequest request) {
		AppResult result = new AppResult();
		try {
			String custId = request.getParameter("custId");
			if (StringUtils.isEmpty(custId)) {
				result.setSuccess(false);
				result.setMessage("缺少必要参数！");
				return result;
			}
			String customerId = StoreUserUtil.getCustomerId(request);
			Map<String, Object> custInfo = CustomerIdentify.getCustIdentify(customerId);
			String fxRoleTel = SysParamsUtil.getStringParamByKey("fxCustSendRewardRole", "18617181791");
            if(!fxRoleTel.contains(StringUtil.getString(custInfo.get("telephone")))){
            	result.setSuccess(false);
            	result.setMessage("您没有锁定权限！");
            	return result;
            }
			AppParam params = new AppParam();
			params.setService("fxCustIdentifyService");
			params.setMethod("lockFxCust");
			params.addAttr("custId", custId);
			params.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sho));
			result = RemoteInvoke.getInstance().call(params);
		} catch (Exception e) {
			LogerUtil.error(this.getClass(), e, "lockFxCust error");
			ExceptionUtil.setExceptionMessage(e, result, DuoduoSession.getShowLog());
		}
		return result;
	}
	
	
	/**
	 * 发送小小攒钱App通知消息
	 * @param request
	 * @return
	 */
	@RequestMapping("sendAppMessage")
	@ResponseBody
	public AppResult sendAppMessage(HttpServletRequest request) {
		AppResult result = new AppResult();
		try {
			String content = request.getParameter("content");
			if (StringUtils.isEmpty(content)) {
				result.setSuccess(false);
				result.setMessage("内容不能为空");
				return result;
			}
			String title = request.getParameter("title");
			if (StringUtils.isEmpty(title)) {
				result.setSuccess(false);
				result.setMessage("标题不能为空");
				return result;
			}
			
			AppParam params = new AppParam();
			RequestUtil.setAttr(params, request);
			params.setOrderBy(request.getParameter("orderBy"));
			params.setOrderValue(request.getParameter("orderValue"));
			params.setService("fxCustIdentifyService");
			params.setMethod("sendAppMessage");
			params.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sho));
			ThreadLogUtil.sendMessageNewThread(params);
		} catch (Exception e) {
			LogerUtil.error(this.getClass(), e, "sendAppMessage error");
			ExceptionUtil.setExceptionMessage(e, result, DuoduoSession.getShowLog());
		}
		return result;
	}
	
}
