package org.xxjr.cust.invite;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.Map;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppResult;
import org.ddq.common.core.service.BaseService;
import org.ddq.common.core.service.SoaManager;
import org.ddq.common.exception.AppException;
import org.ddq.common.exception.DuoduoError;
import org.ddq.common.exception.SysException;
import org.ddq.common.util.StringUtil;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

@Lazy
@Service
public class CustWxTicketService extends BaseService {
	private static final String NAMESPACE = "CUSTWXTICKET";

	/**
	 * querys
	 * @param params
	 * @return
	 */
	public AppResult query(AppParam params) {
		return super.query(params, NAMESPACE);
	}
	
	/**
	 * queryByPage
	 * @param params
	 * @return
	 */
	public AppResult queryByPage(AppParam params) {
		return super.queryByPage(params, NAMESPACE);
	}
	
	/**
	 * queryCount
	 * @param params
	 * @return
	 */
	public AppResult queryCount(AppParam params) {
		int size = getDao().count(NAMESPACE, super.COUNT,params.getAttr(),params.getDataBase());
		AppResult result = new AppResult();
		result.putAttr(DuoduoConstant.TOTAL_SIZE, size);
		return result;
	}
	
	
	/**
	 * insert
	 * @param params
	 * @return
	 */
	public AppResult insert(AppParam params) {
		params.addAttr("createTime", new Date());
		return super.insert(params, NAMESPACE);
	}
	
	/**
	 * update
	 * @param params
	 * @return
	 */
	public AppResult update(AppParam params) {
		params.addAttr("updateTime", new Date());
		return super.update(params, NAMESPACE);
	}
	
	/**
	 * 关注小小攒钱，判断是否信贷经理邀请
	 * @param params
	 * @return
	 */
	public AppResult bindSubscriber(AppParam params) {
		Object ticket = params.getAttr("ticket");
		Object gzhId = params.getAttr("gzhId");
		if(StringUtils.isEmpty(ticket) || StringUtils.isEmpty(gzhId)){
			throw new SysException("绑定关注粉丝信息缺少参数ticket或gzhId");
		}
		
		AppParam queryParam = new AppParam();
		queryParam.addAttr("ticket", ticket);
		queryParam.addAttr("gzhId", gzhId);
		AppResult queryResult = this.query(queryParam);
		if(queryResult.getRows().size() > 0){
			Map<String,Object> row = queryResult.getRow(0);
			// 维护新关注者信息
			AppParam addParam = new AppParam("custWxFansService", "insert");
			addParam.addAttr("customerId", row.get("customerId"));
			addParam.addAttr("gzhId", gzhId);
			addParam.addAttr("openid", params.getAttr("openid"));
			addParam.addAttr("unionid", params.getAttr("unionid"));
			addParam.addAttr("nickName", params.getAttr("nickName"));
			addParam.addAttr("headImg", params.getAttr("headImg"));
			SoaManager.getInstance().invoke(addParam);
		}
		return new AppResult();
	}
	
	/**
	 * 查询客户临时二维码，如果过期，返回标志
	 * @param params
	 * @return
	 */
	public AppResult queryQrcodeTicket(AppParam params) {
		Object customerId = params.getAttr("customerId");
		Object gzhId = params.getAttr("gzhId");
		if(StringUtils.isEmpty(customerId) || StringUtils.isEmpty(gzhId)){
			throw new SysException("查询二维码信息缺少参数customerId或gzhId");
		}
		AppResult result = new AppResult();
		AppParam queryParam = new AppParam();
		queryParam.addAttr("customerId", customerId);
		queryParam.addAttr("gzhId", gzhId);
		AppResult queryResult = this.query(queryParam);
		if(queryResult.getRows().size() > 0){
			Map<String,Object> custTicketInfo = queryResult.getRow(0);
			// 判断二维码是否过期，如果过期了不返回ticket
			int deadLine = Integer.valueOf(custTicketInfo.get("deadLine").toString());
			String dateTimeStr = !StringUtils.isEmpty(custTicketInfo.get("updateTime"))
					? StringUtil.getString(custTicketInfo.get("updateTime"))
							: StringUtil.getString(custTicketInfo.get("createTime")) ;
			LocalDateTime now = LocalDateTime.now();
			DateTimeFormatter df = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
			LocalDateTime ldt = LocalDateTime.parse(dateTimeStr, df);
			if(now.isBefore(ldt.plusDays(deadLine))){
				result.putAttr("ticket", custTicketInfo.get("ticket"));
			}
		}
		return result;
	}
	
	/**
	 * 维护用户ticket，增加 或者 更新ticket（ticket失效）
	 * @param params
	 * @return
	 */
	public AppResult saveQrcodeTicket(AppParam params) {
		Object customerId = params.getAttr("customerId");
		Object ticket = params.getAttr("ticket");
		Object gzhId = params.getAttr("gzhId");
		if(StringUtils.isEmpty(ticket) 
				 || StringUtils.isEmpty(gzhId)
				 || StringUtils.isEmpty(customerId)){
			throw new SysException("维护用户ticket信息缺少参数ticket或gzhId");
		}
		Integer deadLine = Integer.valueOf(params.getAttr("deadLine").toString());
		AppParam queryParam = new AppParam();
		queryParam.addAttr("customerId", customerId);
		queryParam.addAttr("gzhId", gzhId);
		AppResult queryResult = this.query(queryParam);
		if(queryResult.getRows().size() > 0){
			// 修改
			Map<String,Object> row = queryResult.getRow(0);
			AppParam updateParam = new AppParam();
			updateParam.addAttr("ticket", ticket);
			updateParam.addAttr("deadLine", deadLine - 1);
			updateParam.addAttr("tid", row.get("tid"));
			this.update(updateParam);
		}else{
			// 增加
			AppParam addParam = new AppParam();
			addParam.addAttr("ticket", ticket);
			addParam.addAttr("gzhId", gzhId);
			addParam.addAttr("customerId", customerId);
			addParam.addAttr("deadLine", deadLine - 1);
			this.insert(addParam);
		}
		return new AppResult();
	}
	
	/**
	 * delete
	 * @param params
	 * @return
	 */
	public AppResult delete(AppParam params) {
		String ids = (String) params.getAttr("ids");
		AppResult  result = null;
		if (!StringUtils.isEmpty(ids)) {
			for (String id : ids.split(",")) {
				AppParam param = new AppParam();
				param.addAttr("tid", id);
				
				result = super.delete(param, NAMESPACE);
			}
		} else if (!StringUtils.isEmpty(params.getAttr("tid"))) {
			result = super.delete(params, NAMESPACE);
		} else {
			throw new AppException(DuoduoError.DELETE_NO_ID);
		}
		return result;
	}
}
