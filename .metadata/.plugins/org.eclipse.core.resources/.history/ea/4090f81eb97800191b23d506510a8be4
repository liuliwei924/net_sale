package org.xxjr.busi.kf;

import java.util.Date;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppResult;
import org.ddq.common.core.service.BaseService;
import org.ddq.common.core.service.SoaManager;
import org.ddq.common.exception.AppException;
import org.ddq.common.exception.DuoduoError;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import org.xxjr.busi.util.BorrowConstant;
import org.xxjr.sys.util.NumberUtil;
import org.xxjr.sys.util.SysParamsUtil;

@Lazy
@Service
public class KfOldDataService extends BaseService {
	private static final String NAMESPACE = "KFOLDDATA";

	/**
	 * querys
	 * @param params
	 * @return
	 */
	public AppResult query(AppParam params) {
		return super.query(params, NAMESPACE);
	}
	
	/**
	 * queryByPage
	 * @param params
	 * @return
	 */
	public AppResult queryByPage(AppParam params) {
		return super.queryByPage(params, NAMESPACE);
	}
	
	/**
	 * queryShow
	 * @param params
	 * @return
	 */
	public AppResult queryShow(AppParam params) {
		return super.queryByPage(params, NAMESPACE,"queryShow","queryShowCount");
	}
	
	/**
	 * queryGradeCount
	 * @param params
	 * @return
	 */
	public AppResult queryGradeCount(AppParam params) {
		return super.query(params, NAMESPACE, "queryGradeCount");
	}
	/**
	 * queryCount
	 * @param params
	 * @return
	 */
	public AppResult queryCount(AppParam params) {
		int size = getDao().count(NAMESPACE, super.COUNT,params.getAttr(),params.getDataBase());
		AppResult result = new AppResult();
		result.putAttr(DuoduoConstant.TOTAL_SIZE, size);
		return result;
	}
	
	
	/**
	 * insert
	 * @param params
	 * @return
	 */
	public AppResult insert(AppParam params) {
		params.addAttr("createTime", new Date());
		return super.insert(params, NAMESPACE);
	}
	
	/**
	 * update
	 * @param params
	 * @return
	 */
	public AppResult update(AppParam params) {
		params.addAttr("updateTime", new Date());
		return super.update(params, NAMESPACE);
	}
	
	/**
	 * delete
	 * @param params
	 * @return
	 */
	public AppResult delete(AppParam params) {
		String ids = (String) params.getAttr("ids");
		AppResult  result = null;
		if (!StringUtils.isEmpty(ids)) {
			for (String id : ids.split(",")) {
				AppParam param = new AppParam();
				param.addAttr("applyId", id);
				
				result = super.delete(param, NAMESPACE);
			}
		} else if (!StringUtils.isEmpty(params.getAttr("applyId"))) {
			result = super.delete(params, NAMESPACE);
		} else {
			throw new AppException(DuoduoError.DELETE_NO_ID);
		}
		return result;
	}
	
	/**
	 * 回流单锁定
	 * @param params
	 * @return
	 */
	public AppResult kfLockOldOrder (AppParam params) {
		AppResult result = new AppResult();
		
		Object applyId = params.getAttr("applyId");
		Object customerId = params.getAttr("customerId");
		if(StringUtils.isEmpty(applyId) || StringUtils.isEmpty(customerId)){
			result.setSuccess(false);
			result.setMessage("缺少参数!");
			return result;
		}

		AppParam queryParam = new AppParam();//判断一个小时以内的客服抢单数量
		queryParam.addAttr("startTime", params.getAttr("startTime"));
		queryParam.addAttr("endTime", params.getAttr("endTime"));
		queryParam.addAttr("kfCustId", customerId);
		queryParam.addAttr("handleStatus", 0);
		AppResult queryResult = this.queryCount(queryParam);
		int count = NumberUtil.getInt(queryResult.getAttr(DuoduoConstant.TOTAL_SIZE), 0);
		int maxCount = SysParamsUtil.getIntParamByKey("maxKfOldDataCount", 50);
		if (count >= maxCount) {
			result.setSuccess(false);
			result.setMessage("你的每小时抢单数已达上限！");
			return result;
		}
		
		queryParam = new AppParam();//是否被客服抢了
		queryParam.addAttr("applyId", applyId);
		queryResult = this.queryCount(queryParam);
		
		if(NumberUtil.getInt(queryResult.getAttr(DuoduoConstant.TOTAL_SIZE), 0) > 0){
			result.setSuccess(false);
			result.setMessage("已被人锁定！");
			return result;
		}
		
		queryParam = new AppParam("borrowApplyService","queryCount");//判断是否已挂卖
		queryParam.addAttr("applyId", applyId);
		queryParam.addAttr("status", BorrowConstant.apply_status_4);
		queryResult = SoaManager.getInstance().invoke(queryParam);
		
		if(NumberUtil.getInt(queryResult.getAttr(DuoduoConstant.TOTAL_SIZE), 0) == 0){
			result.setSuccess(false);
			result.setMessage("手慢了，该单已经挂卖了或已在处理中了");
			return result;
		}
		
		AppParam updateParam = new AppParam();
		updateParam.addAttr("applyId", applyId);
		updateParam.addAttr("kfCustId", customerId);
		updateParam.addAttr("handleStatus", 0);
		
		result = this.insert(updateParam);
		
		if(result.isSuccess()){
			
			AppParam recordParam = new AppParam();
			recordParam.setService("borrowKfRecordService");
			recordParam.setMethod("insert");
			recordParam.addAttr("applyId", applyId);
			recordParam.addAttr("kf", customerId);
			recordParam.addAttr("handleDesc", "回流单锁定");
			recordParam.addAttr("handleType", BorrowConstant.KEFU_OPER_1);
			SoaManager.getInstance().invoke(recordParam);
		}
		
		return result;
	}
	
	
	/**
	 * 回流单客服继续跟进
	 * @param params
	 * @return
	 */
	public AppResult continueFollow(AppParam params) {
		Object applyId = params.getAttr("applyId");
		Object customerId = params.getAttr("customerId");
		if(StringUtils.isEmpty(applyId) || StringUtils.isEmpty(customerId)){
			throw new AppException(DuoduoError.UPDATE_NO_PARAMS);
		}
		
		// 更新
		AppParam updateParam = new AppParam();
		updateParam.addAttr("applyId", applyId);
		updateParam.addAttr("handleStatus", 1);
		updateParam.addAttr("lastKfDesc", params.getAttr("handleDesc"));
		AppResult result = this.update(updateParam);
		int size = NumberUtil.getInt(result.getAttr(DuoduoConstant.DAO_Update_SIZE), 0);
		if(1 == size){
			// 客服插入跟进记录（继续跟进）
			AppParam recordParam = new AppParam();
			recordParam.setService("borrowKfRecordService");
			recordParam.setMethod("insert");
			recordParam.addAttr("applyId", applyId);
			recordParam.addAttr("handleDesc","回流单处理：" + params.getAttr("handleDesc"));
			recordParam.addAttr("kf", customerId);
			recordParam.addAttr("handleType", BorrowConstant.KEFU_OPER_7);
			SoaManager.getInstance().invoke(recordParam);
		}
		return new AppResult();
	}
	
	/**
	 * 客服转门店处理 只有客服可以操作
	 * 转门店，状态为待处理
	 * 转门店人员，状态为门店锁定中
	 * @param params
	 * @return
	 */
	public AppResult transferStore(AppParam params) {
		
		params.setService("kfBusiOptExtService");
		params.setMethod("transferStore");
		
		AppResult result = SoaManager.getInstance().invoke(params);
		
		if(result.isSuccess()){
			//更新处理信息
			AppParam updateParam = new AppParam();
			updateParam.addAttr("applyId", params.getAttr("applyId"));
			updateParam.addAttr("handleStatus", 2);
			updateParam.addAttr("lastKfDesc", params.getAttr("handleDesc"));
			this.update(updateParam);
		}
		return result;	
	}
	
	
	/**
	 * 去挂卖 只有客服可以操作
	 * @param params
	 * @return
	 */
	public AppResult transferSale(AppParam params) {
		
		params.setService("kfBusiOptExtService");
		params.setMethod("transferSale");
		
		AppResult result = SoaManager.getInstance().invoke(params);
		
		if(result.isSuccess()){
			//更新处理信息
			AppParam saveParam = new AppParam();
			saveParam.addAttr("applyId", params.getAttr("applyId"));
			saveParam.addAttr("handleStatus", 4);
			saveParam.addAttr("lastKfDesc", params.getAttr("handleDesc"));
			this.update(saveParam);
		}
		return result;	
	}
	
	
	/**
	 * 转优质客户 只有客服可以操作
	 * @param params
	 * @return
	 */
	public AppResult transferSeniorCust(AppParam params) {
		
		params.setService("kfBusiOptExtService");
		params.setMethod("transferSeniorCust");
		
		AppResult result = SoaManager.getInstance().invoke(params);
		
		if(result.isSuccess()){
			//更新处理信息
			AppParam saveParam = new AppParam();
			saveParam.addAttr("applyId", params.getAttr("applyId"));
			saveParam.addAttr("handleStatus", 6);
			saveParam.addAttr("lastKfDesc", params.getAttr("handleDesc"));
			this.update(saveParam);
		}
		return result;	
	}
	
	/**
	 * 转垃圾单 只有客服可以操作
	 * @param params
	 * @return
	 */
	public AppResult transferRubbish(AppParam params) {
		
		params.setService("kfBusiOptExtService");
		params.setMethod("transferRubbish");
		
		AppResult result = SoaManager.getInstance().invoke(params);
		
		if(result.isSuccess()){
			//更新处理信息
			AppParam saveParam = new AppParam();
			saveParam.addAttr("applyId", params.getAttr("applyId"));
			saveParam.addAttr("handleStatus", 3);
			saveParam.addAttr("lastKfDesc", params.getAttr("handleDesc"));
			this.update(saveParam);
		}
		return result;	
		
	}
	
	/**
	 * 客服转换其他小贷（转换成功）
	 * @param params
	 * @return
	 */
	public AppResult transferSuccess(AppParam params) {
		
		params.setService("kfBusiOptExtService");
		params.setMethod("transferSuccess");
		
		AppResult result = SoaManager.getInstance().invoke(params);
		
		if(result.isSuccess()){
			//更新处理信息
			AppParam saveParam = new AppParam();
			saveParam.addAttr("applyId", params.getAttr("applyId"));
			saveParam.addAttr("handleStatus", 5);
			saveParam.addAttr("lastKfDesc", params.getAttr("handleDesc"));
			this.update(saveParam);
		}
		return result;	
		
	}
	
	
	/**
	 * 批量转客服
	 * @param params
	 * @return
	 */
	public AppResult batchTransferKefu(AppParam params) {
		
		Object applyIds = params.getAttr("applyIds");
		Object customerId = params.getAttr("customerId");
		Object lastKf = params.getAttr("lastKf");
		if(StringUtils.isEmpty(applyIds) || StringUtils.isEmpty(lastKf)
				 || StringUtils.isEmpty(customerId)){
			throw new AppException(DuoduoError.UPDATE_NO_PARAMS);
		}
		
		String[] applyIdArray = applyIds.toString().split(",");
		
		for(String applyId : applyIdArray){
			// 更新
			AppParam updateParam = new AppParam();
			updateParam.addAttr("kfCustId", lastKf);
			updateParam.addAttr("applyId", applyId);
			updateParam.addAttr("lastKfDesc", "批量转客服 ：" + customerId + "TO --" + lastKf);
			AppResult result = this.update(updateParam);
			int size = NumberUtil.getInt(result.getAttr(DuoduoConstant.DAO_Update_SIZE), 0);
			if(1 == size){
				// 客服插入跟进记录
				AppParam recordParam = new AppParam();
				recordParam.setService("borrowKfRecordService");
				recordParam.setMethod("insert");
				recordParam.addAttr("applyId", applyId);
				recordParam.addAttr("handleDesc","回流单处理：" + params.getAttr("handleDesc"));
				recordParam.addAttr("kf", customerId);
				recordParam.addAttr("handleType", BorrowConstant.KEFU_OPER_3);
				SoaManager.getInstance().invoke(recordParam);
			}
		}
		
		return new AppResult();
		
	}
	
}
