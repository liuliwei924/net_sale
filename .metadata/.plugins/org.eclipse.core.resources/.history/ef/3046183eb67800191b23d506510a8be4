package org.xxjr.cust.util.auth;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import net.coobird.thumbnailator.Thumbnails;
import net.sf.json.JSONObject;

import org.ddq.common.context.AppProperties;
import org.ddq.common.util.LogerUtil;
import org.xxjr.cust.util.auth.rsa.RsaCodingUtil;
import org.xxjr.cust.util.auth.util.HttpUtils;
import org.xxjr.cust.util.auth.util.JXMConvertUtil;
import org.xxjr.cust.util.auth.util.SecurityUtil;

/**
 * 新颜人脸智能核验认证工具类
 * 
 * @author chencx
 *
 */
public class PhotoAuthUtil {

	/**
	 * 获取高清照身份信息认证
	 * 
	 * @param id_card
	 *            身份证号
	 * @param id_holder
	 *            身份证姓名
	 * @param tempFile
	 *            照片url路径
	 * @return
	 * @throws UnsupportedEncodingException
	 */
	public static Map<String, Object> getPhotoAuth(String id_card,
			String id_holder, File  tempFile)
			throws UnsupportedEncodingException {

		LogerUtil.log("=====输入的信息为：身份证(id_card):" + id_card + ",姓名(id_holder):"
				+ id_holder);

		Map<String, String> pictureMap = new HashMap<String, String>();
		processUploadFile(tempFile, pictureMap);

		// 以下为调用接口处理流程
		String photo = pictureMap.get("photo");
		/** 1、 商户号 **/
		String member_id = AppProperties.getProperties("member.id");
		/** 2、终端号 **/
		String terminal_id = AppProperties.getProperties("terminal.id");
		/** 3、商户订单号 **/
		String trans_id = "" + System.currentTimeMillis();
		/** 4.订单日期 **/
		String trade_date = new SimpleDateFormat("yyyyMMddHHmmss")
				.format(new Date());
		/** 组装参数 (6) **/
		Map<Object, Object> ArrayData = new HashMap<Object, Object>();
		ArrayData.put("member_id", member_id);
		ArrayData.put("terminal_id", terminal_id);
		ArrayData.put("trans_id", trans_id);
		ArrayData.put("trade_date", trade_date);
		ArrayData.put("id_card", id_card);
		ArrayData.put("id_holder", id_holder);
		ArrayData.put("le_type", "1");

		JSONObject jsonObjectFromMap = JSONObject.fromObject(ArrayData);
		String jsonString = jsonObjectFromMap.toString();
		LogerUtil.log("====请求明文:" + jsonString);

		/** base64 编码 **/
		String base64str = SecurityUtil.Base64Encode(jsonString);
		LogerUtil.log("====base64编码:" + base64str);

		/** rsa加密 **/
		String pfxPath = AppProperties.getProperties("pfx.path");// 商户私钥
		
		String pfxPwd = AppProperties.getProperties("pfx.pwd");// 私钥密码

		String data_content = RsaCodingUtil.encryptByPriPfxFile(base64str,
				pfxPath, pfxPwd);// 加密数据
		LogerUtil.log("====加密串:" + data_content);

		/** ============== http 请求==================== **/
		String request_url = AppProperties.getProperties("photoAuthUrl");
		Map<String, Object> HeadPostParam = new HashMap<String, Object>();
		HeadPostParam.put("member_id", member_id);
		HeadPostParam.put("terminal_id", terminal_id);
		HeadPostParam.put("data_type", "json");
		HeadPostParam.put("data_content", data_content);
		HeadPostParam.put("photo", photo);
		long startTime = System.currentTimeMillis();
		LogerUtil.log("开始时间：" + startTime);
		LogerUtil.log("请求地址：" + request_url);
		String PostString = HttpUtils.doPost(request_url, new HashMap<>(),
				HeadPostParam);
		long endTime = System.currentTimeMillis();
		LogerUtil.log("结束时间：" + endTime);
		LogerUtil.log("消耗时间：" + (endTime - startTime));
		LogerUtil.log("请求返回：" + PostString);

		JSONObject jasonObject = JSONObject.fromObject(PostString);

		/**
		 * code:0：亲，认证成功（收费）,1：亲，认证信息不一致（收费）,3：亲，认证失败（不收费）,9：亲，其他异常（不收费）
		 * desc:认证结果描述 trans_id:商户订单号 trade_no:交易流水号 fee:是否收费(Y:收费;N:不不收费)
		 * score:分数 errorCode:错误码 errorMsg:错误信息
		 * 
		 */
		Map<String, Object> resultMap = new HashMap<String, Object>();
		resultMap = JXMConvertUtil.JsonConvertHashMap(jasonObject);
		LogerUtil.log(resultMap);
		return resultMap;

	}

	/**
	 * 如果目录不存在 ，则创建
	 * 
	 * @param file
	 */
	public static void makeDirectory(String filestr) {
		File file = new File(filestr);
		if (!file.exists() && !file.isDirectory()) {
			LogerUtil.log(file + "不存在,开始创建");
			file.mkdirs();
		}

	}

	// 处理上传的文件
	private static void processUploadFile(File tempFile,
			Map<String, String> map) {
		if(tempFile.exists()){
			CompressPictures(tempFile);
			map.put("photo", GetPicturesStr(tempFile));
		}
		else{
			LogerUtil.log("文件不存在");
		}
	}

	/**
	 * 压缩文件 商户可以自己找到优秀的压缩算法来压缩照片 这里只是演示
	 * 
	 * @param uploadFile
	 * @return
	 */
	public static File CompressPictures(File uploadFile) {
		String pictureBase64sStr = GetPicturesStr(uploadFile);
		int valueL = pictureBase64sStr.length();
		if (valueL > 60 * 1024) {
			LogerUtil.log("文件太大，开始压缩 大小:" + valueL);
			try {
				Thumbnails.of(uploadFile).scale(0.90f).toFile(uploadFile);
			} catch (IOException e) {
				e.printStackTrace();
			}
			return CompressPictures(uploadFile);
		} else {
			LogerUtil.log("文件处理完毕 大小:" + valueL);
			return null;
		}

	}

	/**
	 * 图片转化成base64字符串 将图片文 件转化为字节数组字符串，并对其进行Base64编码处理
	 * 
	 * @return
	 * @throws UnsupportedEncodingException
	 */
	public static String GetPicturesStr(File file) {
		InputStream in = null;
		byte[] data = null;
		String value = null;
		// 读取图片字节数组
		try {
			in = new FileInputStream(file);
			data = new byte[in.available()];
			in.read(data);
			in.close();
			value = SecurityUtil.Base64EncodeByByte(data);// 返回Base64编码过的字节数组字符串
		} catch (UnsupportedEncodingException e) {
			LogerUtil.error(PhotoAuthUtil.class, e, "Base64编码异常--------------");
			e.printStackTrace();
		} catch (IOException e) {
			LogerUtil.error(PhotoAuthUtil.class, e, "IO关闭异常-----------");
			e.printStackTrace();
		}
		return value;
	}

	
}
