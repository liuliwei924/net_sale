package org.xxjr.tools.util;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.core.service.RemoteInvoke;
import org.ddq.common.web.page.PageUtil;
import org.llw.model.cache.RedisUtils;
import org.springframework.util.StringUtils;
import org.xxjr.sys.util.ServiceKey;

public class BankinfoUtil {
	public static final String CASH_KEY="BANK_TELS";
	
	/**
	 * 财务系统宝付认证支付支持银行列表缓存key
	 */
	public static final String COL_SYX_BANK_INFO_KEY = "col_syx_banklist";
	
	/**
	 * 财务系统宝付代扣/代付支持银行列表key
	 */
	public static final String COL_BF_DAI_BANKS = "col_bf_dai_banks";

	/***
	 * 获取所有银行信息
	 */
	public static List<Map<String,Object>>  getBankList(){
		@SuppressWarnings("unchecked")
		List<Map<String,Object>>  list = ((List<Map<String, Object>>) RedisUtils.getRedisService().get(CASH_KEY));
		if(list==null || list.isEmpty()){
			list = refershBankList();
		}
		return list;
	}
	
	/***
	 * 获取 bank 银行信息
	 * @param bankCode
	 */
	public static Map<String,Object>  getBankList(String bankCode){
		List<Map<String,Object>>  list = getBankList();
		for(Map<String,Object> bank: list){
			if(bankCode.equals(bank.get("bankCode"))){
				return bank;
			}
		}
		return null;
	}
	
	/***
	 * 获取宝付银行信息
	 * @param bankCode
	 */
	public static Map<String,Object>  getBaoFooBankInfo(String bankCode){
		List<Map<String,Object>>  list = getColBankList();
		for(Map<String,Object> bank: list){
			if(bankCode.equals(bank.get("bankCode"))){
				return bank;
			}
		}
		return null;
	}
	/***
	 * 刷新银行信息
	 */
	public static List<Map<String,Object>> refershBankList(){
		//设置当前城市的信息
		AppParam param  = new AppParam();
		param.setService("bankInfoService");
		param.setMethod("query");
		param.setOrderBy("bankId");
		param.setOrderValue(PageUtil.ORDER_ASC);
		param.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+"tools"));
		AppResult result = RemoteInvoke.getInstance().call(param);
		RedisUtils.getRedisService().set(CASH_KEY, (Serializable)result.getRows(), 60*60*4);
		return result.getRows();
	}
	
	
	
	
	/***
	 * 获取财务系统宝付认证支付银行列表信息
	 */
	public static List<Map<String,Object>> getColBankList(){
		@SuppressWarnings("unchecked")
		List<Map<String,Object>>  list = ((List<Map<String, Object>>) RedisUtils.getRedisService().get(COL_SYX_BANK_INFO_KEY));
		if(list==null || list.isEmpty()){
			list = refershColBankList();
		}
		return list;
	}
	
	/***
	 * 刷新财务系统宝付认证支付银行信息
	 */
	public static List<Map<String,Object>> refershColBankList(){
		AppParam param  = new AppParam();
		param.setService("bankService");
		param.setMethod("query");
		param.setOrderBy("orderIndex");
		param.setOrderValue(PageUtil.ORDER_ASC);
		param.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ ServiceKey.Key_col));
		AppResult result = RemoteInvoke.getInstance().call(param);
		List<Map<String,Object>> baofooBankList = new ArrayList<Map<String,Object>>();
		for(Map<String,Object> row : result.getRows()){
			if(!StringUtils.isEmpty(row.get("baofooPayCode"))){
				baofooBankList.add(row);
			}
		}
		RedisUtils.getRedisService().set(COL_SYX_BANK_INFO_KEY, (Serializable)baofooBankList, 60*60*48);
		return baofooBankList;
	}
	
	/***
	 * 获取财务系统宝付代付支持银行列表信息
	 */
	public static List<Map<String,Object>> getBfDaiBankList(){
		@SuppressWarnings("unchecked")
		List<Map<String,Object>>  list = ((List<Map<String, Object>>) RedisUtils.getRedisService().get(COL_BF_DAI_BANKS));
		if(list==null || list.isEmpty()){
			list = refershBfDaiBankList();
		}
		return list;
	}
	
	/***
	 * 刷新财务系统宝付代扣/代付银行列表信息
	 */
	public static List<Map<String,Object>> refershBfDaiBankList(){
		AppParam param  = new AppParam();
		param.setService("bankService");
		param.setMethod("query");
		param.setOrderBy("orderIndex");
		param.setOrderValue(PageUtil.ORDER_ASC);
		param.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ ServiceKey.Key_col));
		AppResult result = RemoteInvoke.getInstance().call(param);
		List<Map<String,Object>> baofooBankList = new ArrayList<Map<String,Object>>();
		for(Map<String,Object> row : result.getRows()){
			if(!StringUtils.isEmpty(row.get("baofooCode"))){
				baofooBankList.add(row);
			}
		}
		RedisUtils.getRedisService().set(COL_BF_DAI_BANKS, (Serializable)baofooBankList, 60*60*48);
		return baofooBankList;
	}
}
