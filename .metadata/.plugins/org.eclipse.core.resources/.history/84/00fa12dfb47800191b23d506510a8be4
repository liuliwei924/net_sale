package org.xxjr.sys.util;

import java.io.Serializable;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppResult;
import org.ddq.common.util.StringUtil;
import org.ddq.model.cache.RedisUtils;

public class WebsiteCfgUtil {
	public final static int timeOut = 60*60*8;
	
	public final static  String KEY_WEBSITECFG = "REDIS_WebsiteCfg_";
	
	
	public final static String KEY_WEBSITECFG_Map = "REDIS_WebsiteCfg_Map";
	
	public final static String KEY_HOT_Citys = "REDIS_WebsiteCfg_HotCitys";
	
	public static List<Map<String, Object>> refreshWebsiteCfg () {
		AppParam param = new AppParam("websiteCfgService", "query");
		param.addAttr("isEnable", "1");
		param.setOrderBy("indexNum");
		param.setOrderValue("DESC");
		AppResult result = ServiceKey.doCallNoTx(param, ServiceKey.Key_sys);
		if (result.getRows().size() > 0) {
			List<Map<String, Object>> rows = result.getRows();
			RedisUtils.getRedisService().set(KEY_WEBSITECFG, (Serializable)rows, timeOut);
			return rows;
		}else {
			return null;
		}
	}
	
	@SuppressWarnings("unchecked")
	public static List<Map<String, Object>> getWebsiteCfg(){
		List<Map<String, Object>> rows = (List<Map<String, Object>>) RedisUtils.getRedisService().get(KEY_WEBSITECFG);
		if (rows == null || rows.size() == 0) {
			rows = refreshWebsiteCfg();
		}
		return rows;
	}
	
	/**
	 * 获取所有配置了二级路径的城市，按Map返回
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public static Map<String, String> getWebsiteCfgByMap (){
		Map<String, String> citys = (Map<String, String>) RedisUtils.getRedisService().get(KEY_WEBSITECFG_Map);
		if (citys == null || citys.isEmpty()) {
			citys = new HashMap<String, String>();
			List<Map<String, Object>> websiteCfg = getWebsiteCfg();
			for (Map<String, Object> map : websiteCfg) {
				citys.put(StringUtil.objectToStr(map.get("cityName")), StringUtil.objectToStr(map.get("path")));
			}
			if (!citys.isEmpty()) {
				 RedisUtils.getRedisService().set(KEY_WEBSITECFG_Map, (Serializable)citys, timeOut);
			}
		}
		return citys;
	}
	
	@SuppressWarnings("unchecked")
	public static Map<String, String> getHotCitys(){
		Map<String, String> citys = (Map<String, String>) RedisUtils.getRedisService().get(KEY_HOT_Citys);
		if (citys == null || citys.isEmpty()) {
			citys = new LinkedHashMap<String, String>();
			List<Map<String, Object>> websiteCfg = getWebsiteCfg();
			for (Map<String, Object> map : websiteCfg) {
				if (NumberUtil.getInt(map.get("isHot"), 0) == 1) {
					citys.put(map.get("cityName").toString(), map.get("path").toString());
				}
			}
			if (!citys.isEmpty()) {
				 RedisUtils.getRedisService().set(KEY_HOT_Citys, (Serializable) citys);
			}
		}
		return citys;
	}
	
	public static void delRedis(){
		RedisUtils.getRedisService().del(KEY_HOT_Citys);
		RedisUtils.getRedisService().del(KEY_WEBSITECFG);
		RedisUtils.getRedisService().del(KEY_WEBSITECFG_Map);
	}
}
