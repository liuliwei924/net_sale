package org.xxjr.job.listener.busi.push;

import java.util.Date;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.util.DateUtil;
import org.ddq.job.core.BaseExecteJob;
import org.ddq.job.util.JobConstant;
import org.ddq.job.util.JobUtil;
import org.ddq.common.core.service.RemoteInvoke;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;
import org.xxjr.job.listener.busi.kf.TransferToXxjrUtil;
import org.xxjr.sys.util.NumberUtil;
import org.xxjr.sys.util.ServiceKey;
import org.xxjr.sys.util.SysParamsUtil;

/***
 * 获取需要推送的数据
 *
 */
@Lazy
@Component
public class AutoObtainDataJob implements BaseExecteJob {
	
	@Override
	public AppResult executeJob(AppParam param) {
		Object processId = param.getAttr(JobConstant.KEY_processId);
		AppResult result = new AppResult();
		
		//更新小贷池待推送的数据去推送
		obtainMinLoanData(processId);
		
		//转待超池
		TransferToXxjrUtil.queryToXxjrList(processId);
		
		return result;
	}

	
	//转小贷池
	private void obtainMinLoanData (Object processId) {
		AppParam updateParams = new AppParam("thirdPushPoolService", "updateImmedStatus");
		updateParams.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_busi_in));
	
		int tranMinLoanMinDays = SysParamsUtil.getIntParamByKey("tranMinLoanMinDays", 1);
		int tranMinLoanSucDays = SysParamsUtil.getIntParamByKey("tranMinLoanSucDays", 2);
		Date today = new Date();	
		
		//将未被挂卖的数据更改去推送
		updateParams.addAttr("startTime", DateUtil.toStringByParttern(DateUtil.getNextDay(today, 
				-(tranMinLoanMinDays+1)), DateUtil.DATE_PATTERN_YYYY_MM_DD_HHMMSS));
		updateParams.addAttr("endTime", DateUtil.toStringByParttern(DateUtil.getNextDay(today, 
				-tranMinLoanMinDays), DateUtil.DATE_PATTERN_YYYY_MM_DD_HHMMSS));
		updateParams.addAttr("immediate", 0);
		AppResult updateResult = RemoteInvoke.getInstance().call(updateParams);
		int size1 = NumberUtil.getInt(updateResult.getAttr(DuoduoConstant.DAO_Update_SIZE), 0);
		
		
		//将未被挂卖的数据更改去推送
		updateParams.addAttr("startTime", DateUtil.toStringByParttern(DateUtil.getNextDay(today, 
				-(tranMinLoanSucDays+1)), DateUtil.DATE_PATTERN_YYYY_MM_DD_HHMMSS));
		updateParams.addAttr("endTime", DateUtil.toStringByParttern(DateUtil.getNextDay(today, 
				-tranMinLoanSucDays), DateUtil.DATE_PATTERN_YYYY_MM_DD_HHMMSS));
		updateParams.addAttr("immediate", 2);
		updateResult = RemoteInvoke.getInstance().call(updateParams);
		int size2 = NumberUtil.getInt(updateResult.getAttr(DuoduoConstant.DAO_Update_SIZE), 0);
		
		JobUtil.addProcessExecute(processId, "成功更新：" +"未被挂卖:" +size1 +"条,成功挂卖过的：" + size2 +"条去推送给小贷");
		
	}
	
	
}
