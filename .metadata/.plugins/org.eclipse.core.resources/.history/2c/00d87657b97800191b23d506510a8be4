/**
 * 
 */
package org.xxjr.store.web.action.account.xxxj.tbw;


import java.util.Date;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.exception.ExceptionUtil;
import org.ddq.common.util.LogerUtil;
import org.ddq.common.util.StringUtil;
import org.ddq.common.web.session.DuoduoSession;
import org.ddq.common.web.session.RequestUtil;
import org.ddq.model.cache.RedisUtils;
import org.ddq.zk.service.RemoteInvoke;
import org.springframework.stereotype.Controller;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.xxjr.busi.util.store.StoreUserUtil;
import org.xxjr.cust.util.info.CustomerIdentify;
import org.xxjr.store.web.action.account.xxxj.XjCustAction;
import org.xxjr.sys.util.ServiceKey;
import org.xxjr.sys.util.ValidUtils;

/**
 * 用户管理
 * @author zenghw
 *
 */
@Controller()
@RequestMapping("/account/xj/")
public class TranCustAction {
	/**
	 * 查询当前已经注册用户
	 * @param request
	 * @return
	 */
	@RequestMapping("xjTranCust/queryCust")
	@ResponseBody
	public AppResult queryCust(HttpServletRequest request){
		AppResult result = new AppResult();
		try{
			AppParam param = new AppParam("tranCustService","queryCust");
			RequestUtil.setAttr(param, request);
			String nickNameAndTel = request.getParameter("nickNameAndTel");
			if(!StringUtils.isEmpty(nickNameAndTel)){
				if(ValidUtils.validateTelephone(nickNameAndTel)){//加快查询效率
					param.addAttr("telephone", nickNameAndTel);
					param.removeAttr("nickNameAndTel");
				}else{
					param.addAttr("nickName", nickNameAndTel);
					param.removeAttr("nickNameAndTel");
				}
			}
			param.setOrderBy("registerTime");
			param.setOrderValue("desc");
			param.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START
								+ ServiceKey.Key_XJ));
			result = RemoteInvoke.getInstance().callNoTx(param);
		}catch(Exception e){
			LogerUtil.error(XjCustAction.class, e, "queryCust error");
			ExceptionUtil.setExceptionMessage(e, result,
					DuoduoSession.getShowLog());
		}
		return result;
	}
	
	
	
	/**
	 * 编辑用户信息
	 * @param request
	 * @return
	 */
	@RequestMapping("xjTranCust/updateCust")
	@ResponseBody
	public AppResult updateCust(HttpServletRequest request){
		AppResult result = new AppResult();
		String customerId = request.getParameter("customerId");
		if (StringUtils.isEmpty(customerId)) {
			result.setSuccess(false);
			result.setMessage("客户编号不能为空");
			return result;
		}
		String status = request.getParameter("status");
		if (StringUtils.isEmpty(status)) {
			result.setSuccess(false);
			result.setMessage("用户状态不能为空");
			return result;
		}
		try{
			AppParam param = new AppParam("tranCustService","update");
			param.addAttr("customerId", customerId);
			param.addAttr("status", status);
			param.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START
								+ ServiceKey.Key_XJ));
			result = RemoteInvoke.getInstance().call(param);
			
			if(result.isSuccess()){
				RedisUtils.getRedisService().del("CustTran" +customerId);
				if("1".equals(status)){//冻结用户
					String custKey = (String) RedisUtils.getRedisService().get("tran_user_session" +customerId);
					RedisUtils.getRedisService().del(custKey);
				} 
			}
		}catch(Exception e){
			LogerUtil.error(XjCustAction.class, e, "updateCust error");
			ExceptionUtil.setExceptionMessage(e, result,
					DuoduoSession.getShowLog());
		}
		return result;
	}
	
	
	/**
	 * 查询用户实名列表
	 * @param request
	 * @return
	 */
	@RequestMapping("xjTranReal/queryCustReal")
	@ResponseBody
	public AppResult queryCustReal(HttpServletRequest request){
		AppResult result = new AppResult();
		try{
			AppParam param = new AppParam("tranIdentifyService","queryCustReal");
			RequestUtil.setAttr(param, request);
			String nickNameAndTel = request.getParameter("nickNameAndTel");
			if(!StringUtils.isEmpty(nickNameAndTel)){
				if(ValidUtils.validateTelephone(nickNameAndTel)){//加快查询效率
					param.addAttr("telephone", nickNameAndTel);
					param.removeAttr("nickNameAndTel");
				}else{
					param.addAttr("nickName", nickNameAndTel);
					param.removeAttr("nickNameAndTel");
				}
			}
			param.setOrderBy("createTime");
			param.setOrderValue("desc");
			param.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START
								+ ServiceKey.Key_XJ));
			result = RemoteInvoke.getInstance().callNoTx(param);
		}catch(Exception e){
			LogerUtil.error(XjCustAction.class, e, "queryCustReal error");
			ExceptionUtil.setExceptionMessage(e, result,
					DuoduoSession.getShowLog());
		}
		return result;
	}
	
	
	
	/**
	 * 审核用户实名信息
	 * @param request
	 * @return
	 */
	@RequestMapping("xjTranReal/checkCustReal")
	@ResponseBody
	public AppResult checkCustRealName(HttpServletRequest request){
		AppResult result = new AppResult();
		String customerId = request.getParameter("customerId");
		if (StringUtils.isEmpty(customerId)) {
			result.setSuccess(false);
			result.setMessage("客户编号不能为空");
			return result;
		}
		try{
			AppParam queryParam = new AppParam("tranIdentifyService","query");
			queryParam.addAttr("customerId", customerId);
			queryParam.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START
								+ ServiceKey.Key_XJ));
			AppResult queryResult = RemoteInvoke.getInstance().callNoTx(queryParam);
			if(queryResult.getRows() != null && queryResult.getRows().size() > 0){
				String identityStatus = StringUtil.getString(queryResult.getRow(0).get("status"));
				if("1".equals(identityStatus)){//1-实名状态正常
					result.setSuccess(false);
					result.setMessage("该用户实名已经通过审核，不用重新审核");
					return result;
				}
			}
			AppParam param = new AppParam("tranIdentifyService","update");
			RequestUtil.setAttr(param, request);
			param.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START
								+ ServiceKey.Key_XJ));
			//获取用户信息
			Map<String, Object> custInfo = CustomerIdentify.getCustIdentify(StoreUserUtil.getCustomerId(request));
			param.addAttr("auditBy", custInfo.get("userName"));
			param.addAttr("auditTime", new Date());
			result = RemoteInvoke.getInstance().call(param);
			if(result.isSuccess()){
				RedisUtils.getRedisService().del("CustTran" +customerId);
			}
		}catch(Exception e){
			LogerUtil.error(XjCustAction.class, e, "checkCustReal error");
			ExceptionUtil.setExceptionMessage(e, result,
					DuoduoSession.getShowLog());
		}
		return result;
	}
}
