package org.xxjr.job.listener.fx;

import java.util.Date;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.util.DateUtil;
import org.ddq.common.util.LogerUtil;
import org.llw.ddq.job.core.BaseExecteJob;
import org.llw.ddq.job.util.JobConstant;
import org.llw.ddq.job.util.JobUtil;
import org.ddq.common.core.service.RemoteInvoke;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;
import org.xxjr.sys.util.NumberUtil;
import org.xxjr.sys.util.ServiceKey;
import org.xxjr.sys.util.SysParamsUtil;
/**
 * 分销自动任务，分配客户给讲师
 * 
 * @author Administrator
 *
 */
@Lazy
@Component
public class AutoFxTrainAllotJob implements BaseExecteJob {
	private static Logger log = LogManager.getLogger(AutoFxTrainAllotJob.class);

	@Override
	public AppResult executeJob(AppParam param) {
		AppResult result = new AppResult();
		Object processId = param.getAttr(JobConstant.KEY_processId);
		autoAllotTrain(processId);
		autoDeleteXCode(processId);
		autoDeleteMessageNotify(processId);
		return result;
	}
	
	public AppResult autoAllotTrain(Object processId) {
		AppResult result = new AppResult();
		try {
			AppParam allotParam = new AppParam();
			allotParam.setService("fxTrainAllotService");
			allotParam.setMethod("allot");
			allotParam.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START
							+ ServiceKey.Key_sho));
			AppResult allotResult = RemoteInvoke.getInstance().call(allotParam);
			if(allotResult.isSuccess()){
				result.setMessage("成功分配了：" + allotResult.getAttr("total") + "名用户给讲师");
				JobUtil.addProcessExecute(
						processId,
						"AutoFxTrainAllotJob success! 共分配"
								+ allotResult
										.getAttr("total") + "名用户给讲师");
			}else{
				JobUtil.addProcessExecute(
						processId,
						"分配失败：" + allotResult.getMessage());
				result.setMessage("分配失败：" + allotResult.getMessage());
			}
		} catch (Exception e) {
			log.error("AutoFxTrainAllotJob executeJob error:", e);
			result.setMessage("分配失败：" + e.getMessage());
			JobUtil.addProcessExecute(processId, "AutoFxTrainAllotJob error:" + e.getMessage());
		}
		return result;
	}
	
	/**
	 * 自动删除XCode一个月之前的数据 
	 * @param processId
	 */
	public static AppResult autoDeleteXCode(Object processId) {
		AppResult result = new AppResult();
		try{
			int autoDeleteXcodeFlag = SysParamsUtil.getIntParamByKey("autoDeleteXcodeFlag", 0);
			if(autoDeleteXcodeFlag == 0){
				result.setMessage("自动删除Xcode数据暂未开启!");
				result.setSuccess(false);
				return result;
			}
			AppParam deleteParam = new AppParam("fxAppCodeService","deleteByDate");
			deleteParam.addAttr("recordDate", DateUtil.toStringByParttern(DateUtil.getNextDay(new Date(),-30),
					DateUtil.DATE_PATTERN_YYYY_MM_DD));
			deleteParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START
					+ ServiceKey.Key_sho));
			AppResult deleteResult = RemoteInvoke.getInstance().call(deleteParam);
			int successCount = NumberUtil.getInt( deleteResult.getAttr(DuoduoConstant.DAO_Delete_SIZE),0);
			JobUtil.addProcessExecute(processId, "自动删除XCode一个月之前的数据  msg：成功笔数:"+ successCount);
			LogerUtil.log("自动删除XCode一个月之前的数据 msg：成功笔数:"+ successCount);
		}catch(Exception e){
			LogerUtil.error(AutoFxTrainAllotJob.class, e, "autoDeleteXCode >>>>>>>>>>>>>>>>>> error");
			JobUtil.addProcessExecute(processId, "自动删除XCode一个月之前的数据 报错：" + e.getMessage() );
		}
		return result;
	}
	
	/**
	 * 自动删除小小攒钱消息通知一个月之前的数据
	 * @param processId
	 */
	public static AppResult autoDeleteMessageNotify(Object processId) {
		AppResult result = new AppResult();
		try{
			int autoDeleteMessageFlag = SysParamsUtil.getIntParamByKey("autoDeleteMessageFlag", 0);
			if(autoDeleteMessageFlag == 0){
				result.setMessage("自动删除小小攒钱消息通知暂未开启!");
				result.setSuccess(false);
				return result;
			}
			AppParam deleteParam = new AppParam("fxMessageNotifyService","deleteByDate");
			deleteParam.addAttr("recordDate", DateUtil.toStringByParttern(DateUtil.getNextDay(new Date(),-30),
					DateUtil.DATE_PATTERN_YYYY_MM_DD));
			deleteParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START
					+ ServiceKey.Key_sho));
			AppResult deleteResult = RemoteInvoke.getInstance().call(deleteParam);
			int successCount = NumberUtil.getInt(deleteResult.getAttr(DuoduoConstant.DAO_Delete_SIZE),0);
			JobUtil.addProcessExecute(processId, "自动删除小小攒钱消息通知一个月之前的数据 msg：成功笔数:"+ successCount);
			LogerUtil.log("自动删除小小攒钱消息通知一个月之前的数据 msg：成功笔数:"+ successCount);
		}catch(Exception e){
			LogerUtil.error(AutoFxTrainAllotJob.class, e, "autoDeleteMessageNotify >>>>>>>>>>>>>>>>>> error");
			JobUtil.addProcessExecute(processId, "自动删除小小攒钱消息通知一个月之前的数据报错：" + e.getMessage() );
		}
		return result;
	}
}
