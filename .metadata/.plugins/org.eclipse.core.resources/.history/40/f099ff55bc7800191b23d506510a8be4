package org.xxjr.summary.wz;

import java.util.List;
import java.util.Map;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppResult;
import org.ddq.common.core.service.BaseService;
import org.ddq.common.exception.AppException;
import org.ddq.common.exception.DuoduoError;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import org.xxjr.sys.util.NumberUtil;

@Lazy
@Service
public class SumWzCardService extends BaseService {
	private static final String NAMESPACE = "SUMWZCARD";

	/**
	 * querys1
	 * @param params
	 * @return
	 */
	public AppResult query(AppParam params) {
		return super.query(params, NAMESPACE);
	}
	/**
	 * 微名片本月统计
	 * @param params
	 * @return
	 */
	public AppResult queryWzCardDay(AppParam params) {
		if(params.getCurrentPage() == -1){
			params.setEveryPage(1000);
			params.setCurrentPage(1);
			return super.queryByPage(params, NAMESPACE,"queryWzCardDay", "queryWzCardDayCount");
		}
		return super.queryByPage(params, NAMESPACE,"queryWzCardDay", "queryWzCardDayCount");
	}
	
	/**
	 * 微名片本月统计总计
	 * @param params
	 * @return
	 */
	public AppResult queryWzCardDaySum(AppParam params) {
		return super.query(params, NAMESPACE,"queryWzCardDaySum");
	}
	
	/**
	 * 微名片订单状态渠道 月度统计
	 * @param params
	 * @return
	 */
	public AppResult queryWzCardMonth(AppParam params) {
		if(params.getCurrentPage() == -1){
			params.setEveryPage(1000);
			params.setCurrentPage(1);
			return super.queryByPage(params, NAMESPACE,"queryWzCardMonth", "queryWzCardMonthCount");
		}
		return super.queryByPage(params, NAMESPACE,"queryWzCardMonth", "queryWzCardMonthCount");
	}
	/**
	 * 微名片本月统计总计
	 * @param params
	 * @return
	 */
	public AppResult queryWzCardMonthSum(AppParam params) {
		return super.query(params, NAMESPACE,"queryWzCardMonthSum");
	} 
	
	/**
	 * queryByPage
	 * @param params
	 * @return
	 */
	public AppResult queryByPage(AppParam params) {
		return super.queryByPage(params, NAMESPACE);
	}
	
	/**
	 * queryCount
	 * @param params
	 * @return
	 */
	public AppResult queryCount(AppParam params) {
		int size = getDao().count(NAMESPACE, super.COUNT,params.getAttr(),params.getDataBase());
		AppResult result = new AppResult();
		result.putAttr(DuoduoConstant.TOTAL_SIZE, size);
		return result;
	}
	
	
	/**
	 * insert
	 * @param params
	 * @return
	 */
	public AppResult insert(AppParam params) {
		return super.insert(params, NAMESPACE);
	}
	
	/**
	 * update
	 * @param params
	 * @return
	 */
	public AppResult update(AppParam params) {
		return super.update(params, NAMESPACE);
	}
	
	/**
	 * delete
	 * @param params
	 * @return
	 */
	public AppResult delete(AppParam params) {
		String ids = (String) params.getAttr("ids");
		AppResult  result = null;
		if (!StringUtils.isEmpty(ids)) {
			for (String id : ids.split(",")) {
				AppParam param = new AppParam();
				param.addAttr("recordDate", id);
				
				result = super.delete(param, NAMESPACE);
			}
		} else if (!StringUtils.isEmpty(params.getAttr("recordDate"))) {
			result = super.delete(params, NAMESPACE);
		} else {
			throw new AppException(DuoduoError.DELETE_NO_ID);
		}
		if (!StringUtils.isEmpty(ids)) {
			for (String id : ids.split(",")) {
				AppParam param = new AppParam();
				param.addAttr("gzhId", id);
				
				result = super.delete(param, NAMESPACE);
			}
		} else if (!StringUtils.isEmpty(params.getAttr("gzhId"))) {
			result = super.delete(params, NAMESPACE);
		} else {
			throw new AppException(DuoduoError.DELETE_NO_ID);
		}
		return result;
	}
	
	/**
	 * 保存微名片统计数据
	 * @param params
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public AppResult save(AppParam params){
		AppResult result = new AppResult();
		//删除老的数据
		super.getDao().delete(NAMESPACE, "deleteByDay", params.getAttr(), params.getDataBase().toString());
		//插入新的数据
		List<Map<String, Object>> list = (List<Map<String, Object>>) params.getAttr("list");
		int size = super.getDao().batchInsert(NAMESPACE, "batchInsert",
				list, params.getDataBase());
		result.putAttr(DuoduoConstant.DAO_Insert_SIZE, size);
		return result;
	}
	
	/**
	 * 分享统计
	 * @param params
	 * @return
	 */
	public AppResult shareCount(AppParam params){
		AppResult result = new AppResult();
		AppParam queryParam = new AppParam();
		queryParam.addAttr("recordDate", params.getAttr("recordDate"));
		queryParam.addAttr("gzhId", params.getAttr("gzhId"));
		AppResult queryResult = this.queryCount(queryParam);
		int totalCount = NumberUtil.getInt(queryResult.getAttr(DuoduoConstant.TOTAL_SIZE),0);
		if(totalCount > 0){
			result = this.update(params);
		}else{
			result = this.insert(params);
		}
		return result;
	}
}
