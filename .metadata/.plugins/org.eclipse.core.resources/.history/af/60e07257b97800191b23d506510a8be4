package org.xxjr.store.web.action.account.fx;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.imageio.ImageIO;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.exception.ExceptionUtil;
import org.ddq.common.util.LogerUtil;
import org.ddq.common.web.session.DuoduoSession;
import org.ddq.common.web.session.RequestUtil;
import org.ddq.common.web.util.FileUtil;
import org.ddq.model.cache.RedisUtils;
//import org.ddq.wx.util.base.ConfigUtil;
import org.ddq.zk.service.RemoteInvoke;
import org.springframework.stereotype.Controller;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.xxjr.cust.util.info.CustomerUtil;
import org.xxjr.fx.util.FxProdUtil;
import org.xxjr.goods.util.FxImageUtil;
import org.xxjr.sys.util.FileGroupUtil;
import org.xxjr.sys.util.NumberUtil;
import org.xxjr.sys.util.ServiceKey;
import org.xxjr.sys.util.SysParamsUtil;
import org.xxjr.wx.message.WXMaterialUtil;

/**
 * 分销产品相关
 * @author Administrator
 *
 */
@Controller()
@RequestMapping("/account/fx/fxProd/")
public class FxProdAction {

	
	/**
	 * 查询产品列表
	 * @param request
	 * @return
	 */
	@RequestMapping("queryProdList")
	@ResponseBody
	public AppResult queryProdList(HttpServletRequest request) {
		AppResult result = new AppResult();
		try {
			AppParam params = new AppParam();
			RequestUtil.setAttr(params, request);
			params.setService("fxProdService");
			params.setMethod("queryByPage");
			params.setOrderBy("prodType,indexNum");
			params.setOrderValue("DESC,ASC");
			params.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sho));
			result = RemoteInvoke.getInstance().callNoTx(params);
		} catch (Exception e) {
			LogerUtil.error(FxProdAction.class, e, "queryProdList error");
			ExceptionUtil.setExceptionMessage(e, result, DuoduoSession.getShowLog());
		}
		return result;
	}
	
	
	/**
	 * 查询产品详情
	 * @param request
	 * @return
	 */
	@RequestMapping("queryProdDtl")
	@ResponseBody
	public AppResult queryProdDtl(HttpServletRequest request) {
		AppResult result = new AppResult();
		try {
			String prodId = request.getParameter("prodId");
			if (StringUtils.isEmpty(prodId)) {
				result.setSuccess(false);
				result.setMessage("产品id为空");
				return result;
			}
			// 查询产品基本信息
			AppParam param = new AppParam();
			param.setService("fxProdService");
			param.setMethod("query");
			param.addAttr("prodId",prodId);
			param.setRmiServiceName(AppProperties.
					getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_sho));
			AppResult queryResult = RemoteInvoke.getInstance().callNoTx(param);
			if (queryResult.getRows().size() > 0) {
				Map<String,Object> prodDetail = queryResult.getRow(0);
				// 查询产品其他信息
				AppParam otherParam = new AppParam();
				otherParam.setService("fxProdOtherService");
				otherParam.setMethod("queryProdOtherInfo");
				otherParam.addAttr("prodId",prodId);
				otherParam.setRmiServiceName(AppProperties.
						getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_sho));
				AppResult otherResult = RemoteInvoke.getInstance().callNoTx(otherParam);
				if (otherResult.getRows().size() > 0) {
					prodDetail.put("prodOtherList", otherResult.getRows());
				}
				result.putAttr("prodDtl", prodDetail);
			}
		} catch (Exception e) {
			LogerUtil.error(FxProdAction.class, e, "queryProdDtl error");
			ExceptionUtil.setExceptionMessage(e, result, DuoduoSession.getShowLog());
		}
		return result;
	}
	
	
	/**
	 * 获取产品条件类型
	 * @param request
	 * @return
	 */
	@RequestMapping("getConditionType")
	@ResponseBody
	public AppResult getConditionType(HttpServletRequest request){
		AppResult result = new AppResult();
		try{
			List<Map<String, Object>> typeList = FxProdUtil.getProdCondTypeList();
			if (typeList.size() > 0) {
				result.putAttr("condInfo", typeList);
			}
		}catch(Exception e){
			LogerUtil.error(FxProdAction.class, e, "getConditionType error");
			ExceptionUtil.setExceptionMessage(e, result, DuoduoSession.getShowLog());
		}
		return result;
	}
	
	
	/**
	 * 添加产品信息
	 * @param request
	 * @return
	 */
	@RequestMapping("addProdInfo")
	@ResponseBody
	public AppResult addProdInfo(HttpServletRequest request) {
		AppResult result = new AppResult();
		try {
			String strKey = request.getParameter("strKey");
			if(strKey.contains("，")){
				result.setSuccess(false);
				result.setMessage("银行返回结果匹配关键词中包含中文逗号，请修改成英文逗号！");
				return result;
			}
			int maxAmt = NumberUtil.getInt(request.getParameter("maxAmt"),0);
			if(maxAmt > 1000){
				result.setSuccess(false);
				result.setMessage("最大自动发送金额不能超过1000");
				return result;
			}
			AppParam params = new AppParam();
			RequestUtil.setAttr(params, request);
			params.setService("fxProdService");
			params.setMethod("addProdInfo");
			params.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sho));
			result = RemoteInvoke.getInstance().call(params);
			if (result.isSuccess()) {
				// 同步数据到summary的t_btn_cfg表
				AppParam btnParam = new AppParam("btnCfgService", "save");
				btnParam.addAttr("btnId", "20000"+result.getAttr("prodId"));
				btnParam.addAttr("btnName", params.getAttr("prodName"));
				btnParam.addAttr("btnType", "6");
				btnParam.addAttr("loanType", "4");
				btnParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sum));
				result = RemoteInvoke.getInstance().call(btnParam);
			}
		} catch (Exception e) {
			LogerUtil.error(FxProdAction.class, e, "addProdInfo error");
			ExceptionUtil.setExceptionMessage(e, result, DuoduoSession.getShowLog());
		}
		return result;
	}
	
	
	/**
	 * 编辑产品信息
	 * @param request
	 * @return
	 */
	@RequestMapping("updateProdInfo")
	@ResponseBody
	public AppResult updateProdInfo(HttpServletRequest request) {
		AppResult result = new AppResult();
		try {
			String prodId = request.getParameter("prodId");
			if (StringUtils.isEmpty(prodId)) {
				result.setSuccess(false);
				result.setMessage("产品id为空");
				return result;
			}
			String strKey = request.getParameter("strKey");
			if(strKey.contains("，")){
				result.setSuccess(false);
				result.setMessage("银行返回结果匹配关键词中包含中文逗号，请修改成英文逗号！");
				return result;
			}
			int maxAmt = NumberUtil.getInt(request.getParameter("maxAmt"),0);
			if(maxAmt > 1000){
				result.setSuccess(false);
				result.setMessage("最大自动发送金额不能超过1000");
				return result;
			}
			AppParam params = new AppParam();
			RequestUtil.setAttr(params, request);
			params.setService("fxProdService");
			params.setMethod("updateProdInfo");
			params.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_sho));
			result = RemoteInvoke.getInstance().call(params);
			if(result.isSuccess()){
				RedisUtils.getRedisService().del(FxProdUtil.KEY_FX_PROD_DETAIL + prodId);
				// 同步数据到summary的t_btn_cfg表
				AppParam btnParam = new AppParam("btnCfgService", "save");
				btnParam.addAttr("btnId", "20000"+prodId);
				btnParam.addAttr("btnName", params.getAttr("prodName"));
				btnParam.addAttr("btnType", "6");
				btnParam.addAttr("loanType", "4");
				btnParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sum));
				result = RemoteInvoke.getInstance().call(btnParam);
			}
		} catch (Exception e) {
			LogerUtil.error(FxProdAction.class, e, "updateProdInfo error ");
			ExceptionUtil.setExceptionMessage(e, result,DuoduoSession.getShowLog());
		}
		return result;
	}
	
	/**
	 * 删除产品信息
	 * @param request
	 * @return
	 */
	@RequestMapping("delProdInfo")
	@ResponseBody
	public AppResult delProdInfo(HttpServletRequest request) {
		AppResult result = new AppResult();
		try {
			String prodId = request.getParameter("prodId");
			if (StringUtils.isEmpty(prodId)) {
				result.setSuccess(false);
				result.setMessage("产品id为空");
				return result;
			}
			AppParam params = new AppParam();
			params.setService("fxProdService");
			params.setMethod("delProdInfo");
			params.addAttr("prodId", prodId);
			params.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_sho));
			result = RemoteInvoke.getInstance().call(params);
		} catch (Exception e) {
			LogerUtil.error(FxProdAction.class, e, "delProdInfo error ");
			ExceptionUtil.setExceptionMessage(e, result,DuoduoSession.getShowLog());
		}
		return result;
	}
	
	/**
	 * 客户获取信用卡海报推广图片
	 * @param request
	 * @param response
	 * @return
	 * @throws IOException
	 */
	@RequestMapping("previewPoster")
	@ResponseBody
	public AppResult previewPoster(HttpServletRequest request, HttpServletResponse response) throws IOException {
		AppResult result = new AppResult();
		// 海报配置信息
		AppParam param = new AppParam();
		File newFile = null;
		try {
			RequestUtil.setAttr(param, request);
			Map<String, Object> posterConfig = param.getAttr();
			String prodId = request.getParameter("prodId");
			String sourceType = "store";
			// 用户信息
			String custId = SysParamsUtil.getStringParamByKey("fxPreviewCustId", "73");
			
			String encryptCustId = CustomerUtil.getEncrypt(custId);
			String qrcodeUrl = "https://phone.xxjr.com/fxapp/applyHome?referer=" + encryptCustId + "&sourceType="+sourceType;
			if (AppProperties.isDebug()) {
				qrcodeUrl = "http://192.168.10.182:3000/fxapp/applyHome?referer=" + encryptCustId + "&sourceType="+sourceType;
			}
			
			BufferedImage ewmFile = FxImageUtil.generatePoster(custId, prodId, posterConfig, null, qrcodeUrl);
			// 生成本地文件newFile
			String fileType = "preview";
			String path = "";
			if(AppProperties.isDebug()){
				path = AppProperties.getRealPath();
			}
			path = path + AppProperties
					.getProperties(FileGroupUtil.KEY_PP_PATH)
					+ File.separator
					+ fileType
					+ File.separator;
			
			FileUtil.fileDirMake(path);
			String fileId = "fxPoster" + "_" + UUID.randomUUID().toString().replaceAll("-", "") + ".jpg";
            newFile = new File(path, fileId);
			String accessToken = null;//ConfigUtil.getAccessToken("11");
			ImageIO.write(ewmFile, "jpg", newFile);
        	Object mediaId = WXMaterialUtil.uploadImage(accessToken, newFile);
        	String imgUrl = "http://file.api.weixin.qq.com/cgi-bin/media/get?access_token="+accessToken+"&media_id="+mediaId;
        	result.putAttr("imgUrl", imgUrl);
		} catch (Exception e) {
			LogerUtil.error(FxProdAction.class, e, "previewPoster error");
			ExceptionUtil.setExceptionMessage(e, result, DuoduoSession.getShowLog());
		} finally {
			if (newFile != null) {
				FileUtil.deleteQuietly(newFile);
			}
		}
		return result; 
	}
	
}
