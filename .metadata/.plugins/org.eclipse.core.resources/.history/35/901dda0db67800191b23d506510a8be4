package org.xxjr.busi.util.borrow;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.ddq.active.mq.message.CustMessageSend;
import org.ddq.active.mq.message.RmiServiceSend;
import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.core.SpringAppContext;
import org.ddq.common.exception.AppException;
import org.ddq.common.exception.DuoduoError;
import org.ddq.common.exception.SysException;
import org.ddq.common.security.md5.Md5;
import org.ddq.common.util.DateUtil;
import org.ddq.common.util.LogerUtil;
import org.ddq.common.util.StringUtil;
import org.ddq.zk.service.RemoteInvoke;
import org.springframework.util.StringUtils;
import org.xxjr.busi.util.ApplyUnionUtil;
import org.xxjr.busi.util.BorrowConstant;
import org.xxjr.busi.util.BorrowErrorCode;
import org.xxjr.busi.util.SeniorCfgUtils;
import org.xxjr.busi.util.dai.BorrowHandleUtil;
import org.xxjr.busi.util.kf.BorrowApplyUtils;
import org.xxjr.busi.util.kf.KfUserUtil;
import org.xxjr.busi.util.wd.WdCfgUtil;
import org.xxjr.cust.util.CustConstant;
import org.xxjr.cust.util.FundConstant;
import org.xxjr.cust.util.fund.CustAmountUtil;
import org.xxjr.cust.util.info.CustFundUtil;
import org.xxjr.cust.util.info.CustInfoUtil;
import org.xxjr.cust.util.info.CustomerIdentify;
import org.xxjr.cust.util.info.CustomerUtil;
import org.xxjr.cust.util.invite.CustInviteUtil;
import org.xxjr.cust.util.member.ScoreUtils;
import org.xxjr.goods.util.ScoreUtil;
import org.xxjr.sys.util.NumberUtil;
import org.xxjr.sys.util.ServiceKey;
import org.xxjr.sys.util.SysParamsUtil;
import org.xxjr.wx.utils.WXRequestUtil;
import org.xxjr.wx.utils.WXUtil;

/***
 *抢单处理
 * @author qinxcb
 *
 */
public class BorrowRobUtils {	
	/***
	 * 获取当前可免费抢单数量
	 * @return
	 */
	public static int getCurentFreeNumber(Date robTime){
		AppParam paramRob = new AppParam();
		paramRob.addAttr("recordDate", DateUtil.toStringByParttern(new Date(), DateUtil.DATE_PATTERN_YYYY_MM_DD));
		if(robTime==null){
			paramRob.addAttr("robTime", DateUtil.toStringByParttern(new Date(), DateUtil.DATE_PATTERN_YYYY_MM_DD_HHMMSS));
		}else{
			paramRob.addAttr("robTime", DateUtil.toStringByParttern(robTime, DateUtil.DATE_PATTERN_YYYY_MM_DD_HHMMSS));
		}
		paramRob.setService("freeRobSummaryService");
		paramRob.setMethod("robTimeLeftCount");
		paramRob.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
		AppResult result = RemoteInvoke.getInstance().call(paramRob);
		return (int)result.getAttr(DuoduoConstant.TOTAL_SIZE);
	}
	
	/***
	 * 获取每轮免费剩余单量
	 * @return
	 */
	public static int getFreeRobNumber(Date robTime,int number){
		AppParam paramRob = new AppParam();
		paramRob.addAttr("recordDate", DateUtil.toStringByParttern(new Date(), DateUtil.DATE_PATTERN_YYYY_MM_DD));
		if(robTime == null){
			paramRob.addAttr("robTime", DateUtil.toStringByParttern(new Date(), DateUtil.DATE_PATTERN_YYYY_MM_DD_HHMMSS));
		}else{
			paramRob.addAttr("robTime", DateUtil.toStringByParttern(robTime, DateUtil.DATE_PATTERN_YYYY_MM_DD_HHMMSS));
		}
		paramRob.addAttr("roundNum", number);
		paramRob.setService("freeRobCountService");
		paramRob.setMethod("queryFreeRobNum");
		paramRob.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_busi));
		AppResult result = RemoteInvoke.getInstance().call(paramRob);
		return (int)result.getAttr(DuoduoConstant.TOTAL_SIZE);
	}
	
	/**
	 * robLend抢单/出借
	 * @param params
	 * @return
	 */
	public static AppResult commonBorrowRob(AppParam params) {
		AppResult result = new AppResult();
		if(StringUtils.isEmpty(params.getAttr("customerId")) || StringUtils.isEmpty(params.getAttr("borrowId"))){
			result.setSuccess(Boolean.FALSE);
			result.setMessage("没有选择要处理的直借信息");
			return result;
		}
		
		String borrowId = params.getAttr("borrowId").toString();
		String customerId = params.getAttr("customerId").toString();
		Map<String,Object> custInfo = CustomerIdentify.getCustIdentify(customerId.toString());
		
		String cardStatus = StringUtil.objectToStr(custInfo.get("cardStatus"));//工作认证
		String identifyStatus = StringUtil.objectToStr(custInfo.get("identifyStatus"));//身份认证
		
	
		if(StringUtils.isEmpty(custInfo.get("realName"))){
			result.setSuccess(Boolean.FALSE);
			result.setErrorCode(BorrowErrorCode.MISS_PERSON_INFO + "");
			result.setMessage("请去完善实名信息！");
			return result;
		}
		if(StringUtils.isEmpty(custInfo.get("company"))){
			result.setSuccess(Boolean.FALSE);
			result.setErrorCode(BorrowErrorCode.MISS_PERSON_INFO + "");
			result.setMessage("请去完善工作信息！");
			return result;
		}
		if(!"1".equals(cardStatus)){
			result.setMessage("个人信息认证通过才能使用积分抢单!");
			result.setSuccess(false);
			return result;
		}
		
		if(!"1".equals(identifyStatus)){
			result.setMessage("个人信息认证通过才能使用积分抢单!");
			result.setSuccess(false);
			return result;
		}
		
		
		if(!"1".equals(custInfo.get("status").toString())){
			throw new SysException("对不起，您当前信息状态不正确，无法提供该功能");
		}
		AppParam queryBorrow = new AppParam();
		queryBorrow.setService("daiBorrowService");
		queryBorrow.setMethod("query");
		queryBorrow.addAttr("borrowId",borrowId);
		queryBorrow.addAttr("status","0");
		queryBorrow.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
		AppResult borrowResult = RemoteInvoke.getInstance().call(queryBorrow);
		if(borrowResult.getRows().size()==1){
			Map<String,Object> borrowInfo = borrowResult.getRow(0);
			int sourceType = Integer.valueOf(borrowInfo.get("sourceType").toString());
			int robType = Integer.valueOf(borrowInfo.get("robType").toString());
			if(BorrowErrorCode.RobType_3==robType){
				result.setSuccess(Boolean.FALSE);
				result.setMessage("该单只能通过微信购买，不能使用积分购买！");
				return result;
			}
			int score = Integer.valueOf(borrowInfo.get("score").toString());
			if(sourceType ==1 && customerId.equals(borrowInfo.get("customerId").toString())){
				result.setSuccess(Boolean.FALSE);
				result.setMessage("不能抢自己的借款");
				return result;
			}
			int needScore = getNeedScoreByRob(customerId.toString(),score);
			//调用 积分处理
			if(score>0){
				if(CustAmountUtil.custTotalScore(customerId.toString()) < needScore){
					throw new AppException(BorrowErrorCode.SCORE_INSUFFICIENT);
				}
			}
			//调用 抢单逻辑
			AppParam paramRob = new AppParam();
			paramRob.addAttr("customerId", customerId);
			paramRob.addAttr("borrowId",borrowId);
			paramRob.addAttr("score", needScore);
			paramRob.addAttr("robWay",BorrowErrorCode.RobType_2);
			paramRob.addAttr("sourceType",CustConstant.SCORE_TYPE_13);
			paramRob.setService("daiBorrowReService");
			paramRob.setMethod(sourceType ==BorrowErrorCode.BorrowSource_2
						? "robKaNiuBorrow":"robBorrow");
			LogerUtil.log("paramRob.getMethod:" + paramRob.getMethod());
			//调用 卡牛接单处理
			if(sourceType ==BorrowErrorCode.BorrowSource_2 && 
					borrowInfo.get("telephone").toString().indexOf("***")>0){
				AppParam updateParam = new AppParam();
				updateParam.setService("kaniuService");
				updateParam.setMethod("recieveData");
				updateParam.addAttr("orderId", borrowInfo.get("customerId"));
				updateParam.addAttr("borrowId", borrowId);
				updateParam.setRmiServiceName(AppProperties
						.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
				RemoteInvoke.getInstance().call(updateParam);
				LogerUtil.log("BorrowSource_2 recieveData:" +  borrowId);
			}
			paramRob.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
			result = RemoteInvoke.getInstance().call(paramRob);
			//调用扣除
			if(result.isSuccess()){
				ScoreUtils.scoreChangeCust(customerId.toString(), -needScore,
					Integer.valueOf(CustConstant.SCORE_TYPE_13), "抢单扣除积分");
			}
			return result;
		}
		throw new AppException(BorrowErrorCode.BORROW_HAD_ROBED);
	}
	
	
	

	/**
	 * 免费抢单（直借）
	 * @param params
	 * @return
	 */
	public static AppResult freeRobBorrow(AppParam params) {
		AppResult result = new AppResult();
		if(StringUtils.isEmpty(params.getAttr("customerId")) || StringUtils.isEmpty(params.getAttr("borrowId"))){
			result.setSuccess(Boolean.FALSE);
			result.setMessage("没有选择要处理的直借信息");
			return result;
		}
		String customerId = params.getAttr("customerId").toString();
		Map<String,Object> custInfo = CustomerIdentify.getCustIdentify(customerId.toString());
		String cardStatus = StringUtil.objectToStr(custInfo.get("cardStatus"));
		if(!"1".equals(cardStatus)){
			result.setMessage("您的工作认证尚未通过审核，不能进行免费抢单");
			result.setSuccess(false);
			return result;
		}
		int freeNum = BorrowRobUtils.getCurentFreeNumber(new Date());
		if (freeNum <= 0) {
			result.setMessage("现在已经没有免费抢单名额了!");
			result.setSuccess(false);
			return result;
		}
		if(!BorrowUtils.haveFreeRob(customerId)){
			result.setMessage("您今天已免费抢过单，不能再进行免费抢单");
			result.setSuccess(false);
			return result;
		}
		boolean isVip = CustInfoUtil.isVip(customerId.toString());
		int freeCount = 0;
		if(!isVip){
			// 非会员总共只有三次免费抢单机会
			AppResult countResult = BorrowUtils.queryFreeCount(customerId);
			freeCount = Integer.valueOf(countResult.getAttr("freeRobCount").toString());
			if(freeCount <= 0){
				// 非会员三次免费机会用完给提示
				result.putAttr("threeTime", "1");
				result.setMessage("非会员三次免费机会已用完！");
				result.setSuccess(false);
				return result;
			}
		}
		
		if(!"1".equals(custInfo.get("status").toString())){
			throw new SysException("对不起，您当前信息状态不正确，无法提供该功能");
		}
		Object borrowId = params.getAttr("borrowId");
		AppParam queryBorrow = new AppParam();
		queryBorrow.setService("daiBorrowService");
		queryBorrow.setMethod("query");
		queryBorrow.addAttr("borrowId",borrowId);
		queryBorrow.addAttr("status","0");
		queryBorrow.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
		AppResult borrowResult = RemoteInvoke.getInstance().call(queryBorrow);
		if(borrowResult.getRows().size()==1){
			Map<String,Object> borrowInfo = borrowResult.getRow(0);
			int sourceType = Integer.valueOf(borrowInfo.get("sourceType").toString());
			int robType = Integer.valueOf(borrowInfo.get("robType").toString());
			if (BorrowErrorCode.RobType_1 != robType) {
				result.setSuccess(Boolean.FALSE);
				result.setMessage("该单不能免费抢，只能通过积分或微信购买！");
				return result;
			}
			if(sourceType ==1 && customerId.equals(borrowInfo.get("customerId").toString())){
				result.setSuccess(Boolean.FALSE);
				result.setMessage("不能抢自己的借款");
				return result;
			}
			//调用 抢单逻辑
			AppParam paramRob = new AppParam();
			paramRob.addAttr("customerId", customerId);
			paramRob.addAttr("borrowId",borrowId);
			paramRob.addAttr("sourceType",sourceType);
			paramRob.addAttr("robWay",BorrowErrorCode.RobType_1);
			//调用 卡牛接单处理
			if(sourceType ==BorrowErrorCode.BorrowSource_2 && 
					borrowInfo.get("telephone").toString().indexOf("***")>0){
				AppParam updateParam = new AppParam();
				updateParam.setService("kaniuService");
				updateParam.setMethod("recieveData");
				updateParam.addAttr("orderId", borrowInfo.get("customerId"));
				updateParam.addAttr("borrowId", borrowId);
				updateParam.setRmiServiceName(AppProperties
						.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
				RemoteInvoke.getInstance().call(updateParam);
			}
			
			paramRob.setService("freeRobRecordService");
			paramRob.setMethod("robBorrow");
			paramRob.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
			result = RemoteInvoke.getInstance().call(paramRob);
			// 减少非会员的免费抢单次数
			if(result.isSuccess() && !isVip && freeCount > 0){
				AppParam updateParam = new AppParam();
				updateParam.setService("vipFreeService");
				updateParam.setMethod("update");
				updateParam.addAttr("freeRobCount", freeCount-1);
				updateParam.addAttr("customerId", customerId);
				updateParam.setRmiServiceName(AppProperties.
						getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_cust));
				RemoteInvoke.getInstance().call(updateParam);
			}
			
			if(result.isSuccess()){
				
				//同步busiIn折扣
				Map<String, Object> selParamsMap = new HashMap<String, Object>();
				selParamsMap.put("customerId", customerId);
				selParamsMap.put("ticketId", null);
				selParamsMap.put("applyId", borrowInfo.get("applyId"));
				selParamsMap.put("channelDetail", borrowInfo.get("sourceName"));
				selParamsMap.put("borrowId", borrowId);
				selParamsMap.put("robWay", BorrowErrorCode.RobType_1);
				selParamsMap.put("receiveId", result.getAttr("receiveId"));
				selParamsMap.put("discount",1);
				selParamsMap.put("costScore", 0);
				selParamsMap.put("costPrice",0);
				selParamsMap.put("robTime", result.getAttr("robTime"));
				selParamsMap.put("service", "custAmountService");
				selParamsMap.put("method", "updateDiscount");
				selParamsMap.put("rmiServiceName", AppProperties
						.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_cust));
				try {
					RmiServiceSend messageSend = SpringAppContext.getBean(RmiServiceSend.class);
					messageSend.sendExecuteMessage(selParamsMap);
				} catch (Exception e) {
					LogerUtil.error(BorrowRobUtils.class, e, "同步busiIn折扣 error");
				}
			}
			return result;
		}
		throw new AppException(BorrowErrorCode.BORROW_HAD_ROBED);
	}
	
	
	/**
	 * 新版免费抢单处理
	 * @param params
	 * @return
	 */
	public static AppResult freeRobHandle(AppParam params) {
		AppResult result = new AppResult();
		String customerId = StringUtil.getString(params.getAttr("customerId"));
		Object borrowId = params.getAttr("borrowId");
		if(StringUtils.isEmpty(customerId) || StringUtils.isEmpty(borrowId)){
			result.setSuccess(false);
			result.setMessage("缺少必要参数");
			return result;
		}
		// 判断用户是否工作认证
		Map<String,Object> custInfo = CustomerIdentify.getCustIdentify(customerId);
		String cardStatus = StringUtil.getString(custInfo.get("cardStatus"));
		String custStatus = StringUtil.getString(custInfo.get("status"));
		if(!"1".equals(cardStatus)){
			result.setMessage("您的工作认证尚未通过审核，不能进行免费抢单");
			result.setSuccess(false);
			return result;
		}
		if(!"1".equals(custStatus)){
			result.setMessage("对不起，您当前信息状态不正确，无法提供该功能");
			result.setSuccess(false);
			return result;
		}
		
		// 判断当轮剩余单量是否足够
		String[] timeCfg = BorrowUtils.getFreeRobTimeCfg();
		int[] fistRound =  ScoreUtil.transferToInt(timeCfg[0].split("-"));
		int[] secondRound = ScoreUtil.transferToInt(timeCfg[1].split("-"));
		int[] thirdRound = ScoreUtil.transferToInt(timeCfg[2].split("-"));
		int hour = Calendar.getInstance().get(Calendar.HOUR_OF_DAY);
		int freeNum = 0;// 免费剩余单量
		int roundNum = 0;// 当前轮数
		if (hour == fistRound[1]) {
			freeNum = BorrowRobUtils.getFreeRobNumber(new Date(),fistRound[0]);// 查询当轮剩余单量
			roundNum = fistRound[0];
		} else if (hour == secondRound[1]) {
			freeNum = BorrowRobUtils.getFreeRobNumber(new Date(),secondRound[0]);
			roundNum = secondRound[0];
		} else if (hour == thirdRound[1]) {
			freeNum = BorrowRobUtils.getFreeRobNumber(new Date(),thirdRound[0]);
			roundNum = thirdRound[0];
		}
		if (freeNum <= 0) {
			result.setMessage("现在已经没有免费抢单名额了!");
			result.setSuccess(false);
			return result;
		}
		// 判断用户当天是否已抢过免费单子
		if(!BorrowUtils.haveFreeRob(customerId)){
			result.setMessage("您今天已免费抢过单，不能再进行免费抢单");
			result.setSuccess(false);
			return result;
		}
		boolean isVip = CustInfoUtil.isVip(customerId.toString());
		int freeCount = 0;
		if(!isVip){
			// 非会员总共只有三次免费抢单机会
			AppResult countResult = BorrowUtils.queryFreeCount(customerId);
			freeCount = Integer.valueOf(countResult.getAttr("freeRobCount").toString());
			if(freeCount <= 0){
				// 非会员三次免费机会用完给提示
				result.putAttr("threeTime", "1");
				result.setMessage("非会员三次免费机会已用完！");
				result.setSuccess(false);
				return result;
			}
		}
		
		// 查询直借单子信息
		AppParam queryBorrow = new AppParam();
		queryBorrow.setService("daiBorrowService");
		queryBorrow.setMethod("query");
		queryBorrow.addAttr("borrowId",borrowId);
		queryBorrow.addAttr("status","0");
		queryBorrow.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
		AppResult borrowResult = RemoteInvoke.getInstance().callNoTx(queryBorrow);
		if (borrowResult.getRows().size() == 0) {
			result.setSuccess(Boolean.FALSE);
			result.setMessage("单子记录不存在！");
			return result;
		}
		Map<String,Object> borrowInfo = borrowResult.getRow(0);
		int sourceType = Integer.valueOf(borrowInfo.get("sourceType").toString());
		int robType = Integer.valueOf(borrowInfo.get("robType").toString());
		if (BorrowErrorCode.RobType_1 != robType) {
			result.setSuccess(Boolean.FALSE);
			result.setMessage("该单不能免费抢，可通过余额购买！");
			return result;
		}
		if(sourceType ==1 && customerId.equals(borrowInfo.get("customerId").toString())){
			result.setSuccess(Boolean.FALSE);
			result.setMessage("不能抢自己的借款");
			return result;
		}
		//调用 抢单逻辑
		AppParam paramRob = new AppParam();
		paramRob.addAttr("customerId", customerId);
		paramRob.addAttr("borrowId",borrowId);
		paramRob.addAttr("sourceType",sourceType);
		paramRob.addAttr("roundNum",roundNum);
		paramRob.addAttr("robWay",BorrowErrorCode.RobType_1);
		//调用 卡牛接单处理
		if(sourceType ==BorrowErrorCode.BorrowSource_2 && 
				borrowInfo.get("telephone").toString().indexOf("*")!=-1){
			AppParam updateParam = new AppParam("thirdSaleDataService", "recieveData");
			updateParam.addAttr("recordId", borrowInfo.get("customerId"));
			updateParam.addAttr("borrowId", borrowId);
			updateParam.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
			RemoteInvoke.getInstance().call(updateParam);
			LogerUtil.log("BorrowSource_2 recieveData:" +  borrowId);
		}
		
		paramRob.setService("freeRobRecordService");
		paramRob.setMethod("freeRobHandle");
		paramRob.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
		result = RemoteInvoke.getInstance().call(paramRob);
		// 减少非会员的免费抢单次数
		if(result.isSuccess() && !isVip && freeCount > 0){
			AppParam updateParam = new AppParam();
			updateParam.setService("vipFreeService");
			updateParam.setMethod("update");
			updateParam.addAttr("freeRobCount", freeCount-1);
			updateParam.addAttr("customerId", customerId);
			updateParam.setRmiServiceName(AppProperties.
					getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_cust));
			RemoteInvoke.getInstance().call(updateParam);
		}
		
		if(result.isSuccess()){
			//同步busiIn折扣
			Map<String, Object> selParamsMap = new HashMap<String, Object>();
			selParamsMap.put("customerId", customerId);
			selParamsMap.put("ticketId", null);
			selParamsMap.put("applyId", borrowInfo.get("applyId"));
			selParamsMap.put("channelDetail", borrowInfo.get("sourceName"));
			selParamsMap.put("borrowId", borrowId);
			selParamsMap.put("robWay", BorrowErrorCode.RobType_1);
			selParamsMap.put("receiveId", result.getAttr("receiveId"));
			selParamsMap.put("discount",1);
			selParamsMap.put("costScore", 0);
			selParamsMap.put("costPrice",0);
			selParamsMap.put("robTime", result.getAttr("robTime"));
			selParamsMap.put("service", "custAmountService");
			selParamsMap.put("method", "updateDiscount");
			selParamsMap.put("rmiServiceName", AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_cust));
			try {
				RmiServiceSend messageSend = SpringAppContext.getBean(RmiServiceSend.class);
				messageSend.sendExecuteMessage(selParamsMap);
			} catch (Exception e) {
				LogerUtil.error(BorrowRobUtils.class, e, "同步busiIn折扣 error");
			}
		}
		return result;
	}
	
	/**
	 * 使用余额抢单
	 * @param params
	 * @return
	 */
	public static AppResult robByAmount(AppParam params){
		if(StringUtils.isEmpty(params.getAttr("customerId")) || StringUtils.isEmpty(params.getAttr("borrowId"))){
			return CustomerUtil.retErrorMsg("没有选择要处理的直借信息");
		}
		needUpdate(params);
		String customerId = params.getAttr("customerId").toString();
		// 判断状态
		Map<String,Object> custInfo = CustomerIdentify.getCustIdentify(customerId);
		String cardStatus = StringUtil.objectToStr(custInfo.get("cardStatus"));
		if(!"1".equals(cardStatus)){
			throw new SysException("您的工作认证尚未通过审核，不能进行抢单操作");
		}
		if(!"1".equals(custInfo.get("status").toString())){
			throw new SysException("对不起，您当前信息状态不正确，无法提供该功能");
		}
		// 判断是否会员
		int robWay = StringUtils.isEmpty(params.getAttr("robWay")) ? BorrowErrorCode.RobType_5
				: Integer.parseInt(params.getAttr("robWay").toString());
		boolean isVip = CustInfoUtil.isVip(customerId);
		if(robWay==7 && !isVip){
			throw new SysException("特价抢单，非会员不可使用余额抢单");
		}
		if(robWay == 7 && !hasRobChance(customerId)){//会员特价抢单
			return CustomerUtil.retErrorMsg("您今天已经抢到了"+SysParamsUtil.getIntParamByKey("maxSpecialRobCount", 10)+"单特价单，不能参与特价抢单了");
		}
		String borrowId = params.getAttr("borrowId").toString();
		
		AppParam queryBorrow = new AppParam();
		queryBorrow.addAttr("borrowId",borrowId);
		queryBorrow.addAttr("status","0");
		Map<String,Object> borrowInfo = BorrowUtils.queryBorrowInfo(queryBorrow);
		
		if(borrowInfo == null || borrowInfo.isEmpty()){
			throw new AppException(BorrowErrorCode.BORROW_HAD_ROBED);
		}
		
		Map<String, Object> amtMap = CustAmountUtil.getCustAmount(customerId);
		double usableAmount = Double.parseDouble(amtMap.get("usableAmount").toString());
		int sourceType = Integer.valueOf(borrowInfo.get("sourceType").toString());
		BigDecimal priceObj = new BigDecimal(borrowInfo.get("price").toString());
		double price = priceObj.divide(new BigDecimal(100)).doubleValue();
		
		int specialLimitPrice = SysParamsUtil.getIntParamByKey("specialLimitPrice", 10); // 会员特价单上限
		if(robWay == 7 && price > specialLimitPrice){
			price = specialLimitPrice;
		}
		
		// 使用了打折券
		String ticketId = StringUtil.getString(params.getAttr("ticketId"));
		Map<String, Object> ticketInfoMap = useTicket(customerId, price, ticketId);
		double robSeniorCust = NumberUtil.getDouble(ticketInfoMap.get("robSeniorCust"),0);// 是否可抢优质单：0-否，1-是
		double robDiffCtiy = NumberUtil.getDouble(ticketInfoMap.get("robDiffCtiy"),0);// 是否可抢异地城市单子：0-否，1-是
		AppResult useFreeTicketResult = useCustFreeTicketConfig(ticketId,customerId, borrowInfo, robSeniorCust,robDiffCtiy);
		if(!useFreeTicketResult.isSuccess()){
			return useFreeTicketResult;
		}
		
		double saveAmount = NumberUtil.getDouble(ticketInfoMap.get("savePrice"),0);			//省的金额
		price = price - saveAmount;
		if(usableAmount < price){
			return CustomerUtil.retErrorMsg("您当前账户余额不足!");
		}
		
		if(sourceType ==1 && customerId.equals(borrowInfo.get("customerId").toString())){
			return CustomerUtil.retErrorMsg("不能抢自己的借款!");
		}
		
		AppResult result = new AppResult();
		//调用 抢单逻辑
		AppParam paramRob = new AppParam();
		paramRob.addAttr("customerId", customerId);
		paramRob.addAttr("borrowId",borrowId);
		paramRob.addAttr("price",price*100);
		paramRob.addAttr("robWay", robWay);
		paramRob.addAttr("ticketId", ticketId);
		paramRob.addAttr("saveAmount", saveAmount*100);
		paramRob.addAttr("sourceName", borrowInfo.get("sourceName"));
		paramRob.addAttr("discount", amtMap.get("discount"));
		paramRob.setService("daiBorrowReService");
		paramRob.setMethod("robBorrow");
		
		LogerUtil.log("paramRob.getMethod:" + paramRob.getMethod());
		//调用 卡牛接单处理
		if(sourceType ==BorrowErrorCode.BorrowSource_2 && 
				borrowInfo.get("telephone").toString().indexOf("*")!=-1){
			AppParam updateParam = new AppParam("thirdSaleDataService", "recieveData");
			updateParam.addAttr("recordId", borrowInfo.get("customerId"));
			updateParam.addAttr("borrowId", borrowId);
			updateParam.addAttr("sucPrice", price);
			updateParam.addAttr("discount", amtMap.get("discount"));
			updateParam.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
			RemoteInvoke.getInstance().call(updateParam);
			LogerUtil.log("BorrowSource_2 recieveData:" +  borrowId);
		}
		paramRob.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
		result = RemoteInvoke.getInstance().call(paramRob);
		// 奖励积分
		int rewardScore = 0;
		if(result.isSuccess()){
			// 修改抢单券状态
			if(!StringUtils.isEmpty(ticketId)){
				AppParam ticketParams = new AppParam();
				ticketParams.setService("custTicketService");
				ticketParams.setMethod("update");
				ticketParams.addAttr("customerId", customerId);
				ticketParams.addAttr("ticketId", ticketId);
				ticketParams.addAttr("useTime", new Date());
				ticketParams.addAttr("status", "2");
				ticketParams.addAttr("fromStatus", "1");
				ticketParams.setRmiServiceName(AppProperties
						.getProperties(DuoduoConstant.RMI_SERVICE_START + "cust"));
				RemoteInvoke.getInstance().call(ticketParams);
			}
			//扣除用户余额
			AppParam amtParams = new AppParam();
			amtParams.addAttr("customerId", customerId);
			amtParams.addAttr("amount", -price);
			amtParams.addAttr("fundType", FundConstant.FundType_AMT_ROB);
			amtParams.addAttr("orderId", borrowId);
			amtParams.addAttr("recordDesc", "余额抢单消费");
			CustAmountUtil.updateAmount(amtParams);
			
			// 抢单送积分,优质单不送
			rewardScore = robSendScore(customerId, price);
			
			AppParam afterParam = new AppParam();
			afterParam.addAttr("customerId", customerId);
			afterParam.addAttr("borrowId", borrowId);
			afterParam.addAttr("ticketId", ticketId);
			afterParam.addAttr("robPrice", price);
			afterParam.addAttr("robWay", robWay);
			afterParam.addAttr("receiveId",  result.getAttr("receiveId"));
			afterParam.addAttr("applyId", borrowInfo.get("applyId"));
			afterParam.addAttr("sourceName", borrowInfo.get("sourceName"));
			afterParam.addAttr("discount", amtMap.get("discount"));
			afterParam.addAttr("robTime", result.getAttr("robTime"));
			afterParam.addAttr("notSelfCity", useFreeTicketResult.getAttr("notSelfCity"));
			afterRobSuccess(afterParam);
		}
		result.putAttr("robPrice", price);// 单子价格
		result.putAttr("rewardScore", rewardScore);// 奖励积分
		result.putAttr("saveAmount", saveAmount);// 节省金额
		return result;
	}
	
	/**
	 * 自动抢单
	 * @param params
	 * @return
	 */
	public static AppResult autoRobByAmount(String customerId, Object ticketId, double saveAmount, Map<String,Object> borrowInfo){
		// 判断状态
		Map<String,Object> custInfo = CustomerIdentify.getCustIdentify(customerId);
		String cardStatus = StringUtil.objectToStr(custInfo.get("cardStatus"));
		if(!"1".equals(cardStatus)){
			throw new SysException("您的工作认证尚未通过审核，不能进行抢单操作");
		}
		if(!"1".equals(custInfo.get("status").toString())){
			throw new SysException("对不起，您当前信息状态不正确，无法提供该功能");
		}
		// 判断是否会员
		int robWay = BorrowErrorCode.RobType_6;
		
		Map<String, Object> amtMap = CustAmountUtil.getCustAmount(customerId);
		double usableAmount = Double.parseDouble(amtMap.get("usableAmount").toString());
		int sourceType = Integer.valueOf(borrowInfo.get("sourceType").toString());
		double price = NumberUtil.getDouble(borrowInfo.get("price"), 0);
		
		price = price - saveAmount;
		if(usableAmount < price){
			return CustomerUtil.retErrorMsg("您当前账户余额不足!");
		}
		
		if(sourceType ==1 && customerId.equals(borrowInfo.get("customerId").toString())){
			return CustomerUtil.retErrorMsg("不能抢自己的借款!");
		}
		
		AppResult result = new AppResult();
		//调用 抢单逻辑
		String borrowId = borrowInfo.get("borrowId").toString();
		AppParam paramRob = new AppParam();
		paramRob.addAttr("customerId", customerId);
		paramRob.addAttr("borrowId",borrowId);
		paramRob.addAttr("price",price*100);
		paramRob.addAttr("robWay", robWay);
		paramRob.addAttr("ticketId", ticketId);
		paramRob.addAttr("saveAmount", saveAmount*100);
		paramRob.addAttr("discount", amtMap.get("discount"));
		paramRob.setService("daiBorrowReService");
		paramRob.setMethod("robBorrow");
		
		LogerUtil.log("paramRob.getMethod:" + paramRob.getMethod());
		//调用 卡牛接单处理
		if(sourceType ==BorrowErrorCode.BorrowSource_2 && 
				borrowInfo.get("telephone").toString().indexOf("*")!=-1){
			AppParam updateParam = new AppParam("thirdSaleDataService", "recieveData");
			updateParam.addAttr("recordId", borrowInfo.get("customerId"));
			updateParam.addAttr("borrowId", borrowId);
			updateParam.addAttr("sucPrice", price);
			updateParam.addAttr("discount", amtMap.get("discount"));
			updateParam.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
			RemoteInvoke.getInstance().call(updateParam);
			LogerUtil.log("BorrowSource_2 recieveData:" +  borrowId);
		}
		paramRob.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
		result = RemoteInvoke.getInstance().call(paramRob);
		// 奖励积分
		@SuppressWarnings("unused")
		int rewardScore = 0;
		if(result.isSuccess()){
			// 修改抢单券状态
			if(!StringUtils.isEmpty(ticketId)){
				AppParam ticketParams = new AppParam();
				ticketParams.setService("custTicketService");
				ticketParams.setMethod("update");
				ticketParams.addAttr("customerId", customerId);
				ticketParams.addAttr("ticketId", ticketId);
				ticketParams.addAttr("useTime", new Date());
				ticketParams.addAttr("status", "2");
				ticketParams.addAttr("fromStatus", "1");
				ticketParams.setRmiServiceName(AppProperties
						.getProperties(DuoduoConstant.RMI_SERVICE_START + "cust"));
				RemoteInvoke.getInstance().call(ticketParams);
			}
			//扣除用户余额
			AppParam amtParams = new AppParam();
			amtParams.addAttr("customerId", customerId);
			amtParams.addAttr("amount", -price);
			amtParams.addAttr("fundType", FundConstant.FundType_AMT_ROB);
			amtParams.addAttr("orderId", borrowId);
			amtParams.addAttr("recordDesc", "自动抢单消费");
			if(saveAmount > 0){
				amtParams.addAttr("recordDesc", "自动抢单消费(原价"+ borrowInfo.get("price") +"元)");
			}
			CustAmountUtil.updateAmount(amtParams);
			
			// 抢单送积分,优质单不送
			rewardScore = robSendScore(customerId, price);
			
			AppParam afterParam = new AppParam();
			afterParam.addAttr("customerId", customerId);
			afterParam.addAttr("borrowId", borrowId);
			afterParam.addAttr("ticketId", ticketId);
			afterParam.addAttr("robPrice", price);
			afterParam.addAttr("robWay", robWay);
			afterParam.addAttr("receiveId",  result.getAttr("receiveId"));
			afterParam.addAttr("applyId", borrowInfo.get("applyId"));
			afterParam.addAttr("sourceName", borrowInfo.get("sourceName"));
			afterParam.addAttr("discount", amtMap.get("discount"));
			afterParam.addAttr("robTime", result.getAttr("robTime"));
			afterParam.addAttr("notSelfCity", null);
			afterRobSuccess(afterParam);
		}
		result.putAttr("robPrice", price);
		return result;
	}
	
	/**
	 * 余额抢单成功后的处理
	 */
	private static void afterRobSuccess(AppParam afterParam){
		String customerId = afterParam.getAttr("customerId").toString();
		String borrowId = afterParam.getAttr("borrowId").toString();
		Object ticketId = afterParam.getAttr("ticketId");
		
		double price = Double.valueOf(afterParam.getAttr("robPrice").toString());
		Map<String, Object> custInfo = CustomerIdentify.getCustIdentify(customerId);
		String telephone = StringUtil.getString(custInfo.get("telephone"));
		
		//同步busiIn折扣
		if (!BorrowHandleUtil.isTestTelephone(telephone)){
			//给贷款客户推送短信
			BorrowUtils.sendMessage(borrowId);
			
			Map<String, Object> selParamsMap = new HashMap<String, Object>();
			selParamsMap.put("customerId", customerId);
			selParamsMap.put("ticketId", ticketId);
			selParamsMap.put("applyId", afterParam.getAttr("applyId"));
			selParamsMap.put("channelDetail", afterParam.getAttr("sourceName"));
			selParamsMap.put("borrowId", borrowId);
			selParamsMap.put("robWay", afterParam.getAttr("robWay"));
			selParamsMap.put("receiveId", afterParam.getAttr("receiveId"));
			selParamsMap.put("discount", afterParam.getAttr("discount"));
			selParamsMap.put("costScore", 0);
			selParamsMap.put("costPrice",price*100);
			selParamsMap.put("robTime", afterParam.getAttr("robTime"));
			selParamsMap.put("service", "custAmountService");
			selParamsMap.put("method", "updateDiscount");
			selParamsMap.put("rmiServiceName", AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_cust));
			try {
				RmiServiceSend messageSend = SpringAppContext.getBean(RmiServiceSend.class);
				messageSend.sendExecuteMessage(selParamsMap);
			} catch (Exception e) {
				LogerUtil.error(BorrowRobUtils.class, e, "同步busiIn折扣 error");
			}
		}
		
		BusiCustUtil.setBusiCust(custInfo, "robNum");
		
		//抢单金额大于0赠送免单券
		if (price > 0 && StringUtils.isEmpty(afterParam.getAttr("notSelfCity"))) {
			AppParam ticketParam = new AppParam();
			ticketParam.addAttr("customerId", customerId);
			ticketParam.addAttr("borrowId", borrowId);
			BorrowRobUtils.presentFreeTicket(ticketParam);
		}
		
		// 活动时间内首次充值后， 连续*天抢单总金额达*元，可获得*张免单券
		Date startDate = DateUtil.toDateByString(
				SysParamsUtil.getStringParamByKey(SysParamsUtil.KEY_invite_530_start_date, "2018-05-15"),
				DateUtil.DATE_PATTERN_YYYY_MM_DD);
		if(new Date().getTime() > DateUtil.getNextDay(startDate, 3).getTime()){
			String registerTime = StringUtil.getString(custInfo.get("registerTime"));
			// 老用户：	         连续3天抢单总金额达500元，    奖励2张5折抢单券 或 连续7天抢单总金额达800元，奖励4张5折抢单券（赠送的券不限订单金额，可抢优质单，有效期3天）每人只奖励一次
			// 有邀请人的新用户：连续3天抢单总金额达500元，可获得2张5折抢单券 或 连续7天抢单总金额达800元，可获得4张5折抢单券，送的券不限订单金额，不限订单类型，有效期3天 每人只奖励一次 
			if((CustInviteUtil.judgeRegisterTime(registerTime)
					&& !StringUtils.isEmpty(custInfo.get("referer")))
					|| !CustInviteUtil.judgeRegisterTime(registerTime)){
				BorrowRobUtils.continuousRobReward(customerId);
			}
		}
	}
	
	/**
	 * 抢优质单
	 * @param params
	 * @return
	 */
	public static AppResult robSenior(AppParam params){
		AppResult result = new AppResult();
		if(!SysParamsUtil.getBoleanByKey("robSeniorStatus", false)){
			return CustomerUtil.retErrorMsg("该功能暂未开放,请耐心等待。。。!");
		}
		needUpdate(params);
		Object applyId = params.getAttr("applyId");
		if(StringUtils.isEmpty(params.getAttr("customerId")) || StringUtils.isEmpty(applyId)){
			return CustomerUtil.retErrorMsg("没有选择要处理的优质单信息");
		}
		String customerId = params.getAttr("customerId").toString();
		// 判断状态
		Map<String,Object> custInfo = CustomerIdentify.getCustIdentify(customerId);
		if(!"1".equals(custInfo.get("status").toString())){
			throw new SysException("对不起，您当前信息状态不正确，无法提供该功能");
		}
		// 是否可抢优质单
		result = BorrowApplyUtils.isCanRob(customerId);
		if(!result.isSuccess()){
			return result;
		}

		Map<String,Object> custRight = KfUserUtil.getUserRight(customerId);
		int freeSeniorRob = NumberUtil.getInt(custRight.get("freeSeniorRob"), 0);
		double price =0.00d;
		if(freeSeniorRob == 0){//不是免费抢优质单
			// 判断余额
			Map<String, Object> amtMap = CustAmountUtil.getCustAmount(customerId);
			double seniorAmount = NumberUtil.getDouble(amtMap.get("seniorAmount").toString(), 0);
			// 优质单价格
			Map<String,Object> applyInfo = BorrowApplyUtils.queryBaseInfo(applyId);
			String cityName = StringUtil.getString(applyInfo.get("cityName"));
			boolean isKf = StringUtils.isEmpty(applyInfo.get("lastKf")) ? false : true;
			price = SeniorCfgUtils.getSeniorPrice(cityName, isKf);
			if(seniorAmount < price){
				return CustomerUtil.retErrorMsg("您当前账户余额不足!");
			}
		}
		
		AppParam param = new AppParam("borrowApplyService", "robSenior");
		param.addAttr("applyId", applyId);
		param.addAttr("price", price);
		param.addAttr("robWay", freeSeniorRob ==1 ? BorrowConstant.RobWay_1 : BorrowConstant.RobWay_5);
		param.addAttr("customerId", customerId);
		param.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_busi_in));
		result = RemoteInvoke.getInstance().call(param);
		if(result.isSuccess() && price >0){
			// 扣除用户抢优质余额
			AppParam amtParams = new AppParam();
			amtParams.addAttr("customerId", customerId);
			amtParams.addAttr("amount", -price);
			amtParams.addAttr("fundType", FundConstant.FundType_Senior_ROB);
			amtParams.addAttr("orderId", applyId);
			amtParams.addAttr("recordDesc", "抢优质单消费");
			CustAmountUtil.updateSeniorAmount(amtParams);
		}
		return result;
	}
	
	/**
	 * 微信支付成功
	 * @param params
	 * @return
	 */
	public static AppResult wxpaySuccess(AppParam params) {
		Object orderId = params.getAttr("orderId");
		if (StringUtils.isEmpty(orderId)) {
			throw new AppException(DuoduoError.UPDATE_NO_PARAMS);
		}
		
		// 查询订单信息
		AppParam queryParam = new AppParam();
		queryParam.setService("daiWxpayService");
		queryParam.setMethod("query");
		queryParam.addAttr("orderId", orderId);
		queryParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
		AppResult queryResult = RemoteInvoke.getInstance().call(queryParam);
		if(queryResult.getRows().size() == 0){
			throw new AppException(DuoduoError.UPDATE_DATA_IS_NOTEXISTS);
		}
		Map<String,Object> orderInfo = queryResult.getRow(0);
		Object customerId = orderInfo.get("customerId");
		Object borrowId = orderInfo.get("borrowId");
		int sourceType = Integer.valueOf(orderInfo.get("sourceType").toString());
		
		//调用 抢单逻辑
		AppParam paramRob = new AppParam();
		paramRob.addAttr("customerId", customerId);
		paramRob.addAttr("borrowId", borrowId);
		paramRob.addAttr("fromStatus","4");
		paramRob.setService("daiBorrowReService");
		paramRob.addAttr("price", orderInfo.get("amount"));
		paramRob.addAttr("robWay",orderInfo.get("robWay"));
		paramRob.setMethod(
				sourceType ==BorrowErrorCode.BorrowSource_2? "robKaNiuBorrow":"robBorrow");
		paramRob.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
		AppResult robResult = new AppResult();
		try{
			//调用 卡牛接单处理
			if(sourceType == BorrowErrorCode.BorrowSource_2){
				AppParam queryBorrow = new AppParam();
				queryBorrow.setService("daiBorrowService");
				queryBorrow.setMethod("query");
				queryBorrow.addAttr("borrowId",borrowId);
				queryBorrow.setRmiServiceName(AppProperties
						.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
				AppResult borrowResult = RemoteInvoke.getInstance().call(queryBorrow);
				if(borrowResult.getRow(0).get("telephone").toString().indexOf("*")>0){
					AppParam updateParam = new AppParam();
					updateParam.setService("kaniuService");
					updateParam.setMethod("recieveData");
					updateParam.addAttr("orderId", borrowResult.getRow(0).get("customerId"));
					updateParam.addAttr("borrowId", borrowId);
					updateParam.setRmiServiceName(AppProperties
							.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
					RemoteInvoke.getInstance().call(updateParam);
				}
			}
			robResult = RemoteInvoke.getInstance().call(paramRob);
		}catch (Exception e){
			LogerUtil.error(BorrowRobUtils.class, e, "wxpaySuccess");
			robResult.setSuccess(Boolean.FALSE);
			robResult.setMessage(e.getMessage());
			BorrowRobMessage.failureRob(customerId.toString(), borrowId.toString());
		}
		// 修改订单支付状态为成功
		AppParam updateParam = new AppParam();
		updateParam.setService("daiWxpayService");
		updateParam.setMethod("update");
		updateParam.addAttr("status", "1");
		updateParam.addAttr("fromStatus", "0");
		updateParam.addAttr("orderId", orderId);
		updateParam.addAttr("errCode", robResult.isSuccess());
		updateParam.addAttr("errCodeDesc", robResult.getMessage());
		updateParam.addAttr("transactionId", params.getAttr("transactionId"));
		updateParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
		RemoteInvoke.getInstance().call(updateParam);
		
		//抢单成功修改个人抢单数据
		Map<String, Object> custInfo = CustomerIdentify.getCustIdentify(customerId.toString());
		if(robResult.isSuccess()){
			BusiCustUtil.setBusiCust(custInfo, "robNum");
		}
		return robResult;
	}
	
	/**
	 * 解锁借款项目
	 * @param borrowId
	 * @return
	 */
	public static AppResult unlockBorrow(Object borrowId) {
		AppParam unlockParam = new AppParam();
		unlockParam.setService("daiBorrowService");
		unlockParam.setMethod("update");
		unlockParam.addAttr("borrowId", borrowId);
		unlockParam.addAttr("status","0");
		unlockParam.addAttr("fromStatus","4");
		unlockParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
		return RemoteInvoke.getInstance().call(unlockParam);
	}
	
	/**
	 * 微信支付失败
	 * @param params
	 * @return
	 */
	public static AppResult wxpayFailed(AppParam params) {
		Object orderId = params.getAttr("orderId");
		if (StringUtils.isEmpty(orderId)) {
			throw new AppException(DuoduoError.UPDATE_NO_PARAMS);
		}
		
		// 解锁
		unlockBorrow(params.getAttr("borrowId"));
		
		// 修改订单支付状态为失败
		AppParam updateParam = new AppParam();
		updateParam.setService("daiWxpayService");
		updateParam.setMethod("update");
		updateParam.addAttr("errCode", params.getAttr("errCode"));
		updateParam.addAttr("errCodeDesc", params.getAttr("errCodeDesc"));
		updateParam.addAttr("status", "2");
		updateParam.addAttr("fromStatus", "0");
		updateParam.addAttr("openid", params.getAttr("openid"));
		updateParam.addAttr("orderId", orderId);
		updateParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
		RemoteInvoke.getInstance().call(updateParam);
		
		return new AppResult();
	}
	
	/**
	 * 微信支付
	 * @param params
	 * @return
	 */
	public static AppResult wxpayBorrow(AppParam params) {
		AppResult result = new AppResult();
		if(StringUtils.isEmpty(params.getAttr("customerId")) || 
				StringUtils.isEmpty(params.getAttr("borrowId"))){
			result.setSuccess(Boolean.FALSE);
			result.setMessage("没有选择要处理的直借信息");
			return result;
		}
		needUpdate(params);
		String customerId = params.getAttr("customerId").toString();
		//抢单成功修改个人抢单数据
		Map<String, Object> custInfo = CustomerIdentify.getCustIdentify(customerId.toString());
		if(StringUtils.isEmpty(custInfo.get("realName"))){
			result.setSuccess(Boolean.FALSE);
			result.setErrorCode(BorrowErrorCode.MISS_PERSON_INFO + "");
			result.setMessage("请先做个人信息认证才能抢单！");
			return result;
		}
		if(StringUtils.isEmpty(custInfo.get("company"))){
			result.setSuccess(Boolean.FALSE);
			result.setErrorCode(BorrowErrorCode.MISS_PERSON_INFO + "");
			result.setMessage("请先做个人信息认证才能抢单！");
			return result;
		}
		String cardStatus = StringUtil.objectToStr(custInfo.get("cardStatus"));
		if(!"1".equals(cardStatus)){
			result.setSuccess(Boolean.FALSE);
			result.setMessage("您的工作认证尚未通过审核，不能进行抢单操作");
			return result;
		}
		if(!"1".equals(custInfo.get("status").toString())){
			result.setSuccess(Boolean.FALSE);
			result.setMessage("对不起，您当前信息状态不正确，无法提供该功能");
			return result;
		}
		
		Object borrowId = params.getAttr("borrowId");
		
		// 锁定借款
		AppParam lockBorrow = new AppParam();
		lockBorrow.setService("daiBorrowService");
		lockBorrow.setMethod("update");
		lockBorrow.addAttr("borrowId",borrowId);
		lockBorrow.addAttr("status","4");
		lockBorrow.addAttr("fromStatus","0");
		lockBorrow.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
		AppResult lockResult = RemoteInvoke.getInstance().call(lockBorrow);
		if(lockResult.isSuccess() && ((int)lockResult.getAttr(DuoduoConstant.DAO_Update_SIZE)) == 0){
			throw new AppException(BorrowErrorCode.BORROW_HAD_ROBED);
		}
		AppParam queryBorrow = new AppParam();
		queryBorrow.setService("daiBorrowService");
		queryBorrow.setMethod("query");
		queryBorrow.addAttr("borrowId",borrowId);
		queryBorrow.addAttr("status","4");
		queryBorrow.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
		AppResult borrowResult = RemoteInvoke.getInstance().call(queryBorrow);
		Map<String,Object> borrowInfo = borrowResult.getRow(0);
		
		// 微信支付
		Object openid = params.getAttr("openid");
		Object gzhId = params.getAttr("gzhId");
		Object appId = params.getAttr("appId");
		Object apiKey = params.getAttr("apiKey");
		Object mchId = params.getAttr("mchId");
		boolean fromApp = false;
		if(!StringUtils.isEmpty(params.getAttr("fromApp"))){
			fromApp = true;
		}
		int robWay = 3;
		if(!StringUtils.isEmpty(params.getAttr("robWay"))){
			robWay = Integer.parseInt(params.getAttr("robWay").toString());
		}
		Integer totalFee = Integer.valueOf(borrowInfo.get("price").toString());
		Integer oldPrice = totalFee;
		if(robWay ==4){//高级抢单
			totalFee = SysParamsUtil.getIntParamByKey("seniorRobPrice", 6000);
		}
		if(robWay == 7 && !hasRobChance(customerId)){//会员特价抢单
			//一天只能抢十单特价单
			result.setSuccess(false);
			result.setMessage("您今天已经抢到了"+SysParamsUtil.getIntParamByKey("maxSpecialRobCount", 10)+"单特价单，不能参与特价抢单了");
			return result;
		}
		// 判断是否打折 0不打折、1打折
		int vipDiscountFlag = SysParamsUtil.getIntParamByKey("vipDiscountFlag", 1);
		// 判断是否会员
		boolean isVip = CustInfoUtil.isVip(customerId);
		if(vipDiscountFlag == 1 && isVip){
			double discount = Double.valueOf(SysParamsUtil.getStringParamByKey(
						"vipRobDiscount", "5"));
			double price = totalFee * discount / 10;
			BigDecimal discountPrice = new BigDecimal(price).setScale(2,RoundingMode.HALF_UP);
			// 抢单价格已经是以分为单位
			totalFee = discountPrice.intValue();
		}
		if(robWay == 7 && oldPrice >1000){
			totalFee = 1000;
		}
		AppParam orderParam = new AppParam();
		orderParam.setService("daiWxpayService");
		orderParam.setMethod("insert");
		orderParam.addAttr("openid", openid);
		String isApp = fromApp ? "1" : "0";
		orderParam.addAttr("isApp", isApp);
		orderParam.addAttr("customerId", customerId);
		orderParam.addAttr("sourceType", borrowInfo.get("sourceType"));
		orderParam.addAttr("amount", totalFee);
		orderParam.addAttr("borrowId", borrowId);
		orderParam.addAttr("status", "0");
		orderParam.addAttr("robWay", robWay);
		orderParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
		AppResult orderResult = RemoteInvoke.getInstance().call(orderParam);
		if(orderResult.isSuccess()){
			Object orderId = "d"+orderResult.getAttr("orderId");
			AppParam param = new AppParam();
			param.addAttr("appid", appId);
			param.addAttr("mch_id", mchId);
			param.addAttr("apiKey", apiKey);
			param.addAttr("openid", openid);
			param.addAttr("trade_type", "JSAPI");
			if(fromApp){
				param.addAttr("trade_type", "APP");
				orderId = "a" + orderResult.getAttr("orderId");
				param.removeAttr("openid");
			}
			String url = "https://phone.xxjr.com/busi";
			String notifyUrl = url + "/Thrid/Sys/wxPayDaiReceiver/" + gzhId;
			param.addAttr("notify_url", notifyUrl); 
			param.addAttr("body", "小小金融-信息服务费");
			param.addAttr("out_trade_no", orderId);
			param.addAttr("total_fee", totalFee);
			param.addAttr("attach", borrowId);
			Map<String, String> payInfo = new HashMap<String, String>();
			try {
				payInfo = WXRequestUtil.unifiedOrder(param);
			} catch (Exception e) {
				// 解锁
				unlockBorrow(borrowId);
				throw new SysException("微信支付请求失败！");
			}
			Object prepayId = payInfo.get("prepay_id");
			LogerUtil.error(BorrowRobUtils.class,"payInfo=:" + payInfo);
			if(StringUtils.isEmpty(prepayId)){
				result.setSuccess(false);
				result.setMessage("获取微信预支付订单失败，请稍后再试！");
				// 解锁
				unlockBorrow(borrowId);
				return result;
			}
			
			long timeStamp = System.currentTimeMillis() / 1000;
			String nonceStr =  WXUtil.getNonceStr();
			Map<String,Object> signParam = new HashMap<String, Object>();
			String sign = null;
			if(fromApp){
				signParam.put("appid", appId);
				signParam.put("prepayid", prepayId);
				signParam.put("partnerid", mchId);
				signParam.put("noncestr", nonceStr);
				signParam.put("package", "Sign=WXPay");
				signParam.put("timestamp", timeStamp);
				sign = WXUtil.getSignData(signParam, "sign", "&", apiKey.toString());
			}else{
				signParam.put("appId", appId);
				signParam.put("nonceStr", nonceStr);
				signParam.put("signType", "MD5");
				signParam.put("package", "prepay_id="+prepayId);
				signParam.put("timeStamp", timeStamp);
				sign = WXUtil.getSignData(signParam, "sign", "&", apiKey.toString());
			}
			Map<String,Object> payParams = new HashMap<String, Object>();
			payParams.put("orderId", orderResult.getAttr("orderId"));
			payParams.put("appId", appId);
			payParams.put("sign", sign);
			payParams.put("prepayId", prepayId);
			payParams.put("timeStamp", timeStamp);
			payParams.put("nonceStr", nonceStr);
			payParams.put("mchId", mchId);
			result.putAttr("payParams", payParams);
		}
		
		return result;
	}
	
	/**
	 * 抢单甩单
	 * @param params
	 * @return
	 */
	public static AppResult exchangeApply(AppParam params) {
		AppResult result = new AppResult();
		if(StringUtils.isEmpty(params.getAttr("customerId")) || StringUtils.isEmpty(params.getAttr("exchangeId"))){
			result.setSuccess(Boolean.FALSE);
			result.setMessage("没有选择要处理的直借信息");
			return result;
		}
		String customerId = params.getAttr("customerId").toString();
		String exchangeId = params.getAttr("exchangeId").toString();
		AppParam queryBorrow = new AppParam();
		queryBorrow.setService("daiExchangeService");
		queryBorrow.setMethod("query");
		queryBorrow.addAttr("exchangeId",exchangeId);
		queryBorrow.addAttr("status","1");
		queryBorrow.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
		AppResult borrowResult = RemoteInvoke.getInstance().call(queryBorrow);
		if(borrowResult.getRows().size()>0){
			Map<String,Object> borrowInfo = borrowResult.getRow(0);
			int score = Integer.valueOf(borrowInfo.get("score").toString());
			String exchangeCust = borrowInfo.get("customerId").toString();
			if(exchangeCust.equals(customerId)){
				result.setSuccess(Boolean.FALSE);
				result.setMessage("不能抢自己的甩单");
				return result;
			}
			//调用 积分处理
			if(score>0){
				if(CustAmountUtil.custTotalScore(customerId.toString())>=score){
					
					//从一个人的积分到另一个人
					AppParam param = new AppParam();
					param.setService("custScoreService");
					param.setMethod("scoreFromTo");
					param.setRmiServiceName(AppProperties
							.getProperties(DuoduoConstant.RMI_SERVICE_START + "cust"));
					param.addAttr("fromCust", customerId);
					param.addAttr("toCust", exchangeCust);
					param.addAttr("score", score);
					param.addAttr("scoreType", CustConstant.SCORE_TYPE_13);
					param.addAttr("createDesc", "抢甩单扣除积分");
					//若没有相应的对象，使用远程调用 
					result =  RemoteInvoke.getInstance().call(param);
				}else{
					throw new AppException(BorrowErrorCode.SCORE_INSUFFICIENT);
				}
			}
			//调用 抢单逻辑
			AppParam paramRob = new AppParam();
			paramRob.addAttr("customerId", customerId);
			paramRob.addAttr("exchangeId", exchangeId);
			paramRob.setService("daiBorrowReService");
			paramRob.setMethod("robExchangeBorrow");
			paramRob.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
			return RemoteInvoke.getInstance().call(paramRob);
		}
		throw new AppException(BorrowErrorCode.EXCHANGE_HAD_ROBED);
		
	}
	
	
	/***
	 * 获取当次抢单需要的积分值
	 * @param customerId
	 * @return
	 */
	public static int getDaiPowRobNum(String customerId){
		AppParam paramRob = new AppParam();
		paramRob.addAttr("customerId", customerId);
		paramRob.setService("busiCustService");
		paramRob.setMethod("query");
		paramRob.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_busi));
		AppResult result = RemoteInvoke.getInstance().call(paramRob);
		if(result.getRows().size() > 0&& result.getRow(0).get("dayRobNum")!=null) {
			Integer dayRobNum = Integer.valueOf(result.getRow(0).get("dayRobNum").toString());
			return dayRobNum;
		}
		return 0;
	}
	
	/**
	 * 用户每次抢单需要的积分
	 * @param customerId
	 * @return
	 */
	public static int getNeedScoreByRob(String customerId, int baseScores){
		Integer dayRobNum = getDaiPowRobNum(customerId);
		// 会员积分抢单前5次不翻倍 dayRobNum从0开始
		if(CustInfoUtil.isVip(customerId)){
			if(dayRobNum < 5){
				return baseScores;
			}else{
				return baseScores * (new BigDecimal(2).pow(dayRobNum-4).intValue());
			}
		}
		// 非会员第二单翻倍 dayRobNum从0开始
		return baseScores * (new BigDecimal(2).pow(dayRobNum).intValue());
	}
	
	/**
	 * 一天只能抢十单特价单
	 * @param customerId
	 * @return
	 */
	public static boolean hasRobChance(Object customerId){
		AppParam params = new AppParam("daiBorrowReService","queryCount");
		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
	    String today = format.format(new Date());
		params.addAttr("customerId", customerId);
		params.addAttr("robWay", BorrowConstant.RobType_7);
		params.addAttr("startTime", today+" 00:00:00");
		params.addAttr("endTime", today+" 23:59:59");
		params.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_busi));
		AppResult result = RemoteInvoke.getInstance().callNoTx(params);
		if (result.getRows().size() >= SysParamsUtil.getIntParamByKey("maxSpecialRobCount", 10)) {
			return false;
		}
		return true; 
	}
	
	/**
	 * 判断移动端是否需要版本升级
	 */
	private static void needUpdate(AppParam params){
		if(!StringUtils.isEmpty(params.getAttr("UUID")) && 
				!StringUtils.isEmpty(params.getAttr("appVersion"))){
			String appVersion = StringUtil.getString(params.getAttr("appVersion"));
			if(appVersion.contains("IOS")){
				String version = appVersion.substring(appVersion.indexOf("IOS"));
				if(version.compareTo("IOS2.2.0") < 0){
					throw new SysException("抢单规则已变更，请升级到最新版本操作！！");
				}
			}
			if(appVersion.contains("AD")){
				String version = appVersion.substring(appVersion.indexOf("AD"));
				if(version.compareTo("AD1.9.0") < 0){
					throw new SysException("抢单规则已变更，请升级到最新版本操作！！");
				}
			}
		}
	}
	
	/**
	 * 需更高版本
	 * @param params
	 */
	public static void needHigherVersion(AppParam params){
		if(!StringUtils.isEmpty(params.getAttr("UUID")) && 
				!StringUtils.isEmpty(params.getAttr("appVersion"))){
			String appVersion = StringUtil.getString(params.getAttr("appVersion"));
			if(appVersion.contains("IOS")){
				String version = appVersion.substring(appVersion.indexOf("IOS"));
				if(version.compareTo("IOS2.2.1") < 0){
					throw new SysException("3月1日开始不能使用积分抢单，推出抢单券，请下载新版本！");
				}else{
					throw new SysException("3月1日开始不能使用积分抢单！");
				}
			}
			if(appVersion.contains("AD")){
				String version = appVersion.substring(appVersion.indexOf("AD"));
				if(version.compareTo("AD1.9.0") < 0){
					throw new SysException("3月1日开始不能使用积分抢单，推出抢单券，请下载新版本！");
				}
			}
		}
	}
	
	/**
	 * 推广产品申请
	 * @param params
	 */
	public static AppResult tgBorrowApply(AppParam params){
		AppResult tgapplyResult = new AppResult();
		Object termIdStr = params.getAttr("termIds");
		if(StringUtils.isEmpty(termIdStr)){
			tgapplyResult.setSuccess(false);
			tgapplyResult.setMessage("缺少申请产品信息");
			return tgapplyResult;
		}
		String[] termIds = termIdStr.toString().split(",");
		
		int successCount = 0;
		StringBuilder sucTermIds = new StringBuilder();
		// 保存贷款信息
		for(String termId : termIds){
			Map<String, Object> addParams = new HashMap<String, Object>();
			addParams.putAll(params.getAttr());
			AppParam tgParams = new AppParam("applyProductService","tgBorrowApply");
			tgParams.addAttr("termId", termId);
			tgParams.addAttr("addParams", addParams);
			tgParams.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_busi));
			AppResult tgResult = RemoteInvoke.getInstance().call(tgParams);
			if(tgResult.isSuccess()){
				Object tgCustomerId = tgResult.getAttr("tgCustomerId");
				Object tgPrice = tgResult.getAttr("tgPrice");
				Object productName = tgResult.getAttr("productName");
				Object productId = tgResult.getAttr("productId");
				//修改产品的申请数
				BorrowRobUtils.addApplyCount(productId);
				// 扣用户余额
				AppParam amtParams = new AppParam();
				amtParams.addAttr("customerId", tgCustomerId);
				amtParams.addAttr("amount", -Double.parseDouble(tgPrice.toString()));
				amtParams.addAttr("fundType", FundConstant.FundType_WD_TG_PAY);
				amtParams.addAttr("orderId", tgResult.getAttr("borrowId"));
				amtParams.addAttr("recordDesc", "推广产品扣费");
				AppResult amountResult = CustAmountUtil.updateAmount(amtParams);
				if(amountResult.isSuccess()){
					successCount++;
					sucTermIds.append(termId + ",");
				}
				// 更新wd_shop余额
				Map<String, Object> paramsMap = new HashMap<String, Object>();
				paramsMap.put("customerId", tgCustomerId);
				paramsMap.put("usableAmount", -Double.parseDouble(tgPrice.toString()));
				paramsMap.put("service", "wdShopService");
				paramsMap.put("method", "update");
				paramsMap.put("rmiServiceName", AppProperties
						.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_busi));
				try {
					RmiServiceSend messageSend = SpringAppContext.getBean(RmiServiceSend.class);
					messageSend.sendExecuteMessage(paramsMap);
				} catch (Exception e) {
					LogerUtil.error(BorrowRobUtils.class, e, "update shop amount error");
				}
				Map<String,Object> messageMap = new HashMap<String, Object>();
				messageMap.put("prodName", productName);
				messageMap.put("price", tgPrice);
				try {
					CustMessageSend messageSend = SpringAppContext.getBean(CustMessageSend.class);
					messageSend.sendCustMessage(tgCustomerId.toString(), "tgProdApplyTip", messageMap);
				} catch (Exception e) {
					LogerUtil.error(BorrowRobUtils.class, e, "tgBorrowApply error");
				}
				
			}
		}
		
		if (!StringUtils.isEmpty(sucTermIds.toString())) {
			tgapplyResult.putAttr("sucTermIds", sucTermIds.toString().substring(0, sucTermIds.toString().lastIndexOf(",")));
		}
		tgapplyResult.putAttr("successCount", successCount);
		return tgapplyResult;
	}
	
	/**
	 * 推广产品申请,产品未推广状态获取的客户
	 * @param params
	 */
	public static AppResult tgBorrowApply2(AppParam params){
		AppResult result = new AppResult();
		//保存贷款信息
		AppParam addParams = new AppParam();
		addParams.addAttrs(params.getAttr());
		addParams.addAttr("status", "3");
		addParams.addAttr("sourceType", BorrowErrorCode.BorrowSource_6);//信贷经理处理
		addParams.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_busi));
		addParams.setService("applyProductService");
		AppParam recordParam = new AppParam();//保存借款记录
		recordParam.setService("applyUnionService");
		List<Map<String, Object>> queryRecordList = ApplyUnionUtil.queryRecordList(null, null, params.getAttr("telephone"), null, null);
		Map<String, Object> recordMap = queryRecordList.get(0);
		Object proApplyId = null;
		Object unionId = null;
		if (NumberUtil.getInt(recordMap.get("statusType"),0)==0) {
			recordParam.setMethod("update");
			recordParam.addAttr("unionId", recordMap.get("unionId"));
			
			addParams.setMethod("update");
			RemoteInvoke.getInstance().call(addParams);
			
			proApplyId = recordMap.get("proApplyId");
			unionId = recordMap.get("unionId");
		}else {
			recordParam.setMethod("insert");
			String newUid = DateUtil.toStringByParttern(new Date(), DateUtil.DATE_PATTERNYYYYMMDDHHMMSSSSS)
					+ StringUtil.getUUID();
			newUid = Md5.getInstance().encrypt(newUid);
			addParams.addAttr("uid", newUid);
			addParams.setMethod("insert");
			AppResult addResult = RemoteInvoke.getInstance().call(addParams);
			proApplyId = addResult.getAttr("proApplyId");
			recordParam.addAttr("proApplyId",proApplyId);
			recordParam.addAttr("applyKinds", 3);
		}
		recordParam.addAttr("applyName", params.getAttr("applyName"));
		recordParam.addAttr("telephone", params.getAttr("telephone"));
		recordParam.addAttr("productId", params.getAttr("productId"));
		recordParam.addAttr("statusType", 4);
		AppResult recordRsult = RemoteInvoke.getInstance().call(recordParam);
		if(unionId == null){
			unionId = recordRsult.getAttr("unionId");
		}
		AppParam updateParam = new AppParam();
		updateParam.addAttr("proApplyId", proApplyId);
		updateParam.addAttr("unionId", unionId);
		updateParam.setMethod("update");
		updateParam.setService("applyProductService");
		RemoteInvoke.getInstance().call(updateParam);
		
		
		
//		AppParam loanParam = new AppParam();
//		loanParam.addAttrs(params.getAttr());
//		loanParam.setService("applyProductService");
//		loanParam.setMethod("insert");
//		loanParam.addAttr("status", "3");
//		loanParam.addAttr("sourceType", BorrowErrorCode.BorrowSource_6);
//		loanParam.setRmiServiceName(AppProperties
//				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_busi));
//		AppResult loanResult = RemoteInvoke.getInstance().call(loanParam);
		if (!StringUtils.isEmpty(proApplyId)) {
			AppParam addParam = new AppParam();
			addParam.setService("daiBorrowReTgService");
			addParam.setMethod("insert");
			addParam.addAttr("receiveStatus", "0");
			addParam.addAttr("customerId", params.getAttr("tgCustomerId"));
			addParam.addAttr("borrowId", proApplyId);
			addParam.addAttr("productId", params.getAttr("productId"));
			WdCfgUtil.getMatchingProductPrice(params);
			// 产品价格
			BigDecimal prodPrice = NumberUtil.getBigDecimal(params.getAttr("prodPrice"), BigDecimal.ZERO);
			// 城市底价
			BigDecimal minPrice = BigDecimal.valueOf(WdCfgUtil.getCityPrice(StringUtil.getString(params.getAttr("cityName").toString())));
			// 抢单价格
			BigDecimal robPrice = prodPrice.compareTo(minPrice) > 0 ? prodPrice : minPrice;
			addParam.addAttr("price", robPrice.multiply(new BigDecimal(100)).intValue());
			addParam.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_busi));
			result = RemoteInvoke.getInstance().call(addParam);
			
			//修改产品的申请数
			BorrowRobUtils.addApplyCount(params.getAttr("productId"));
			
			Map<String,Object> paramsMap = new HashMap<String, Object>();
			String tgCustomerId = params.getAttr("tgCustomerId").toString();
			paramsMap.put("prodName", params.getAttr("productName"));
			paramsMap.put("hour", SysParamsUtil.getIntParamByKey("notTgHandleTime", 2));//2小时
			try {
				CustMessageSend messageSend = SpringAppContext.getBean(CustMessageSend.class);
				messageSend.sendCustMessage(tgCustomerId, "notTgProdApplyTip", paramsMap);
			} catch (Exception e) {
				LogerUtil.error(BorrowRobUtils.class, e, "tgBorrowApply2 error");
			}
		}
		return result;
	}

	/**
	 * 保存信贷用户信息
	 * @param params
	 */
	public static void saveLoanInfo(AppParam params){
		if (!StringUtils.isEmpty(params.getAttr("customerId"))) {
			params.setService("custLoanInfoService");
			params.setMethod("update");
			params.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_cust));
			RemoteInvoke.getInstance().call(params);
			String identifyStatus = StringUtil.getString(params.getAttr("status"));
			//修改实名认证信息
			if (!"1".equals(identifyStatus.toString()) && (!StringUtils.isEmpty(params.getAttr("realName"))||!StringUtils.isEmpty(params.getAttr("cardNo")))) {
				Object customerId = params.getAttr("customerId");
				AppParam identifyParam = new AppParam("custIdentifyService","update");
				identifyParam.addAttr("realName", params.getAttr("realName"));
				identifyParam.addAttr("cardNo", params.getAttr("cardNo"));
				identifyParam.addAttr("customerId", params.getAttr("customerId"));
				identifyParam.addAttr("status", identifyStatus);
				identifyParam.setRmiServiceName(AppProperties
						.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_cust));
				AppResult identifyResult = RemoteInvoke.getInstance().call(identifyParam);
				if (identifyResult.isSuccess()) {
					CustomerIdentify.refreshIdentifyById(customerId.toString());
				}
			}
		}
	}
	
	/**
	 * 获取申请客户信息
	 * @param params
	 * @return
	 */
	public static AppResult queryApplyInfo(AppParam params){
		AppResult result = new AppResult();
		Object applyCustId = params.getAttr("applyCustId");
		//申请人信息
		AppParam borrowParam = new AppParam();
		borrowParam.setService("borrowApplyService");
		borrowParam.setMethod("query");
		borrowParam.addAttr("customerId", applyCustId);
		borrowParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_busi_in));
		AppResult borrowResult = RemoteInvoke.getInstance().callNoTx(borrowParam);
		AppParam daiParam = new AppParam();
		daiParam.setService("daiBorrowService");//dai_borrow可能有多条，查最新的一条
		daiParam.setMethod("query");
		daiParam.addAttr("customerId", applyCustId);
		daiParam.setOrderBy("applyTime");
		daiParam.setOrderValue("DESC");
		daiParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_busi));
		AppResult daiResult = RemoteInvoke.getInstance().callNoTx(daiParam);
		
		//判断该用户是否存在贷款记录
		if(borrowResult.getRows().size() >0){
			result.putAttr("applyId", borrowResult.getRow(0).get("applyId"));
			result.putAttr("applyName", borrowResult.getRow(0).get("applyName"));
			result.putAttr("speedupTime", borrowResult.getRow(0).get("speedupTime"));
			result.putAttr("createTime", borrowResult.getRow(0).get("applyTime"));
			result.putAttr("applyTelephone", borrowResult.getRow(0).get("telephone"));
		}
		if(daiResult.getRows().size() >0){
			result.putAttr("borrowId", daiResult.getRow(0).get("borrowId"));
			result.putAttr("applyName", daiResult.getRow(0).get("realName"));
			result.putAttr("speedupTime", daiResult.getRow(0).get("speedupTime"));
			result.putAttr("createTime", daiResult.getRow(0).get("createTime"));
			result.putAttr("applyTelephone", daiResult.getRow(0).get("telephone"));
		}
		return result;
	}
	
	/**
	 * 修改申请加速时间
	 * @param params
	 */
	public static void updateSpeedupTime(AppParam params){
		AppResult result = new AppResult();
		if (!StringUtils.isEmpty(params.getAttr("borrowId"))) {
			AppParam updateParam = new AppParam();
			updateParam.setService("daiBorrowService");
			updateParam.setMethod("update");
			updateParam.addAttr("speedupTime", new Date());
			updateParam.addAttr("borrowId", params.getAttr("borrowId"));
			updateParam.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_busi));
			result = RemoteInvoke.getInstance().call(updateParam);
		} 
		if(!StringUtils.isEmpty(params.getAttr("applyId"))){
			AppParam updateParam = new AppParam();
			updateParam.setService("borrowApplyService");
			updateParam.setMethod("update");
			updateParam.addAttr("applyId", params.getAttr("applyId"));
			updateParam.addAttr("speedupTime", new Date());
			updateParam.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_busi_in));
			result = RemoteInvoke.getInstance().call(updateParam);
		}
		if(result.isSuccess() && !StringUtils.isEmpty(params.getAttr("customerId"))){
			Map<String,Object> paramsMap = new HashMap<String, Object>();
			paramsMap.put("realName", params.getAttr("realName"));
			paramsMap.put("day", params.getAttr("day"));
			paramsMap.put("applyName", params.getAttr("applyName"));
			paramsMap.put("applyTelephone", params.getAttr("applyTelephone"));
			try {
				CustMessageSend messageSend = SpringAppContext.getBean(CustMessageSend.class);
				messageSend.sendCustMessage(params.getAttr("customerId").toString(), "overTimeNotice", paramsMap);
			} catch (Exception e) {
				LogerUtil.error(BorrowRobUtils.class, e, "updateSpeedupTime error");
			}
		}
	}
	
	/**
	 * 奖励积分
	 * @param customerId
	 * @param price
	 */
	private static int robSendScore(String customerId, double price){
		int rewardScore = 0;
		// 订单价格在10-30元    赠送6积分;订单价格在30-60元    赠送8积分;订单价格在60元以上   赠送10积分
		String sendScoreCfg = SysParamsUtil.getStringParamByKey("robRewardScoreCfg", "60,30,10;10,8,6");
		String[] scoreCfg = sendScoreCfg.split(";");
		int[] priceArray = ScoreUtil.transferToInt(scoreCfg[0].split(","));
		int[] rewardArray = ScoreUtil.transferToInt(scoreCfg[1].split(","));
		for(int i = 0 ;i < priceArray.length;i++){
			if(price >= priceArray[i]){
				rewardScore = rewardArray[i];
				break;
			}
		}
		if(rewardScore <= 0){
			return 0;
		}
		Map<String, Object> robSendMap = new HashMap<String, Object>();
		robSendMap.put("customerId", customerId);
		robSendMap.put("rewardScore", rewardScore);
		robSendMap.put("service", "custScoreService");
		robSendMap.put("method", "robSend");
		robSendMap.put("rmiServiceName", AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_cust));
		RmiServiceSend messageRobSend = SpringAppContext.getBean(RmiServiceSend.class);
		try {
			messageRobSend.sendExecuteMessage(robSendMap);
		} catch (Exception e) {
			LogerUtil.error(BorrowRobUtils.class, e, "robSend error");
		}
		return rewardScore;
	}
	
	/**
	 * 使用券
	 * 计算用券省的金额和判断是否用的免单券
	 * @param customerId
	 * @param price
	 * @param ticketId
	 * @return
	 */
	private static Map<String, Object> useTicket(String customerId, double price, String ticketId){
		Map<String, Object> map = new HashMap<String, Object>();
		double savePrice = 0;
		if(!StringUtils.isEmpty(ticketId)){
			// 判断是否有效
			Map<String,Object> ticketInfo = CustFundUtil.queryCustTicket(customerId, ticketId);
			if(ticketInfo == null || ticketInfo.size() == 0){
				throw new SysException("对不起，该打折券无效");
			}
			String startDate = StringUtil.getString(ticketInfo.get("startDate"));
			String endDate = StringUtil.getString(ticketInfo.get("endDate"));
			if(!CustFundUtil.canUse(startDate,endDate)){
				throw new SysException("对不起，该打折券已过期");
			}
			// 折扣率 5代表 5折
			double ticketDiscount = Double.valueOf(ticketInfo.get("discount").toString());
			// 最高抵扣金额
			double maxDiscountAmount = NumberUtil.getDouble(ticketInfo.get("maxDiscountAmount"), 0);
			// 最小订单价格
			double minPrice = NumberUtil.getDouble(ticketInfo.get("minPrice"), 0);
			// 最大订单价格
			double maxPrice = NumberUtil.getDouble(ticketInfo.get("maxPrice"), 0);
			// 是否为免单劵：0-否 1-是
			String isFreeTicket = StringUtil.getString(ticketInfo.get("isFreeTicket"));
			// 是否可抢优质单：0-否，1-是
			String robSeniorCust = StringUtil.getString(ticketInfo.get("robSeniorCust"));
			// minPrice 限订单最小金额，如：订单金额限50元以上，包括50元
			// maxPrice 限订单最大金额，如：订单金额限50元以下，不包括50元
			if ((minPrice > 0 && price < minPrice) || (maxPrice > 0 && price >= maxPrice)) {
				throw new SysException("对不起，该单不符合券的使用条件！");
			}
			map.put("robSeniorCust", robSeniorCust);
			int robDiffCtiy = 1;// 是否可抢异地城市 0-否 1-是
			int orderMaxDiscountAmount = SysParamsUtil.getIntParamByKey("orderMaxDiscountAmount", 1000);
			if (maxDiscountAmount >= orderMaxDiscountAmount) {
				robDiffCtiy = 0;// 不可抢异地城市
			}
			map.put("robDiffCtiy", robDiffCtiy);
			// 免单劵判断
			if ("1".equals(isFreeTicket)) {
				map.put("savePrice", price-maxDiscountAmount>=0 ? maxDiscountAmount : price);
				return map;
			}
			// 打折劵与抢单劵判断			
			if (ticketDiscount > 0) {
				// 打折券有最大抵扣限制
				// 省的金额
				savePrice = new BigDecimal(price * (10-ticketDiscount)/10).setScale(2, RoundingMode.HALF_UP).doubleValue();
				if(savePrice >= maxDiscountAmount){
					savePrice = maxDiscountAmount;
				}
			} else {// 抢单劵金额判断
				if ((minPrice == 0 && price <= maxDiscountAmount) || (minPrice > 0 && price <= maxDiscountAmount)) {
					savePrice = price;
				} else {
					savePrice = maxDiscountAmount;
				}
			}
		}
		map.put("savePrice", savePrice);
		return map;
	}
	
	/**
	 * 计算最优 抢单券
	 */
	public static List<Map<String, Object>> getOptimalTicket(List<Map<String, Object>> custTickets, double price){
		List<Map<String, Object>> ticketList = new ArrayList<Map<String, Object>>();
		if(custTickets.size() == 0){
			return ticketList;
		}
		for(Map<String,Object> ticketInfo : custTickets){
			double savePrice = 0;
			String startDate = StringUtil.getString(ticketInfo.get("startDate"));
			String endDate = StringUtil.getString(ticketInfo.get("endDate"));
			if(!CustFundUtil.canUse(startDate,endDate)){
				continue;
			}
			// 折扣率 5代表 5折
			double ticketDiscount = Double.valueOf(ticketInfo.get("discount").toString());
			// 最高抵扣金额
			double maxDiscountAmount = NumberUtil.getDouble(ticketInfo.get("maxDiscountAmount"), 0);
			// 最小订单价格
			double minPrice = NumberUtil.getDouble(ticketInfo.get("minPrice"), 0);
			// 最大订单价格
			double maxPrice = NumberUtil.getDouble(ticketInfo.get("maxPrice"), 0);
			// 是否为免单劵：0-否 1-是
			String isFreeTicket = StringUtil.getString(ticketInfo.get("isFreeTicket"));
			// 是否可抢优质单：0-否，1-是
			int robSeniorCust = NumberUtil.getInt(ticketInfo.get("robSeniorCust"), 0);
			if ((minPrice > 0 && price < minPrice) || (maxPrice > 0 && price >= maxPrice)) {
				continue;
			}
			int robDiffCtiy = 1;// 是否可抢异地城市 0-否 1-是
			int orderMaxDiscountAmount = SysParamsUtil.getIntParamByKey("orderMaxDiscountAmount", 1000);
			if (maxDiscountAmount >= orderMaxDiscountAmount) {
				robDiffCtiy = 0;
			}
			// 打折劵与免单劵判断
			if(ticketDiscount > 0){
				// 打折券有最大抵扣限制
				// 省的金额
				savePrice = new BigDecimal(price * (10-ticketDiscount)/10).setScale(2, RoundingMode.HALF_UP).doubleValue();
				if(savePrice >= maxDiscountAmount){
					savePrice = maxDiscountAmount;
				}
			}else {
				if ((minPrice == 0 && price <= maxDiscountAmount) || (minPrice > 0 && price <= maxDiscountAmount)) {
					savePrice = price;
				} else {
					savePrice = maxDiscountAmount;
				}
			}
			ticketInfo.put("ticketType", isFreeTicket);// 1-表示免单劵
			ticketInfo.put("savePrice", savePrice);
			ticketInfo.put("isSeniorCustUse", robSeniorCust);// 是否优质客户可以使用
			ticketInfo.put("robDiffCtiy", robDiffCtiy);// 是否可抢异地城市
			ticketList.add(ticketInfo);
		}
		if(ticketList.size() == 0){
			return ticketList;
		}
		ticketList = ticketList.stream().sorted(Comparator.comparing(BorrowRobUtils::comparingByPrice).reversed()
            	.thenComparing(Comparator.comparing(BorrowRobUtils::comparingByEndDate))
				).collect(Collectors.toList());
		return ticketList;
	}
	
	private static double comparingByPrice(Map<String, Object> map){
        return Double.valueOf(map.get("savePrice").toString());
    }

	private static String comparingByEndDate(Map<String, Object> map){
        return (String) map.get("endDate");
    }
	
	/**
	 * 查看待确认推广产品付款
	 * @param params
	 * @return
	 */
	public static AppResult robBorrowPay(AppParam params){
		AppResult result = new AppResult();
		Object receiveId = params.getAttr("receiveId");
		String customerId = StringUtil.getString(params.getAttr("customerId"));
		String ticketId = StringUtil.getString(params.getAttr("ticketId"));// 抢单劵id
		if (StringUtils.isEmpty(receiveId) || StringUtils.isEmpty(customerId)) {
			throw new AppException(DuoduoError.UPDATE_NO_PARAMS);
		}
		
		// 查询客户信息
		Map<String,Object> custInfo = CustomerIdentify.getCustIdentify(customerId);
		String cardStatus = StringUtil.objectToStr(custInfo.get("cardStatus"));
		if(!"1".equals(cardStatus)){
			throw new SysException("您的工作认证尚未通过审核，不能点击购买操作！");
		}
		if(!"1".equals(custInfo.get("status").toString())){
			throw new SysException("对不起，您当前信息状态不正确，不能点击购买操作！");
		}
				
		// 查询待确定推广获客记录
		AppParam robParam = new AppParam();
		robParam.setService("daiBorrowReTgService");
		robParam.setMethod("queryRobBorrowDtl");
		robParam.addAttr("receiveId", receiveId);
		robParam.addAttr("customerId", customerId);
		robParam.addAttr("receiveStatus", "0");// 待确认
		robParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_busi));
		AppResult robResult = RemoteInvoke.getInstance().callNoTx(robParam);
		if (robResult.getRows() == null || robResult.getRows().isEmpty()) {
			return CustomerUtil.retErrorMsg("无待确认推广客户记录！");
		}
		Map<String,Object> tgRobInfo = robResult.getRow(0);
		double payAmount = NumberUtil.getDouble(tgRobInfo.get("price"), 0)/100;// 付款金额
		Map<String, Object> map = useTicket(customerId, payAmount, ticketId);  // 获取节省金额
		double saveAmount = NumberUtil.getDouble(map.get("savePrice"),0);
		payAmount = payAmount - saveAmount;
		
		Map<String, Object> amtMap = CustAmountUtil.getCustAmount(customerId);// 获取用户可用金额
		double usableAmount = Double.parseDouble(amtMap.get("usableAmount").toString());//可用余额
		if(usableAmount < payAmount){
			return CustomerUtil.retErrorMsg("您当前账户余额不足！");
		}
		// 扣除用户余额
		AppParam amtParams = new AppParam();
		amtParams.addAttr("customerId", customerId);
		amtParams.addAttr("amount", -payAmount);
		amtParams.addAttr("fundType", FundConstant.FUNDTYPE_TG_PAYAMT);
		amtParams.addAttr("orderId", receiveId);
		amtParams.addAttr("recordDesc", "推广获客付款消费");
		result = CustAmountUtil.updateAmount(amtParams);
		// 更新推广状态
		if(result.isSuccess()){
			// 修改抢单券状态为已使用
			if(!StringUtils.isEmpty(ticketId)){
				AppParam ticketParams = new AppParam();
				ticketParams.setService("custTicketService");
				ticketParams.setMethod("update");
				ticketParams.addAttr("customerId", customerId);
				ticketParams.addAttr("ticketId", ticketId);
				ticketParams.addAttr("useTime", new Date());
				ticketParams.addAttr("status", "2");// 已使用
				ticketParams.setRmiServiceName(AppProperties
						.getProperties(DuoduoConstant.RMI_SERVICE_START + "cust"));
				RemoteInvoke.getInstance().call(ticketParams);
			}
			
			//更新推关获客记录
			AppParam updateParam = new AppParam("daiBorrowReTgService","update");
			updateParam.addAttr("receiveId", receiveId);
			updateParam.addAttr("ticketId", ticketId);
			updateParam.addAttr("saveAmount", saveAmount*100);
			updateParam.addAttr("price", payAmount*100);
			updateParam.addAttr("payTime", new Date());
			updateParam.addAttr("receiveStatus", "1");// 待处理
			updateParam.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_busi));
			result = RemoteInvoke.getInstance().call(updateParam);
		}
		result.putAttr("robPrice", payAmount);// 付款金额
		result.putAttr("realName", tgRobInfo.get("realName"));// 借款人姓名
		result.putAttr("telephone", tgRobInfo.get("telephone"));// 借款人手机号
		return result;
	}
	
	/**
	 * 取消待确认推广获客单，并转客服系统
	 * @param params
	 * @return
	 */
	public static AppResult tgRobCancel(AppParam params){
		AppResult result = new AppResult();
		Object receiveId = params.getAttr("receiveId");
		String customerId = StringUtil.getString(params.getAttr("customerId"));
		if (StringUtils.isEmpty(receiveId) || StringUtils.isEmpty(customerId)) {
			throw new AppException(DuoduoError.UPDATE_NO_PARAMS);
		}
		// 查询待确认推广获客记录
		AppParam robParam = new AppParam();
		robParam.setService("daiBorrowReTgService");
		robParam.setMethod("queryRobBorrowDtl");
		robParam.addAttr("receiveId", receiveId);
		robParam.addAttr("customerId", customerId);
		robParam.addAttr("receiveStatus", "0");// 待确认
		robParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_busi));
		AppResult robResult = RemoteInvoke.getInstance().callNoTx(robParam);
		if (robResult.getRows() == null || robResult.getRows().isEmpty()) {
			return CustomerUtil.retErrorMsg("无待确认推广客户记录！");
		}
		Map<String, Object> borrowInfo = robResult.getRow(0);
		// 推广记录转移客服系统
		AppParam kfParam = new AppParam("applyService","newAppLoanApply");
		borrowInfo.put("status", "0");
		borrowInfo.put("haveDetail", "1");// 已填写信息
		borrowInfo.put("applyTime", borrowInfo.get("applyTime"));// 申请时间
		borrowInfo.put("channelDetail", CustConstant.CUST_sourceType_WEB);
		borrowInfo.put("applyName", borrowInfo.get("realName"));// 申请人姓名
		borrowInfo.put("applyAmount", borrowInfo.get("loanAmount"));// 申请金额
		kfParam.addAttrs(borrowInfo);
		kfParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_busi_in));
		try {
			AppResult kfResult = RemoteInvoke.getInstance().call(kfParam);
			// 转移成功，删除推广记录
			if (kfResult.isSuccess() || "100".equals(kfResult.getErrorCode())) {
				AppParam delTgRecord = new AppParam("daiBorrowReTgService","delTgRecord");
				delTgRecord.addAttr("receiveId", borrowInfo.get("receiveId"));
				delTgRecord.addAttr("borrowId", borrowInfo.get("borrowId"));
				delTgRecord.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_busi));
				result = RemoteInvoke.getInstance().call(delTgRecord);
			}
		} catch (Exception e) {
			LogerUtil.error(BorrowRobUtils.class, e, "tgRobCancel error");
			e.printStackTrace();
		}
		return result;
	}
	
	/**
	 * 赠送免单券
	 * @param params
	 */
	public static void presentFreeTicket(AppParam params){
		if (CustInviteUtil.isInActiveByFreeTicket()) {
			Map<String, Object> robSendMap = new HashMap<String, Object>();
			robSendMap.put("service", "custTicketService");
			robSendMap.put("method", "presentFreeTicket");
			robSendMap.put("customerId", params.getAttr("customerId"));
			robSendMap.put("borrowId", params.getAttr("borrowId"));
			robSendMap.put("rmiServiceName", AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_cust));
			RmiServiceSend messageRobSend = SpringAppContext.getBean(RmiServiceSend.class);
			try {
				messageRobSend.sendExecuteMessage(robSendMap);
			} catch (Exception e) {
				LogerUtil.error(BorrowRobUtils.class, e, "presentFreeTicket error");
			}
		}
	}
	
	/**
	 * 更新微店产品的申请数
	 * @param productId
	 */
	public static void addApplyCount(Object productId){
		AppParam param = new AppParam();
		param.setService("wdProductService");
		param.setMethod("update");
		param.addAttr("addApplyCount", 1);
		param.addAttr("productId", productId);
		param.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_busi));
		RemoteInvoke.getInstance().call(param);
	}
	
	/**
	 * 是否是免单券
	 * @param maxDiscountAmount 最高抵扣金额
	 * @param minPrice			最小订单价格
	 * @param ticketDiscount	折扣
	 * @return
	 */
	public static boolean isFreeTicket(double maxDiscountAmount,double minPrice,double ticketDiscount){
		int freeTicketMaxDiscountAmount = SysParamsUtil.getIntParamByKey("freeTicketMaxDiscountAmount", 50);
		if (maxDiscountAmount == freeTicketMaxDiscountAmount && minPrice == 0 && ticketDiscount == 0) {
			return true;
		}
		return false;
	}
	
	/**
	 * 使用信贷经理免单券配置
	 * @param customerId
	 * @param borrowInfo
	 * @param robSeniorCust	// 是否可抢优质单：0-否，1-是
	 * @return
	 */
	private static AppResult useCustFreeTicketConfig(String ticketId, String customerId,
			Map<String, Object> borrowInfo, double robSeniorCust, double robDiffCtiy) {
		int isSeniorCust = NumberUtil.getInt(borrowInfo.get("isSeniorCust"), 0);// 优质客户
		AppResult result = new AppResult();
		Map<String,Object> custTicketConfig = CustInfoUtil.getCustTicketConfig(customerId,null);
		String cityName = StringUtil.getString(borrowInfo.get("cityName"));
		String custCityName = null;
		if(custTicketConfig != null){
			custCityName = StringUtil.getString(custTicketConfig.get("cityName"));
			String status = StringUtil.getString(custTicketConfig.get("status"));
			if (!cityName.equals(custCityName) && "1".equals(status)) {
				result.putAttr("notSelfCity","0");
			}
		}else{
			// 活动获取的免单券
			Map<String,Object> custInfo = CustomerIdentify.getCustIdentify(customerId);
			custCityName = StringUtil.getString(custInfo.get("cityName"));
		}
		// 使用抢单劵时才判断
		if (!StringUtils.isEmpty(ticketId)) {
			//  优质客户不能使用免单券、五折不限抵扣金额劵，不同城市不能使用免单券、五折不限抵扣金额劵
			if (robSeniorCust == 0 && isSeniorCust == 1) {
				return CustomerUtil.retErrorMsg("优质客户单不能使用该券！");
			}
			if (robDiffCtiy == 0 && !cityName.equals(custCityName)) {
				return CustomerUtil.retErrorMsg("该券只能用于您所在的城市抢的单，您所在的城市是"+custCityName+"，该单所属的城市是:"+cityName);
			}
		}
		
		return result;
	}
	
	/**
	 * 连续*天抢单总金额达*元，赠送券
	 * @param customerId
	 */
	private static void continuousRobReward(Object customerId){
		if (CustInviteUtil.inviteActivityIsInActive()) {
			// 查询连续抢单情况
			AppParam queryParam = new AppParam();
			queryParam.setService("daiBorrowReService");
			queryParam.setMethod("queryRobDayAndPrice");
			queryParam.addAttr("customerId", customerId);
			queryParam.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_busi));
			AppResult queryResult = RemoteInvoke.getInstance().callNoTx(queryParam);
			if (queryResult.getRows().size() > 0) {
				Map<String, Object> queryMap = queryResult.getRow(0);
				int longDay = NumberUtil.getInt(queryMap.get("longDay"), 0);					//7天内连续抢单天数
				double longPriceSum = NumberUtil.getDouble(queryMap.get("longPriceSum"), 0);	//7天内连续抢单总额
				int shortDay = NumberUtil.getInt(queryMap.get("shortDay"), 0);					//3天内连续抢单天数
				double shortPriceSum = NumberUtil.getDouble(queryMap.get("shortPriceSum"), 0);	//3天内连续抢单总额
				int robDay = 0;
				if (shortDay == 3 && 
						shortPriceSum >= SysParamsUtil.getIntParamByKey("threeDaysRobPriceRewardSum", 500)) {
					robDay = 3;
				}
				if(longDay == 7 && 
						longPriceSum >= SysParamsUtil.getIntParamByKey("sevenDaysRobPriceRewardSum", 800)){
					robDay = 7;
				}
				if (robDay > 0) {
					Map<String, Object> robSendMap = new HashMap<String, Object>();
					robSendMap.put("service", "custActivityRecordService");
					robSendMap.put("method", "continuousRobReward");
					robSendMap.put("customerId", customerId);
					robSendMap.put("robDay", robDay);
					robSendMap.put("rmiServiceName", AppProperties
							.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_cust));
					RmiServiceSend messageRobSend = SpringAppContext.getBean(RmiServiceSend.class);
					try {
						messageRobSend.sendExecuteMessage(robSendMap);
					} catch (Exception e) {
						LogerUtil.error(BorrowRobUtils.class, e, "continuousRobReward error");
					}
				}
			}
		}
	}
}
