package org.xxjr.busi.util.store;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.core.service.RemoteInvoke;
import org.ddq.common.exception.SysException;
import org.llw.model.cache.RedisUtils;
import org.springframework.util.StringUtils;
import org.xxjr.sys.util.ServiceKey;

/**
 * 用于大小类资料
 * 
 * @author Administrator
 *
 */
public class MaterialDealUtil {

	/**
	 * 获取大类资料
	 * 
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public static AppResult queryMaterialGroup() {
		AppResult result = new AppResult();
		List<Map<String, Object>> materialGroups = (List<Map<String, Object>>) RedisUtils
				.getRedisService().get("crmsys_userKey_material_group_info");
		result.setRows(materialGroups);
		if (materialGroups == null || materialGroups.size() == 0) {
			result.setRows(refreshMaterialGroup());
		}
		return result;
	}

	

	/**
	 * 获取大类资料中的某一个小类资料
	 * 
	 * @param groupName
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public static AppResult queryMaterial(String groupCode) {
		AppResult result = new AppResult();
		List<Map<String, Object>> resultMap = new ArrayList<Map<String, Object>>();

		List<Map<String, Object>> materials = (List<Map<String, Object>>) RedisUtils
				.getRedisService().get("crmsys_userKey_material_info");

		if (materials == null || materials.size() == 0) {
			materials = refreshMaterials();
		}
		for (Map<String, Object> map : materials) {
			if (!StringUtils.isEmpty(map.get("materialGroup"))) 
			{
				if (map.get("materialGroup").equals(groupCode)) 
				{
					resultMap.add(map);
				}
			}
		}
		result.setRows(resultMap);
		return result;
	}

	

	/**
	 * 根据materialType查找某一种小类资料
	 * 
	 * @param typeId
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public static Map<String, Object> queryMaterialByTypeId(Integer typeId) {
		if (typeId == null) {
			throw new SysException("缺少重要参数");
		}

		List<Map<String, Object>> materials = (List<Map<String, Object>>) RedisUtils.getRedisService().get("crmsys_userKey_material_info");
		if (materials == null || materials.size() == 0) {
			materials = refreshMaterials();
		}

		for (Map<String, Object> map : materials) {
			if (!StringUtils.isEmpty((map.get("materialType")))) {
				if (typeId.toString().equals(map.get("materialType").toString())) {
					return map;
				}
			}
		}
		return null;
	}


	/**
	 * 查询大类资料和用户对应的上传资料的情况
	 * 
	 * @param request
	 * @return
	 */
	public static AppResult queryMaterialGroup(String applyId) {
		AppResult queryresult = queryMaterialgroupStatus(applyId);// 得到用户的资料的每个大类资料的上传数量
		Map<String,Object> maps=new HashMap<String,Object>();
		for (Map<String, Object> map : queryresult.getRows()) {
			maps.put(map.get("groupCode").toString(), map);
		}
		queryresult=new AppResult();
		queryresult.putAttr("materialGroup",maps);
		return queryresult;
	}

	/**
	 * 查询相应的小类资料和相关的用户的资料文件
	 * 
	 * @param request
	 * @return
	 */
	public static AppResult queryMaterial(String groupCode, String applyId) {
		AppResult result = new AppResult();
		result = queryMaterial(groupCode);
		List<Map<String, Object>> materials = result.getRows();
		if (StringUtils.isEmpty(applyId)) {
			return result;
		}
		result = queryMaterialFIle(applyId, groupCode);
		List<Map<String, Object>> materialFiles = result.getRows();
		result=new AppResult();
		for (Map<String, Object> material : materials) {
			String materialType = material.get("materialType").toString();
			List<Map<String, Object>> newFiles = new ArrayList<Map<String, Object>>();
			for (Map<String, Object> files : materialFiles) {
				Object newMaterialType = files.get("materialType").toString();
				if (newMaterialType.equals(materialType)) {
					newFiles.add(files);
				}
			}
			material.put("files", newFiles);
			result.addRow(material);
		}
		result.putAttr("resourcesUrl",AppProperties.getProperties("resourcesUrl"));
		return result;
	}

	/**
	 * 获取用户的视频资料
	 * 
	 * @param request
	 * @return
	 */
	public static AppResult queryVideoMaterial(String applyId) {
		AppResult result = new AppResult();
		AppParam param = new AppParam("applyVideoService", "query");
		param.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_crmsys));
		param.addAttr("applyId", applyId);
		result = RemoteInvoke.getInstance().call(param);
		result.putAttr("resourcesUrl",  AppProperties.getProperties("resourcesUrl"));
		return result;
	}

}
