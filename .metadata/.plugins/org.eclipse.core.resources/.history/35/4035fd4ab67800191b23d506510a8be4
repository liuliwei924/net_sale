package org.xxjr.goods.util;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.ddq.active.mq.message.FxMessageSend;
import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.core.SpringAppContext;
import org.ddq.common.exception.DuoduoError;
import org.ddq.common.exception.SysException;
import org.ddq.common.util.DateUtil;
import org.ddq.common.util.LogerUtil;
import org.ddq.common.util.StringUtil;
import org.ddq.zk.service.RemoteInvoke;
import org.springframework.util.StringUtils;
import org.xxjr.fx.util.FxConstant;
import org.xxjr.fx.util.FxCustInviteUtil;
import org.xxjr.fx.util.FxCustomerUtil;
import org.xxjr.sys.util.NumberUtil;
import org.xxjr.sys.util.ServiceKey;
import org.xxjr.sys.util.SysParamsUtil;
import org.xxjr.wx.utils.WXRequestUtil;

/**
 * 分销系统资金相关
 * @author Administrator
 *
 */
public class FxFundUtil {
	
	// 交易成功
	public final static String SUCESS_FLAG = "0000";

	/**
	 * 提现申请
	 * @param params
	 * @return
	 */
	public static AppResult withdrawApply(AppParam params) {
		AppResult result = new AppResult();
		if(StringUtils.isEmpty(params.getAttr("custId"))
				|| StringUtils.isEmpty(params.getAttr("amount"))){
			result.setSuccess(false);
			result.setMessage("缺少提现申请参数");
			return result;
		}
		String custId = params.getAttr("custId").toString();
		double amount = Double.valueOf(params.getAttr("amount").toString());
		// 判断最低提现金额
		int minWithdrawAmt = SysParamsUtil.getIntParamByKey("fxMinWithdrawAmt", 100);
		if(amount < minWithdrawAmt){
			result.setSuccess(Boolean.FALSE);
			result.setMessage("低于" + minWithdrawAmt + "元不能进行提现操作！");
			return result;
		}
		// 判断是否实名
		Map<String,Object> userInfo = FxCustomerUtil.getCustIdentify(custId);
		if(!"1".equals(StringUtil.getString(userInfo.get("identifyStatus")))){
			result.setSuccess(Boolean.FALSE);
			result.setMessage("您还未进行实名认证，无法进行提现操作！");
			return result;
		}
		if(!"1".equals(StringUtil.getString(userInfo.get("status")))){
			result.setSuccess(Boolean.FALSE);
			result.setMessage("您已被锁定，无法进行提现操作！");
			return result;
		}
		// 判断提现余额是否大于可用余额
		Map<String,Object> userAmount = FxCustomerUtil.getCustAmount(custId);// 获取用户可用余额
		double usableAmount = NumberUtil.getDouble(userAmount.get("usableAmount"), 0);
		if (usableAmount < amount) {
			result.setSuccess(Boolean.FALSE);
			result.setMessage("提现金额 不能大于当前可用余额：" + usableAmount);
			return result;
		}
		if(FxConstant.FX_GRADE_1.equals(StringUtil.getString(userInfo.get("grade")))
				&& SysParamsUtil.getIntParamByKey("grade1ApplyFlag", 1) == 1){
			result.setSuccess(Boolean.FALSE);
			result.setMessage("抱歉，实习专员无法提现！");
			return result;
		}
		// 如果用户是专员 判断锁粉个数
//		if(!checkApplyWithdraw(custId)){
//			result.setSuccess(Boolean.FALSE);
//			result.setMessage("抱歉，专员用户锁粉10个才能申请提现！");
//			return result;
//		}
		// 判断是否绑卡
		Map<String,Object> bankCardInfo = queryBankCard(custId);
		if(null == bankCardInfo || bankCardInfo.isEmpty()){
			result.setSuccess(Boolean.FALSE);
			result.setMessage("您尚未绑定银行卡，无法进行提现操作！");
			return result;
		}
		// 保存提现申请
		AppParam withdrawParam = new AppParam();
		withdrawParam.setService("fxWithdrawService");
		withdrawParam.setMethod("apply");
		withdrawParam.addAttr("custId", custId);
		withdrawParam.addAttr("amount", amount);
		withdrawParam.addAttr("poundageAmount", SysParamsUtil.getIntParamByKey("fxDefaultWithdrawPoundage", 1));
		withdrawParam.addAttr("bankName", bankCardInfo.get("bankName"));
		withdrawParam.addAttr("bankCardNo", bankCardInfo.get("bankCardNo"));
		withdrawParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sho));
		return RemoteInvoke.getInstance().call(withdrawParam);
	}
	
	/**
	 * 查询用户银行卡信息
	 */
	public static Map<String, Object> queryBankCard(String custId){
		AppParam bankCard = new AppParam();
		bankCard.setService("fxCustBankService");
		bankCard.setMethod("query");
		bankCard.addAttr("custId", custId);
		bankCard.addAttr("status", "1");
		bankCard.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sho));
		 AppResult result=RemoteInvoke.getInstance().call(bankCard);
		 if(result.getRows().size()>0){
			 return result.getRow(0);
		 }
		 return null;
	}
	
	
	/**************************  绑卡操作Start  **************************/
	/**
	 * 查询用户绑卡信息
	 * @param params
	 * @return
	 */
	public static  AppResult queryBankCardInfo(AppParam params){
		params.setService("fxCustBankService");
		params.setMethod("queryBankCard");
		params.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sho));
		return RemoteInvoke.getInstance().callNoTx(params);
	}
	
	/**
	 * 预绑卡类交易
	 * @param params
	 * @return
	 */
	public static AppResult preBindBankCard(AppParam params) {
		// 初始绑卡信息
		AppParam preParam = new AppParam();
		preParam.setService("fxCustBankService");
		preParam.setMethod("saveOrUpdate");
		preParam.addAttr("custId", params.getAttr("custId"));
		preParam.addAttr("bankCode", params.getAttr("pay_code"));// 银行编号
		preParam.addAttr("bankName", params.getAttr("bank_name"));//银行名称
		preParam.addAttr("telephone", params.getAttr("mobile"));// 手机号
		preParam.addAttr("accountName", params.getAttr("id_holder"));// 户名
		preParam.addAttr("identityNo", params.getAttr("id_card"));// 身份证号
		preParam.addAttr("bankCardNo", params.getAttr("acc_no"));// 银行卡号
		preParam.addAttr("status", "0"); // 预绑卡
		preParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sho));
		return RemoteInvoke.getInstance().call(preParam);
	}
	
	
	/**
	 * 更新预绑卡类交易信息
	 * @param params
	 * @return
	 */
	public static AppResult updatePreBindBankCard(AppParam params) {
		AppParam updateParam = new AppParam();
		updateParam.setService("fxCustBankService");
		updateParam.setMethod("update");
		updateParam.addAttr("bankId", params.getAttr("bankId"));// 绑卡记录id
		updateParam.addAttr("transId", params.getAttr("transId"));// 商户订单号
		updateParam.addAttr("respCode", params.getAttr("respCode"));
		updateParam.addAttr("respMsg",params.getAttr("respMsg"));
		updateParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sho));
		return RemoteInvoke.getInstance().call(updateParam);
	}
	

	/**
	 * 绑卡交易信息更新
	 * @param params
	 * @return
	 */
	public static AppResult bindCardHandle(AppParam params) {
		String bindId = (String)params.getAttr("bindId");// 返回绑定标识
		String respCode = (String)params.getAttr("respCode");// 返回编号
		
		// 更新绑卡信息
		AppParam updateParam = new AppParam();
		updateParam.setService("fxCustBankService");
		updateParam.setMethod("update");
		updateParam.addAttr("custId", params.getAttr("custId"));
		updateParam.addAttr("respCode", respCode);
		updateParam.addAttr("respMsg", params.getAttr("respMsg"));
		updateParam.addAttr("bindId", bindId);
		updateParam.addAttr("bankId", params.getAttr("bankId"));
		if(SUCESS_FLAG.equals(respCode) && !StringUtils.isEmpty(bindId)){
			updateParam.addAttr("status", "1");// 绑卡成功
		}else{
			updateParam.addAttr("status", "2");// 绑卡失败
		}
		updateParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sho));
		return RemoteInvoke.getInstance().call(updateParam);
	}

	
	/**
	 * 更新绑卡状态status
	 * @param params
	 * @return
	 */
	public static AppResult updateStatus(AppParam params) {
		AppParam updateParam = new AppParam();
		updateParam.setService("fxCustBankService");
		updateParam.setMethod("update");
		updateParam.addAttr("respCode", params.getAttr("respCode"));
		updateParam.addAttr("respMsg", params.getAttr("respMsg"));
		updateParam.addAttr("status", params.getAttr("status"));
		updateParam.addAttr("fromStatus", "1");
		updateParam.addAttr("bankId", params.getAttr("bankId"));
		updateParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sho));
		return RemoteInvoke.getInstance().call(updateParam);
	}
	/**************************  绑卡操作End   **************************/
	
	/**
	 * 批量发放佣金
	 * @param withdrawIds
	 * @return
	 */
	public static AppResult batchSendReward(String withdrawIds,String realName,Map<String,Object> gzhInfo){
		AppResult result = new AppResult();
		for(String withdrawId : withdrawIds.split(",|，")){
			if(StringUtils.isEmpty(withdrawId)){
				continue;
			}
			if(gzhInfo != null && !gzhInfo.isEmpty()){
			    result = sendWxReward(withdrawId, realName,gzhInfo);
				String amountLimit = StringUtil.getString(result
						.getAttr("amountLimit"));
				if("1".equals(amountLimit)){
					result.setSuccess(false);
					result.setMessage("企业微信账号余额不足，请充值！");
					return result;
				}
			}else{
				sendReward(withdrawId,realName);
			}
			
		}
		return result;
	}
	
	/**
	 * 批量查询佣金发放状态
	 * @param withdrawIds
	 * @return
	 */
	public static AppResult batchQueryRewardStatus(String withdrawIds){
		for(String withdrawId : withdrawIds.split(",|，")){
			if (!StringUtils.isEmpty(withdrawId)) {
				queryRewardStatus(withdrawId);
			}
		}
		return new AppResult();
	}
	
	/**
	 * 发送用户提现通知模板消息
	 * 
	 */
	public static void sendCustWithdrawTempMessage(AppParam params){
		String custId = StringUtil.getString(params.getAttr("custId"));
		Map<String,Object> custInfo = FxCustomerUtil.getCustIdentify(custId);
		// 只发送有分销公众号openid
		if (!StringUtils.isEmpty(custInfo.get("fxOpenid"))) {
			Map<String, Object> msgParam = new HashMap<String, Object>();
			msgParam.put("money", params.getAttr("amount"));
			msgParam.put("timet", DateUtil.toStringByParttern(new Date(), DateUtil.DATE_PATTERN_YYYY_MM_DD_HHMMSS));
			try {
				FxMessageSend fxMessageSend = SpringAppContext.getBean(FxMessageSend.class);
				fxMessageSend.sendCustMessage(custId, "fxCustWithdrawNotify", msgParam);
			} catch (Exception e) {
				LogerUtil.error(FxFundUtil.class, e, "sendCustWithdrawTempMessage error");
			}
		}
	}
	
	/**
	 * 发放佣金
	 * @param withdrawId
	 * @return
	 */
	private static AppResult sendWxReward(String withdrawId,String realName,Map<String,Object> gzhInfo){
		AppResult result = new AppResult();
		// 查询提现记录
		AppParam queryParam = new AppParam("fxWithdrawService", "queryView");
		queryParam.addAttr("withdrawId", withdrawId);
		queryParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sho));
		AppResult queryResult = RemoteInvoke.getInstance().callNoTx(queryParam);
		if(queryResult.getRows().size() <= 0){
			throw new SysException(DuoduoError.UPDATE_DATA_IS_NOTEXISTS);
		}
		Map<String,Object> withdrawInfo = queryResult.getRow(0);
		String status = StringUtil.getString(withdrawInfo.get("status"));
		if("4".equals(status)){
			throw new SysException("当前提现记录" + withdrawId + "已发放成功");
		}
		if(!"1".equals(status)){
			throw new SysException("当前状态不允许发放佣金");
		}
		BigDecimal amount = new BigDecimal(withdrawInfo.get("amount").toString()).setScale(2, RoundingMode.HALF_UP);
		if(AppProperties.isDebug()){
			amount = new BigDecimal("0.1");
		}
		//如果用户没有openid则不发放
		Object fxOpenid = withdrawInfo.get("fxOpenid");
		if(StringUtils.isEmpty(fxOpenid)){
			return result;
		}
		AppParam wxParam = new AppParam();
		wxParam.addAttr("amount", amount);
		wxParam.addAttr("mchId", gzhInfo.get("mchId"));
		wxParam.addAttr("appId", gzhInfo.get("appId"));
		wxParam.addAttr("cerPath", gzhInfo.get("cert"));
		wxParam.addAttr("apiKey", gzhInfo.get("apiKey"));
		wxParam.addAttr("openid", fxOpenid);
		wxParam.addAttr("desc", "佣金发放");
		wxParam.addAttr("orderNo", "fx"+withdrawId);
		// 修改提现状态
		Date now = new Date();
		AppParam updateParam = new AppParam("fxWithdrawService", "update");
		updateParam.addAttr("withdrawId", withdrawId);
		updateParam.addAttr("status", "3");
		updateParam.addAttr("sendBy", realName);// 发放人
		updateParam.addAttr("sendTime", now);// 发放时间
		updateParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sho));
		AppResult updateResult = RemoteInvoke.getInstance().call(updateParam);
		if(updateResult.isSuccess()){
			try {
				// 企业付款
				Map<String,String> resultMap = WXRequestUtil.enterprisePay(wxParam);
				String resultCode = resultMap.get("result_code");
				String errCode = resultMap.get("err_code");
				updateParam.addAttr("backTime", now);
				updateParam.addAttr("returnCodeDesc", resultMap.get("err_code_des"));
				updateParam.addAttr("returnCode", StringUtils.isEmpty(errCode) ? resultCode : errCode);
				if("SUCCESS".equals(resultCode)){
					updateParam.addAttr("transactionId", resultMap.get("payment_no"));
					updateParam.addAttr("status", "4");
					//发送模板消息
					AppParam sendParam = new AppParam();
					sendParam.addAttr("custId", withdrawInfo.get("custId"));
					sendParam.addAttr("amount", amount);
					sendCustWithdrawTempMessage(sendParam);
				}else{
					updateParam.addAttr("status", "5");
					if("NOTENOUGH".equals(errCode)){
						result.putAttr("amountLimit", 1);
					}
				}
				RemoteInvoke.getInstance().call(updateParam);
			} catch (Exception e) {
				LogerUtil.error(FxFundUtil.class, e, "enterprisePay error");
				throw new SysException("微信零钱发放失败！");
			}
		}
        return result;
	}
	
	/**
	 * 发放佣金
	 * @param withdrawId
	 * @return
	 */
	private static AppResult sendReward(String withdrawId,String realName){
		// 查询提现记录
		AppParam queryParam = new AppParam("fxWithdrawService", "query");
		queryParam.addAttr("withdrawId", withdrawId);
		queryParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sho));
		AppResult queryResult = RemoteInvoke.getInstance().callNoTx(queryParam);
		if(queryResult.getRows().size() <= 0){
			throw new SysException(DuoduoError.UPDATE_DATA_IS_NOTEXISTS);
		}
		Map<String,Object> withdrawInfo = queryResult.getRow(0);
		String status = StringUtil.getString(withdrawInfo.get("status"));
		if(FxConstant.WITHDRAW_STATUS_4.equals(status)){
			throw new SysException("当前提现记录" + withdrawId + "已发放成功");
		}
		if(!FxConstant.WITHDRAW_STATUS_1.equals(status)){
			throw new SysException("当前状态不允许发放佣金");
		}
		// 判断账户余额是否够发放佣金
		AppParam amountParam = new AppParam();
		amountParam.setService("fxAccountInfoService");
		amountParam.setMethod("queryAmtSummary");
		amountParam.addAttr("type", FxCustomerUtil.ACCOUNT_TYPE);
		amountParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sho));
		AppResult amountResult = RemoteInvoke.getInstance().callNoTx(amountParam);
		if(amountResult.getRows().size() == 0){
			throw new SysException("充值账户尚未进行初始化！");
		}
		Map<String,Object> amtMap = amountResult.getRow(0);
		double fxAmt = NumberUtil.getDouble(amtMap.get("fxAmt"), 0);
		double tradingAmt = NumberUtil.getDouble(amtMap.get("tradingAmt"), 0);
		
		//手续费
		BigDecimal amount = new BigDecimal(withdrawInfo.get("amount").toString()).setScale(2, RoundingMode.HALF_UP);
		BigDecimal poundageAmount = new BigDecimal(withdrawInfo.get("poundageAmount").toString()).setScale(2, RoundingMode.HALF_UP);

		if(fxAmt - tradingAmt < amount.doubleValue()){
			throw new SysException("对公充值账户余额已不足发放佣金！");
		}
		
		AppParam param = new AppParam();
		param.addAttr("bankName", withdrawInfo.get("bankName"));
		param.addAttr("bankCardNo", withdrawInfo.get("bankCardNo"));
		param.addAttr("amount", amount);
		param.addAttr("poundageAmount", poundageAmount);
		Map<String,Object> bankCardInfo = queryBankCard(withdrawInfo.get("custId").toString());
		if(bankCardInfo == null || bankCardInfo.isEmpty()){
			throw new SysException("无绑卡记录信息，不能发放佣金！");
		}
		param.addAttr("telephone", bankCardInfo.get("telephone"));// 绑卡人的手机号
		param.addAttr("realName", bankCardInfo.get("accountName"));// 绑卡人的姓号
		param.addAttr("cardNo", bankCardInfo.get("identityNo"));// 绑卡人的身份证号
		param.addAttr("remark", "信用卡分销提现");
		Map<String,Object> resultMap = callAgentPay(param);
		
		String payStatus = resultMap.get("status").toString();
		// 修改提现状态
		Date now = new Date();
		AppParam updateParam = new AppParam("fxWithdrawService", "update");
		updateParam.addAttr("withdrawId", withdrawId);
		updateParam.addAttr("status", FxConstant.WITHDRAW_STATUS_3);// 交易中
		updateParam.addAttr("sysStatus", FxConstant.W_SYS_STATUS_1);// 交易中
		if("-1".equals(payStatus)){// 当宝付返回失败状态时，提现状态改为1审核通过，提现系统状态为3-发放失败
			updateParam.addAttr("status", FxConstant.WITHDRAW_STATUS_1);// 审核通过
			updateParam.addAttr("sysStatus", FxConstant.W_SYS_STATUS_3);// 3-发放失败
		}
		updateParam.addAttr("returnCode", resultMap.get("errorCode"));
		updateParam.addAttr("returnCodeDesc", resultMap.get("errorMsg"));
		BigDecimal realAmount = new BigDecimal(amount.doubleValue()- poundageAmount.doubleValue()).setScale(2, RoundingMode.HALF_UP);
		updateParam.addAttr("realAmount", realAmount);// 真实提现金额
		updateParam.addAttr("orderNo", resultMap.get("orderNo"));// xxjr平台给宝付订单号
		updateParam.addAttr("transactionId", resultMap.get("orderId"));// 宝付返回成功的订单号
		updateParam.addAttr("backTime", now);
		updateParam.addAttr("sendBy", realName);// 发放人
		updateParam.addAttr("sendTime", now);// 发放时间
		updateParam.addAttr("fromStatus", FxConstant.WITHDRAW_STATUS_1);
		updateParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sho));
		return RemoteInvoke.getInstance().call(updateParam);
	}
	
	/**
	 * 查询佣金发放状态
	 * @param withdrawId
	 * @return
	 */
	public static AppResult queryRewardStatus(String withdrawId){
		// 查询记录
		AppParam queryParam = new AppParam();
		queryParam.setService("fxWithdrawService");
		queryParam.setMethod("query");
		queryParam.addAttr("withdrawId", withdrawId);
		queryParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sho));
		AppResult queryResult = RemoteInvoke.getInstance().callNoTx(queryParam);
		if(queryResult.getRows().size() <= 0){
			throw new SysException(DuoduoError.UPDATE_DATA_IS_NOTEXISTS);
		}
		Map<String,Object> withdrawInfo = queryResult.getRow(0);
		String tranStatus = StringUtil.getString(withdrawInfo.get("status"));
		if (!FxConstant.WITHDRAW_STATUS_3.equals(tranStatus)) {
			throw new SysException("当前状态不允许交易查询");
		}
		
		// 调用宝付接口查询状态
		Object orderNo = withdrawInfo.get("orderNo");
		Map<String,Object> resultMap = callQueryAgentPayStatus(orderNo);
		
		// 修改提现状态
		String status = org.ddq.common.util.StringUtil.getString(resultMap.get("status"));
		if("0".equals(status)){
			// 宝付返回0 代表还在转账中
			throw new SysException("当前交易还在转账中，请稍后再进行状态查询！");
		}
		AppParam updateParam = new AppParam("fxWithdrawService", "queryStatusSuccess");
		if("1".equals(status)){// 当宝付返回成功时，提现状态和系统状态都改为成功
			updateParam.addAttr("status", FxConstant.WITHDRAW_STATUS_4);// 提现成功
			updateParam.addAttr("sysStatus", FxConstant.W_SYS_STATUS_2);// 成功
		}else if("-1".equals(status)){// 当宝付返回失败时，提现状态为审核通过和系统状态都改为失败
			updateParam.addAttr("status", FxConstant.WITHDRAW_STATUS_1);// 审核通过
			updateParam.addAttr("sysStatus",FxConstant.W_SYS_STATUS_3);// 失败
			updateParam.addAttr("returnCode", resultMap.get("errorCode"));
			updateParam.addAttr("returnCodeDesc", resultMap.get("errorMsg"));
		}
		updateParam.addAttr("fromStatus", "3");
		updateParam.addAttr("orderNo", orderNo);
		updateParam.addAttr("withdrawId", withdrawId);
		updateParam.addAttr("amount", withdrawInfo.get("amount"));
		updateParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sho));
		return RemoteInvoke.getInstance().call(updateParam);
	}
	
	/**
	 * 宝付代付接口
	 * @param param
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public static Map<String,Object> callAgentPay(AppParam param){
		AppParam payParam = new AppParam("paymentService","rechargeBackPay");
		payParam.addAttr("payType", "baofoo");
		payParam.addAttr("bankCardNo", param.getAttr("bankCardNo"));
		payParam.addAttr("bankName", param.getAttr("bankName"));
		payParam.addAttr("amount", param.getAttr("amount"));
		payParam.addAttr("payFee", param.getAttr("poundageAmount"));
		payParam.addAttr("telephone", param.getAttr("telephone"));
		payParam.addAttr("holderName",  param.getAttr("realName"));
		payParam.addAttr("identityNo", param.getAttr("cardNo"));
		payParam.addAttr("remark", param.getAttr("remark"));
		payParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_col));
		AppResult payResult = RemoteInvoke.getInstance().call(payParam);
		if(StringUtils.isEmpty(payResult.getAttr("resultMap"))){
			throw new SysException("付款发放请求接口失败");
		}
		Map<String,Object> resultMap = (Map<String,Object>)payResult.getAttr("resultMap");
		LogerUtil.log("payResult resultMap:" + resultMap.toString());
		return resultMap;
	}
	
	/**
	 * 宝付代付接口
	 * @param param
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public static Map<String,Object> callQueryAgentPayStatus(Object orderNo){
		AppParam payParam = new AppParam("paymentService","queryAgentPayStatus");
		payParam.addAttr("payType", "baofoo");
		payParam.addAttr("orderNo", orderNo);
		payParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_col));
		AppResult payResult = RemoteInvoke.getInstance().call(payParam);
		if(StringUtils.isEmpty(payResult.getAttr("resultMap"))){
			throw new SysException("查询付款发放状态接口失败");
		}
		Map<String,Object> resultMap = (Map<String,Object>)payResult.getAttr("resultMap");
		LogerUtil.log("queryAgentPayStatus payResult resultMap:" + resultMap.toString());
		return resultMap;
	}
	
	
	/**
	 * 判断专员用户是否可以申请提现
	 * (在2018-09-07 18:00:00后升级的专员且锁粉未满10人的不可提现)
	 * @param custId
	 * @return
	 */
	public static boolean checkApplyWithdraw(String custId){
		Map<String,Object> custInfo = FxCustomerUtil.getCustIdentify(custId);
		if(FxConstant.FX_GRADE_2.equals(StringUtil.getString(custInfo.get("grade")))){
			AppParam upgradeParam = new AppParam();
			upgradeParam.setService("fxUpgradeRecordService");
			upgradeParam.setMethod("queryCount");
			upgradeParam.addAttr("custId", custId);
			upgradeParam.addAttr("grade", FxConstant.FX_GRADE_2);
			upgradeParam.addAttr("gradeType", "0");
			upgradeParam.addAttr("endCreateTime", "2018-09-07 18:00:00");
			upgradeParam.setRmiServiceName(AppProperties.
					getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sho));
			AppResult upgradeResult = RemoteInvoke.getInstance().callNoTx(upgradeParam);
			int upgradeNums = NumberUtil.getInt(upgradeResult.getAttr(DuoduoConstant.TOTAL_SIZE), 0);
			if (upgradeNums > 0) {
				return true;
			}
			int limitNum = SysParamsUtil.getIntParamByKey("lockFansLimitNum", 10);// 锁粉10人
			AppParam fansParam = new AppParam();
			fansParam.addAttr("referer", custId);
			fansParam.addAttr("inStatus", "1,2");
			int lockNums = FxCustInviteUtil.queryLockNums(fansParam);
			if (lockNums < limitNum) {
				return false;
			}
		}
		return true;
	}
}
