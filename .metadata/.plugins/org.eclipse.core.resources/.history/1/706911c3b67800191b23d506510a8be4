package org.xxjr.busi.util.push.impl;

import java.util.HashMap;
import java.util.Map;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.util.LogerUtil;
import org.ddq.common.util.StringUtil;
import org.ddq.zk.service.RemoteInvoke;
import org.springframework.util.StringUtils;
import org.xxjr.busi.util.CountGradeUtil;
import org.xxjr.busi.util.push.PushCode;
import org.xxjr.busi.util.push.PushPlatformUtils;
import org.xxjr.busi.util.push.PushUtil;
import org.xxjr.sys.util.NumberUtil;
import org.xxjr.sys.util.ServiceKey;
import org.xxjr.sys.util.SysParamsUtil;
@PushCode(19)
public class PushFSLoanUtil implements PushUtil{

	@Override
	public int pushData(Map<String, Object> row,Integer pushType) {
		int status = 2;
		Map<String, Object> config = PushPlatformUtils.getConfigByCode(pushType);
		try {
			if ((!PushPlatformUtils.checkChannelOpen(config))) {
				LogerUtil.log(PushFSLoanUtil.class, config.get("pushName") + "推送未打开");
				return 3;
			}
			if ((!PushPlatformUtils.checkChannelMaxCount(config))) {
				LogerUtil.log(PushFSLoanUtil.class, config.get("pushName") + "推送已达上限");
				return 3;
			}
			if ((!PushPlatformUtils.checkChannelLimit(row, config))) {
				LogerUtil.log(PushFSLoanUtil.class, config.get("pushName") + "筛选条件无法通过");
				return 4;
			}
			if ((!PushPlatformUtils.checkStopDate(config))) {
				LogerUtil.log(PushFSLoanUtil.class, config.get("pushName") + "推送数据推送已暂停");
				return 5;
			}
			String url = SysParamsUtil.getStringParamByKey("push_fsLoan_cfg_url", "http://api.gzfsnet.com/xindai/distribution/import");
			Map<String, String> connParam = sendData(row);
			Map<String, Object> resMap = PushPlatformUtils.httpPost(url, connParam, true);
			if (1 == NumberUtil.getInt(resMap.get("resStatus"), 0)) {
				status = 1;
			}
			AppParam updateParam = new AppParam("thirdPushPoolService", "updateStatus");
			updateParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_busi_in));
			updateParam.addAttrs(row);
			updateParam.addAttr("pushType", pushType);
			updateParam.addAttr("message", resMap.get("res_msg"));
			updateParam.addAttr("status", status);
			RemoteInvoke.getInstance().call(updateParam);
			LogerUtil.log(config.get("pushName") + "推送数据任务 PushFSLoanUtil end");
		} catch (Exception e) {
			LogerUtil.error(PushFSLoanUtil.class, e, "PushFSLoanUtil >>>>>>>>>>>>>>>>>>error");
		}
		return status;
	}
	
	private static Map<String, String> sendData (Map<String, Object> row){
		Map<String, String> connParam = new HashMap<String, String>();
		connParam.put("vender_name", SysParamsUtil.getStringParamByKey("push_fs_cfg_venderName", "dsw"));
		connParam.put("name", StringUtil.objectToStr(row.get("applyName")));
		connParam.put("city", StringUtil.objectToStr(row.get("cityName")));
		connParam.put("sex", NumberUtil.getInt(row.get("sex"), 1) == 1 ? "男" :  "女");
		connParam.put("telphone", StringUtil.objectToStr(row.get("telephone")));
		
		int age = NumberUtil.getInt(row.get("age"), 28);
		if (age <= 22 || age >=60) {
			age = 28;
		}
		String birthDay = PushPlatformUtils.getBirthDay(null, age);
		connParam.put("birthday", birthDay);
		int workType = NumberUtil.getInt(row.get("workType"), 1);
		if (workType == 1 || workType == 4) {
			connParam.put("vocation", "工薪族");
		}else if(workType == 2){
			connParam.put("vocation", "小企业主");
		}else if(workType == 3){
			connParam.put("vocation", "个体户");
		}
		
		double income = 5000;
		if ((!StringUtils.isEmpty(row.get("income"))) && (NumberUtil.getDouble(row.get("income"), 0) > 0)) {
			income = NumberUtil.getDouble(row.get("income"));
		}else if ((!StringUtils.isEmpty(row.get("pubManageLine"))) && (NumberUtil.getDouble(row.get("pubManageLine"), 0) > 0)) {
			double pubManageLine = NumberUtil.getDouble(row.get("pubManageLine"), 0);
			income = (pubManageLine * 10000);
		}else if ((!StringUtils.isEmpty(row.get("cashMonth"))) && (NumberUtil.getDouble(row.get("cashMonth"), 0) > 0)) {
			income = NumberUtil.getDouble(row.get("cashMonth"), 0);
		}
		
		if (income < 2000) {
			connParam.put("salary", "0-1999");
		}else if (income >= 2000 && income < 3000) {
			connParam.put("salary", "2000-2999");
		}else if (income >= 3000 && income < 4000) {
			connParam.put("salary", "4000-5999");
		}else if (income >= 6000 && income < 10000) {
			connParam.put("salary", "6000-9999");
		}else {
			connParam.put("salary", "10000以上");
		}
		
		connParam.put("loan_amount", StringUtil.objectToStr(row.get("loanAmount")));
		connParam.put("loan_time", StringUtil.objectToStr(row.get("loanDeadline")));
		connParam.put("have_credit_card", NumberUtil.getInt(row.get("creditType"), 1) != 2 ? "Y" : "N");
		connParam.put("have_house", CountGradeUtil.judgeHouse(NumberUtil.getInt(row.get("houseType"), 2)) ? "Y" : "N");
		connParam.put("have_car", CountGradeUtil.judgeCar(NumberUtil.getInt(row.get("carType"), 2)) ? "Y" : "N");
		connParam.put("shebao", CountGradeUtil.judgeSocialType(NumberUtil.getInt(row.get("socialType"), 2)) ? "Y" : "N");
		connParam.put("have_fund", CountGradeUtil.judgeFundType(NumberUtil.getInt(row.get("fundType"), 2)) ? "Y" : "N");
		connParam.put("have_baoxian", CountGradeUtil.judgeInsurType(NumberUtil.getInt(row.get("insurType"), 0)) ? "Y" : "N");
		connParam.put("has_wld_loan", NumberUtil.getInt(row.get("havePinan"), 0) > 0 ? "Y" : "N");
		return connParam;
	}

}
