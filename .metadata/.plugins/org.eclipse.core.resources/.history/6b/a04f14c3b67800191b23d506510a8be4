package org.xxjr.busi.util.push.impl;

import java.util.Base64;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.util.DateUtil;
import org.ddq.common.util.LogerUtil;
import org.ddq.common.util.StringUtil;
import org.ddq.zk.service.RemoteInvoke;
import org.springframework.util.StringUtils;
import org.xxjr.busi.util.CountGradeUtil;
import org.xxjr.busi.util.push.PushCode;
import org.xxjr.busi.util.push.PushPlatformUtils;
import org.xxjr.sys.util.NumberUtil;
import org.xxjr.sys.util.ServiceKey;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;

@PushCode(12)
public class PushYouXinUtil implements org.xxjr.busi.util.push.PushUtil{
	
//	private static final String test_url = "https://test-hallelujah.ucredit.com/hallelujah/customerInfo/uploadCustomerInfo";
	
	private static final String url = "https://hallelujah.ucredit.com/hallelujah/customerInfo/uploadCustomerInfo";
	
	private static final Map<String, String> headers = new HashMap<String, String>();
	static{
		String userName = "daishangwo";
		String password = "Dsw123456@";/*测试:akjhsdkj23JSm 正式:Dsw123456@*/
		String base64Str = Base64.getEncoder().encodeToString((userName + ":" + password).getBytes());
		headers.put("Authorization", "Basic " + base64Str);
	}
	
	@Override
	public int pushData(Map<String, Object> row, Integer pushType) {
		int status = 2;
		try {
			Map<String, Object> config = PushPlatformUtils.getConfigByCode(pushType);
			
			if ((!PushPlatformUtils.checkChannelOpen(config))) {
				LogerUtil.log(PushYouXinUtil.class, config.get("pushName") + "推送未打开");
				return 3;
			}
			if ((!PushPlatformUtils.checkChannelMaxCount(config))) {
				LogerUtil.log(PushYouXinUtil.class, config.get("pushName") + "推送已达上限");
				return 3;
			}
			if ((!PushPlatformUtils.checkChannelLimit(row, config))) {
				LogerUtil.log(PushYouXinUtil.class, config.get("pushName") + "筛选条件无法通过");
				return 4;
			}
			if ((!PushPlatformUtils.checkStopDate(config))) {
				LogerUtil.log(PushYouXinUtil.class, config.get("pushName") + "推送数据推送已暂停");
				return 5;
			}
			
			String json = dataToJson(row);
			Map<String, String> connParam = new HashMap<String, String>();
			connParam.put("customerList", json);
			Map<String, Object> resMap = PushPlatformUtils.httpPost(url, connParam, null, true, headers);
			if ("0".equals(StringUtil.getString(resMap.get("code")))) {
				status = 1;
			}
			AppParam updateParam = new AppParam("thirdPushPoolService", "updateStatus");
			updateParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_busi_in));
			updateParam.addAttrs(row);
			updateParam.addAttr("pushType", pushType);
			updateParam.addAttr("status", status);
			updateParam.addAttr("msg", resMap.get("msg"));
			RemoteInvoke.getInstance().call(updateParam);
			LogerUtil.log("友信数据推送 任务 PushYouXinUtil end");
		} catch (Exception e) {
			LogerUtil.error(PushYouXinUtil.class, e, "PushYouXinUtil >>>>>>>>>>>>>>>>>>error");
		}
		return status;
	}
	
	private String dataToJson (Map<String, Object> row) {
		JSONObject context = new JSONObject();
		context.put("totalCount", 1);
		JSONArray customerList = new JSONArray();
		JSONObject customer = new JSONObject();
		customer.put("sales_project_id", "合作数据");
		customer.put("source_id", "贷上我秒贷");
		customer.put("belong_city", row.get("cityName"));
		customer.put("name", row.get("applyName"));
		customer.put("gender", NumberUtil.getInt(row.get("sex"), 1) == 1 ? "男" : "女");
		customer.put("id_number", row.get("identifyNo"));
		customer.put("acdamic_type_id", row.get("education"));
		Integer income = 1000;
		if ((!StringUtils.isEmpty(row.get("income"))) && (NumberUtil.getInt(row.get("income"), 0) > 0)) {
			income = NumberUtil.getInt(row.get("income"));
		}else if ((!StringUtils.isEmpty(row.get("pubManageLine"))) && (NumberUtil.getInt(row.get("pubManageLine"), 0) > 0)) {
			int pubManageLine = NumberUtil.getInt(row.get("pubManageLine"), 0);
			income = (pubManageLine * 10000);
		}else if ((!StringUtils.isEmpty(row.get("cashMonth"))) && (NumberUtil.getInt(row.get("cashMonth"), 0) > 0)) {
			income = NumberUtil.getInt(row.get("cashMonth"));
		}
		customer.put("monthly_income", income);
		customer.put("sales_delivery_type", NumberUtil.getInt(row.get("wagesType"), 1) == 1 ? "转账" : "现金");
		int socialType = NumberUtil.getInt(row.get("socialType"));
		customer.put("is_social", CountGradeUtil.judgeSocialType(socialType) ? "Y" : "N");
		customer.put("apply_amount", row.get("loanAmount"));
		customer.put("phase", row.get("loanDeadline"));
		customer.put("apply_date_time", DateUtil.toStringByParttern(new Date(), DateUtil.DATE_PATTERN_YYYY_MM_DD));
		customer.put("cellphone", row.get("telephone"));
		customerList.add(customer);
		context.put("customerList", customerList);
		return context.toJSONString();
	}

}
