package org.xxjr.mq.listener.receiver;

import java.util.Map;

import javax.annotation.PreDestroy;

import org.apache.commons.lang.StringUtils;
import org.ddq.active.mq.XxjrMqSendUtil;
import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.util.LogerUtil;
import org.ddq.common.util.StringUtil;
import org.llw.ddq.mq.rabbitmq.RabbitMqConfig;
import org.llw.xxjr.cust.util.wz.WzConstant;
import org.llw.xxjr.cust.util.wz.WzCustomerUtil;
import org.ddq.common.core.service.RemoteInvoke;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.xxjr.mq.listener.consumer.RabbitMqConsumer;
import org.xxjr.mq.listener.util.XxjrInitAnnotation;
import org.xxjr.sys.util.NumberUtil;
import org.xxjr.sys.util.ServiceKey;

@Component
@XxjrInitAnnotation(beanName="wzCardReceiver",initMethod="init")
public class WzCardReceiver extends RabbitMqConsumer {
	
	@Autowired
	private RabbitMqConfig rabbitMqConfig;
	
	@Value("${rabbit.queue.wzCard}")
	private String queueName;
	
	/***
	 * 接收消息
	 * @param messageInfo
	 */
	public void onMessage(Map<String, Object> messageInfo) {
		try {
			LogerUtil.log("WzCardReceiver params:" + messageInfo.toString());
			String messageType = StringUtil.getString(messageInfo.get("messageType"));
			LogerUtil.log("messageType:" + messageType);
			if("createCardType".equals(messageType)){//创建微名片保存操作记录和消息通知
				createCard(messageInfo);
			}else if("notifyAndRecordType".equals(messageType)){//保存操作记录和消息通知
				notifyAndRecord(messageInfo);
			}else if("recordType".equals(messageType)){//增加操作记录
				addHandleRecord(messageInfo);
			}else if("notifyType".equals(messageType)){//增加消息记录
				addNotify(messageInfo);
			}
		} catch (Exception e) {
			LogerUtil.error(WzCardReceiver.class, e, "WzCardReceiver mq execute error!");
			XxjrMqSendUtil.saveFailureLog("WzCardReceiver", messageInfo);
		}

	}
	
	@Override
	public void init(String queueName ,RabbitMqConfig rabbitMqConfig) {
		super.init(queueName,rabbitMqConfig);
	}
	
    public void init() {
		init(queueName,rabbitMqConfig);
	}
	
	@PreDestroy
	public void destroy(){
		reaseResource();
	}
	
	/**
	 * 创建微名片保存操作记录和消息通知
	 * @param 
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public static void createCard(Map<String,Object> messageMap){
		Map<String,Object> dealMap = (Map<String,Object>)messageMap.get("dealParams");
		String customerId = StringUtil.getString(dealMap.get("customerId"));
		String mesCategory = StringUtil.getString(dealMap.get("mesCategory"));
		String messNoType = StringUtil.getString(dealMap.get("messNoType"));
		String status = StringUtil.getString(dealMap.get("status"));
		String handleType = StringUtil.getString(dealMap.get("handleType"));
		AppParam queryParam = new AppParam("wzCustService","queryCount");
		queryParam.addAttr("handleType", handleType);
		queryParam.addAttr("customerId", customerId);
		queryParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_zx));
		AppResult 	queryResult = RemoteInvoke.getInstance().call(queryParam);
		int totalSize = NumberUtil.getInt(queryResult.getAttr(DuoduoConstant.TOTAL_SIZE));
		if(totalSize == 0){
			//操作记录
			AppParam recordParam = new AppParam();
			recordParam.addAttr("customerId", customerId);
			recordParam.addAttr("handleType", handleType);
			recordParam.addAttr("handleDesc", "创建微名片");
			WzCustomerUtil.insertHandleRecord(recordParam);
			
			//消息通知
			AppParam notifyParam = new AppParam();
			notifyParam.addAttr("customerId", customerId);
			notifyParam.addAttr("status", status);
			notifyParam.addAttr("messNoType", messNoType);
			notifyParam.addAttr("mesCategory", mesCategory);
			notifyParam.addAttr("notifyTitle", "创建成功");
			notifyParam.addAttr("notifyText", "创建微名片成功");
			notifyParam.addAttr("mesStatus", WzConstant.WZ_MESSAGE_RESTATUS_1);
			WzCustomerUtil.addCardMessageNotify(notifyParam);
		}
	}
	
	/**
	 * 交换微名片保存操作记录和消息通知
	 * @param 
	 * @return
	 */
	public static void notifyAndRecord(Map<String,Object> messageMap){
		addNotify(messageMap);
		addHandleRecord(messageMap);
	}
	
	/***
	 * 增加通知消息
	 * @param messageMap
	 */
	@SuppressWarnings("unchecked")
	private static void addNotify(Map<String,Object> messageMap){
		Map<String,Object> dealMap = (Map<String,Object>)messageMap.get("dealParams");
		String recordCustId = StringUtil.getString(dealMap.get("recordCustId"));
		String notifyCustId = StringUtil.getString(dealMap.get("notifyCustId"));
		String notifyText = StringUtil.getString(dealMap.get("notifyText"));
		String notifyTitle = StringUtil.getString(dealMap.get("notifyTitle"));
		String messNoType = StringUtil.getString(dealMap.get("messNoType"));
		String status = StringUtil.getString(dealMap.get("status"));
		String mesCategory = StringUtil.getString(dealMap.get("mesCategory"));
		String mesStatus = StringUtil.getString(dealMap.get("mesStatus"));
		//消息通知
		AppParam notifyParam = new AppParam();
		notifyParam.addAttr("customerId", notifyCustId);
		notifyParam.addAttr("status", status);
		notifyParam.addAttr("messNoType", messNoType);
		notifyParam.addAttr("mesCategory", mesCategory);
		notifyParam.addAttr("notifyTitle", notifyTitle);
		notifyParam.addAttr("notifyText", notifyText);
		notifyParam.addAttr("mesStatus", StringUtils.isEmpty(mesStatus) 
				? WzConstant.WZ_MESSAGE_RESTATUS_1 : mesStatus);
		notifyParam.addAttr("custId", recordCustId);
		WzCustomerUtil.addCardMessageNotify(notifyParam);
	}
	
	/***
	 * 增加记录消息
	 * @param messageMap
	 */
	@SuppressWarnings("unchecked")
	private static void addHandleRecord(Map<String,Object> messageMap){
		Map<String,Object> dealMap = (Map<String,Object>)messageMap.get("dealParams");
		String recordCustId = StringUtil.getString(dealMap.get("recordCustId"));
		String handleDesc = StringUtil.getString(dealMap.get("handleDesc"));
		String handleType = StringUtil.getString(dealMap.get("handleType"));
		//操作记录
		AppParam recordParam = new AppParam();
		recordParam.addAttr("customerId", recordCustId);
		recordParam.addAttr("handleType", handleType);
		recordParam.addAttr("handleDesc", handleDesc);
		WzCustomerUtil.insertHandleRecord(recordParam);
	}
}
