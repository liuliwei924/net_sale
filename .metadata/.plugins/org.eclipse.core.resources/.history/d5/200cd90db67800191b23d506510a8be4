package org.xxjr.busi.util.borrow;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.ddq.active.mq.message.CustMessageSend;
import org.ddq.active.mq.message.RmiServiceSend;
import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.core.SpringAppContext;
import org.ddq.common.exception.AppException;
import org.ddq.common.exception.SysException;
import org.ddq.common.util.DateUtil;
import org.ddq.common.util.LogerUtil;
import org.ddq.common.util.StringUtil;
import org.ddq.zk.service.RemoteInvoke;
import org.springframework.util.StringUtils;
import org.xxjr.busi.util.BorrowConstant;
import org.xxjr.busi.util.BorrowErrorCode;
import org.xxjr.busi.util.dai.BorrowHandleUtil;
import org.xxjr.cust.util.fund.MjbCustAmountUtil;
import org.xxjr.cust.util.info.MjbCustFundUtil;
import org.xxjr.cust.util.info.MjbCustomerIdentify;
import org.xxjr.cust.util.info.MjbCustomerUtil;
import org.xxjr.goods.util.ScoreUtil;
import org.xxjr.sys.util.NumberUtil;
import org.xxjr.sys.util.ServiceKey;
import org.xxjr.sys.util.SysParamsUtil;

public class MjbBorrowRobUtil {
	/***
	 * 获取每轮免费剩余单量
	 * @return
	 */
	public static int getMjbFreeRobNumber(String appType,Date robTime,int number){
		AppParam paramRob = new AppParam();
		paramRob.addAttr("recordDate", DateUtil.toStringByParttern(new Date(), DateUtil.DATE_PATTERN_YYYY_MM_DD));
		if(robTime == null){
			paramRob.addAttr("robTime", DateUtil.toStringByParttern(new Date(), DateUtil.DATE_PATTERN_YYYY_MM_DD_HHMMSS));
		}else{
			paramRob.addAttr("robTime", DateUtil.toStringByParttern(robTime, DateUtil.DATE_PATTERN_YYYY_MM_DD_HHMMSS));
		}
		paramRob.addAttr("appType", appType);
		paramRob.addAttr("roundNum", number);
		paramRob.setService("freeRobCountService");
		paramRob.setMethod("queryFreeRobNum");
		paramRob.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_mjb));
		AppResult result = RemoteInvoke.getInstance().call(paramRob);
		return NumberUtil.getInt(result.getAttr(DuoduoConstant.TOTAL_SIZE), 0);
	}
	
	/**
	 *免费抢单(马甲包)
	 * @param params
	 * @return
	 */
	public static AppResult mjbFreeRobHandle(AppParam params) {
		AppResult result = new AppResult();
		String customerId = StringUtil.getString(params.getAttr("customerId"));
		Object borrowId = params.getAttr("borrowId");
		if(StringUtils.isEmpty(customerId) || StringUtils.isEmpty(borrowId)){
			result.setSuccess(false);
			result.setMessage("缺少必要参数");
			return result;
		}
		// 判断用户是否工作认证
		Map<String,Object> custInfo = MjbCustomerIdentify.getCustIdentify(customerId);
		String cardStatus = StringUtil.getString(custInfo.get("cardStatus"));
		String custStatus = StringUtil.getString(custInfo.get("status"));
		String appType = StringUtil.objectToStr(params.getAttr("appType"));
		if(!"1".equals(cardStatus)){
			result.setMessage("因您的工作认证还未通过审核，暂不能免费抢单，请稍后再试");
			result.setSuccess(false);
			return result;
		}
		if(!"1".equals(custStatus)){
			result.setMessage("您当前信息状态不正确，无法提供该功能");
			result.setSuccess(false);
			return result;
		}
		
		// 判断当轮剩余单量是否足够
		String timeCfg = MjbBorrowRobUtil.getMjbFreeRobTimeCfg();
		int[] fistRound =  ScoreUtil.transferToInt(timeCfg.split("-"));
		int hour = Calendar.getInstance().get(Calendar.HOUR_OF_DAY);
		int freeNum = 0;// 免费剩余单量
		int roundNum = 0;// 当前轮数
		if (hour == fistRound[1]) {
			freeNum = MjbBorrowRobUtil.getMjbFreeRobNumber(appType, new Date(),fistRound[0]);// 查询当轮剩余单量
			roundNum = fistRound[0];
		}
		
		if (freeNum <= 0) {
			result.setMessage("现在已经没有免费抢单名额了!");
			result.setSuccess(false);
			return result;
		}
		
		// 判断用户当天是否已抢过免费单子
		if(MjbBorrowRobUtil.haveMjbFreeRob(customerId,appType)){
			result.setMessage("您已经使用今天的免费抢单名额，请明天再来");
			result.setSuccess(false);
			return result;
		}
		
		// 查询直借单子信息
		AppParam queryBorrow = new AppParam();
		queryBorrow.setService("daiBorrowService");
		queryBorrow.setMethod("query");
		queryBorrow.addAttr("borrowId",borrowId);
		queryBorrow.addAttr("status","0");
		queryBorrow.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
		AppResult borrowResult = RemoteInvoke.getInstance().callNoTx(queryBorrow);
		if (borrowResult.getRows().size() == 0) {
			result.setSuccess(Boolean.FALSE);
			result.setMessage("单子记录不存在！");
			return result;
		}
		Map<String,Object> borrowInfo = borrowResult.getRow(0);
		int sourceType = Integer.valueOf(borrowInfo.get("sourceType").toString());
		int robType = Integer.valueOf(borrowInfo.get("robType").toString());
		if (BorrowErrorCode.RobType_1 != robType) {
			result.setSuccess(Boolean.FALSE);
			result.setMessage("该单不能免费抢，可通过余额购买！");
			return result;
		}
		if(sourceType ==1 && customerId.equals(borrowInfo.get("customerId").toString())){
			result.setSuccess(Boolean.FALSE);
			result.setMessage("不能抢自己的借款");
			return result;
		}
		
		//调用 卡牛接单处理
		if(sourceType ==BorrowErrorCode.BorrowSource_2 && 
				borrowInfo.get("telephone").toString().indexOf("*")!=-1){
			AppParam updateParam = new AppParam("thirdSaleDataService", "recieveData");
			updateParam.addAttr("recordId", borrowInfo.get("customerId"));
			updateParam.addAttr("borrowId", borrowId);
			updateParam.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
			AppResult updateResult = RemoteInvoke.getInstance().call(updateParam);
			if (!StringUtils.isEmpty(updateResult.getAttr("telephone"))) {
				borrowInfo.put("telephone", updateResult.getAttr("telephone"));
			}
			LogerUtil.log("BorrowSource_2 recieveData:" +  borrowId);
		}
		
		
		//修改busi里面的单子
		AppParam delParam = new AppParam("daiBorrowService", "update");
		delParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_busi));
		delParam.addAttr("status", 1);
		delParam.addAttr("borrowId", borrowId);
		result = RemoteInvoke.getInstance().call(delParam);
		
		if(result.isSuccess()){
			
			//调用 马甲包抢单逻辑
			AppParam paramRob = new AppParam();
			paramRob.addAttr("customerId", customerId);
			paramRob.addAttr("borrowId",borrowId);
			paramRob.addAttr("sourceType",sourceType);
			paramRob.addAttr("appType",appType);
			paramRob.addAttr("roundNum",roundNum);
			paramRob.addAttr("robWay",BorrowErrorCode.RobType_1);
			paramRob.addAttr("daiInfo", borrowResult.getRow(0));
			paramRob.setService("freeRobRecordService");
			paramRob.setMethod("freeRobHandle");
			paramRob.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_mjb));
			RemoteInvoke.getInstance().call(paramRob);
			
			//同步busiIn状态
			Map<String, Object> selParamsMap = new HashMap<String, Object>();
			selParamsMap.put("customerId", customerId);
			selParamsMap.put("ticketId", null);
			selParamsMap.put("applyId", borrowInfo.get("applyId"));
			selParamsMap.put("channelDetail", borrowInfo.get("sourceName"));
			selParamsMap.put("borrowId", borrowId);
			selParamsMap.put("robWay", BorrowErrorCode.RobType_1);
			selParamsMap.put("receiveId", result.getAttr("receiveId"));
			selParamsMap.put("discount",1);
			selParamsMap.put("costScore", 0);
			selParamsMap.put("costPrice",0);
			selParamsMap.put("robTime", result.getAttr("robTime"));
			selParamsMap.put("service", "custAmountService");
			selParamsMap.put("method", "updateDiscount");
			selParamsMap.put("rmiServiceName", AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_mjb));
			try {
				RmiServiceSend messageSend = SpringAppContext.getBean(RmiServiceSend.class);
				messageSend.sendExecuteMessage(selParamsMap);
			} catch (Exception e) {
				LogerUtil.error(BorrowRobUtils.class, e, "同步busiIn折扣 error");
			}
		}
		return result;
	}
	
	/**
	 * 使用余额抢单(马甲包)
	 * @param params
	 * @return
	 */
	public static AppResult mjbRobByAmount(AppParam params){
		if(StringUtils.isEmpty(params.getAttr("customerId")) || StringUtils.isEmpty(params.getAttr("borrowId"))){
			return MjbCustomerUtil.retErrorMsg("没有选择要处理的直借信息");
		}
		String customerId = params.getAttr("customerId").toString();
		// 判断状态
		Map<String,Object> custInfo = MjbCustomerIdentify.getCustIdentify(customerId);
		String cardStatus = StringUtil.objectToStr(custInfo.get("cardStatus"));
		if(!"1".equals(cardStatus)){
			throw new SysException("因您的工作认证还未通过审核，暂不能免费抢单，请稍后再试");
		}
		if(!"1".equals(custInfo.get("status").toString())){
			throw new SysException("您当前信息状态不正确，无法提供该功能");
		}
		
		Object borrowId = params.getAttr("borrowId");
		AppParam queryBorrow = new AppParam();
		queryBorrow.addAttr("borrowId",borrowId);
		queryBorrow.addAttr("status","0");
		Map<String,Object> borrowInfo = BorrowUtils.queryBorrowInfo(queryBorrow);
		if(borrowInfo == null || borrowInfo.isEmpty()){//判断是否被其他人处理
			throw new AppException(BorrowErrorCode.BORROW_HAD_ROBED);
		}
		
		String lockCustId = StringUtil.getString(borrowInfo.get("lockCustId"));
		String lockTime = StringUtil.getString(borrowInfo.get("lockTime"));
		/*if (StringUtils.isEmpty(lockCustId) || StringUtils.isEmpty(lockTime)) {
			return MjbCustomerUtil.retErrorMsg("对不起，你未锁定该单，");
		}*/
		
		int daiBorrowLockTime = SysParamsUtil.getIntParamByKey("daiBorrowLockTime", 5);
		if (!StringUtils.isEmpty(lockTime) && !StringUtils.isEmpty(lockCustId)) {
			Date lockDateTime = DateUtil.plus(
					DateUtil.toLocalDateTime(lockTime, DateUtil.DATE_PATTERN_YYYY_MM_DD_HHMMSS),
					daiBorrowLockTime, DateUtil.ChronoUnit_MINUTES);
			//判断锁定情况
			if(lockDateTime.after(new Date())
					&& !StringUtils.isEmpty(lockCustId) 
					&& !customerId.equals(lockCustId)){
				return MjbCustomerUtil.retErrorMsg("你手慢了，此单已被其他人锁定！");
			}
		}
		
		
		int robWay = StringUtils.isEmpty(params.getAttr("robWay")) ? BorrowErrorCode.RobType_5
				: Integer.parseInt(params.getAttr("robWay").toString());

		Map<String, Object> amtMap = MjbCustAmountUtil.getCustAmount(customerId);
		double usableAmount = Double.parseDouble(amtMap.get("usableAmount").toString());
		int sourceType = Integer.valueOf(borrowInfo.get("sourceType").toString());
		BigDecimal priceObj = new BigDecimal(borrowInfo.get("price").toString());
		double price = priceObj.divide(new BigDecimal(100)).doubleValue();
		
		// 使用了打折券
		String ticketId = StringUtil.getString(params.getAttr("ticketId"));
		Map<String, Object> ticketInfoMap = useTicket(customerId, price, ticketId);

		double saveAmount = NumberUtil.getDouble(ticketInfoMap.get("savePrice"),0);			//省的金额
		price = price - saveAmount;
		if(usableAmount < price){
			return MjbCustomerUtil.retErrorMsg("您当前账户余额不足，请充值");
		}
		
		if(sourceType ==1 && customerId.equals(borrowInfo.get("customerId").toString())){
			return MjbCustomerUtil.retErrorMsg("不能抢自己的借款!");
		}
		
		//调用 卡牛接单处理
		if(sourceType ==BorrowErrorCode.BorrowSource_2 && 
				borrowInfo.get("telephone").toString().indexOf("*")!=-1){
			AppParam updateParam = new AppParam("thirdSaleDataService", "recieveData");
			updateParam.addAttr("recordId", borrowInfo.get("customerId"));
			updateParam.addAttr("borrowId", borrowId);
			updateParam.addAttr("sucPrice", price);
			updateParam.addAttr("discount", amtMap.get("discount"));
			updateParam.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + "busi"));
			AppResult updateResult = RemoteInvoke.getInstance().call(updateParam);
			if (!StringUtils.isEmpty(updateResult.getAttr("telephone"))) {
				borrowInfo.put("telephone", updateResult.getAttr("telephone"));
			}
			LogerUtil.log("BorrowSource_2 recieveData:" +  borrowId);
		}
		
		AppResult result = new AppResult();
		//调用 抢单逻辑
		
		//修改busi里面的单子
		AppParam delParam = new AppParam("daiBorrowService", "update");
		delParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_busi));
		delParam.addAttr("fromStatus", "0");
		delParam.addAttr("status", 1);
		delParam.addAttr("borrowId", borrowId);
		delParam.addAttr("unLock", 1);
		AppResult delResult = RemoteInvoke.getInstance().call(delParam);
		if(delResult.isSuccess()){
			String telephone = StringUtil.getString(custInfo.get("telephone"));
			boolean isTest = BorrowHandleUtil.isTestTelephone(telephone);
			
			AppParam paramRob = new AppParam();
			paramRob.addAttr("customerId", customerId);
			paramRob.addAttr("borrowId",borrowId);
			paramRob.addAttr("price",price*100);
			paramRob.addAttr("robWay", robWay);
			paramRob.addAttr("isTest", isTest);
			paramRob.addAttr("ticketId", ticketId);
			paramRob.addAttr("saveAmount", saveAmount*100);
			paramRob.addAttr("discount", amtMap.get("discount"));
			paramRob.addAttr("daiInfo", borrowInfo);
			paramRob.setService("daiBorrowReService");
			paramRob.setMethod("robBorrow");
			LogerUtil.log("paramRob.getMethod:" + paramRob.getMethod());
			paramRob.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_mjb));
			result = RemoteInvoke.getInstance().call(paramRob);
			
			if(!isTest && result.isSuccess() 
					&& !StringUtils.isEmpty(result.getAttr("receiveId"))){
				//给贷款客户推送短信
				MjbBorrowRobUtil.sendMessage(borrowId.toString());
			}
			
		}
		result.putAttr("robPrice", price);// 单子价格
		result.putAttr("saveAmount", saveAmount);// 节省金额
		return result;
	}
	
	
	/**
	 * 使用券
	 * 计算用券省的金额
	 * @param customerId
	 * @param price
	 * @param ticketId
	 * @return
	 */
	private static Map<String, Object> useTicket(String customerId, double price, String ticketId){
		Map<String, Object> map = new HashMap<String, Object>();
		double savePrice = 0;
		if(!StringUtils.isEmpty(ticketId)){
			// 判断是否有效
			Map<String,Object> ticketInfo = MjbCustFundUtil.queryCustTicket(customerId, ticketId);
			if(ticketInfo == null || ticketInfo.size() == 0){
				throw new SysException("该抢单券无效");
			}
			String startDate = StringUtil.getString(ticketInfo.get("startDate"));
			String endDate = StringUtil.getString(ticketInfo.get("endDate"));
			if(!MjbCustFundUtil.canUse(startDate,endDate)){
				throw new SysException("该抢单券已过期，不能使用");
			}
			// 最高抵扣金额
			double maxDiscountAmount = NumberUtil.getDouble(ticketInfo.get("maxDiscountAmount"), 0);
			// 最小订单价格
			double minPrice = NumberUtil.getDouble(ticketInfo.get("minPrice"), 0);
			// minPrice 限订单最小金额，如：订单金额限50元以上，包括50元
			if ((minPrice > 0 && price < minPrice)) {
				throw new SysException("该单不能使用抢单券");
			}

			if ((minPrice == 0 && price <= maxDiscountAmount) || (minPrice > 0 && price <= maxDiscountAmount)) {
				savePrice = price;
			} else {
				savePrice = maxDiscountAmount;
			}
		}
		map.put("savePrice", savePrice);
		return map;
	}

	
	/**
	 * 成功抢单给贷款客户推送短信
	 * @param borrowId
	 */
	public static void sendMessage(String borrowId){
		if(0 == SysParamsUtil.getIntParamByKey("mjb_sendSmsToBorrower", 0)){
			return;
		}
		try {
			//查询用户信息
			AppParam queryBorrow = new AppParam();
			queryBorrow.addAttr("borrowId",borrowId);
			Map<String,Object> borrowInfo = queryMjbBorrowInfo(queryBorrow);
			Object realName = borrowInfo.get("realName");
			Object customerId = borrowInfo.get("customerId");
			//推送消息
			Map<String, Object> paramsMap = new HashMap<String, Object>();
			paramsMap.put("realName",realName);
			paramsMap.put("telephone", borrowInfo.get("telephone"));
			paramsMap.put("isMjb", "加入马甲包参数");
			CustMessageSend messageSend = SpringAppContext.getBean(CustMessageSend.class);
			//发送处理，用户为空时增加判断
			messageSend.sendCustMessage(customerId==null?null:customerId.toString(), "mjbDaiRobSuccess", paramsMap);
		} catch (Exception e) {
			LogerUtil.error(MjbBorrowRobUtil.class, e, "sendMessage error");
		}
	}
	
	
	/**
	 * 获取免费抢单时间配置,马甲包的
	 */
	public static String getMjbFreeRobTimeCfg(){
		String freeRobTimeCfg = SysParamsUtil.getStringParamByKey("mjb_freeRobTimeCfg","1-10-11");
		return freeRobTimeCfg;
	}
	
	/**
	 * 查询客户当天是可以免费抢单(马甲包)
	 * 可以免费抢单返回 true,不可以，返回false
	 * @param params
	 * @return
	 */
	public static boolean haveMjbFreeRob(Object customerId,String appType){
		AppParam queryParam = new AppParam();
		queryParam.setService("freeRobRecordService");
		queryParam.setMethod("queryCount");
		queryParam.addAttr("appType", appType);
		queryParam.addAttr("customerId", customerId);
		queryParam.addAttr("checkCount", "1");
		queryParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_mjb));
		AppResult queryResult = RemoteInvoke.getInstance().call(queryParam);
		int maxCount = SysParamsUtil.getIntParamByKey("mjb_freeRobMaxCount", 1);
		return (NumberUtil.getInt(queryResult.getAttr(DuoduoConstant.TOTAL_SIZE), 0)>=maxCount);
	}
	
	/**
	 * 获取借款信息
	 * @param borrowId
	 * @return
	 */
	public static Map<String,Object> queryBorrowInfo(AppParam queryBorrow){
		queryBorrow.setService("daiBorrowService");
		queryBorrow.setMethod("query");
		queryBorrow.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_mjb));
		AppResult result = RemoteInvoke.getInstance().call(queryBorrow);
		if(result.getRows().size() > 0){
			return result.getRow(0);
		}
		return null;
	}
	
	/**
	 * 获取借款信息(马甲包)
	 * @param borrowId
	 * @return
	 */
	public static Map<String,Object> queryMjbBorrowInfo(AppParam queryBorrow){
		queryBorrow.setService("daiBorrowService");
		queryBorrow.setMethod("query");
		queryBorrow.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_mjb));
		AppResult result = RemoteInvoke.getInstance().call(queryBorrow);
		if(result.getRows().size() > 0){
			return result.getRow(0);
		}
		return new HashMap<String, Object>();
	}
	
	
	/**
	 * 计算最优 抢单券
	 */
	public static List<Map<String, Object>> getOptimalTicket(List<Map<String, Object>> custTickets, double price){
		List<Map<String, Object>> ticketList = new ArrayList<Map<String, Object>>();
		if(custTickets.size() == 0){
			return ticketList;
		}
		for(Map<String,Object> ticketInfo : custTickets){
			double savePrice = 0;
			String startDate = StringUtil.getString(ticketInfo.get("startDate"));
			String endDate = StringUtil.getString(ticketInfo.get("endDate"));
			if(!MjbCustFundUtil.canUse(startDate,endDate)){
				continue;
			}
			// 最高抵扣金额
			double maxDiscountAmount = NumberUtil.getDouble(ticketInfo.get("maxDiscountAmount"), 0);
			// 最小订单价格
			double minPrice = NumberUtil.getDouble(ticketInfo.get("minPrice"), 0);
			if (minPrice > 0 && price < minPrice) {
				continue;
			}
			if ((minPrice == 0 && price <= maxDiscountAmount) || (minPrice > 0 && price <= maxDiscountAmount)) {
				savePrice = price;
			} else {
				savePrice = maxDiscountAmount;
			}
			ticketInfo.put("savePrice", savePrice);
			ticketList.add(ticketInfo);
		}
		if(ticketList.size() == 0){
			return ticketList;
		}
		ticketList = ticketList.stream().sorted(Comparator.comparing(MjbBorrowRobUtil::comparingByPrice).reversed()
            	.thenComparing(Comparator.comparing(MjbBorrowRobUtil::comparingByEndDate))
				).collect(Collectors.toList());
		return ticketList;
	}
	
	private static double comparingByPrice(Map<String, Object> map){
        return Double.valueOf(map.get("savePrice").toString());
    }

	private static String comparingByEndDate(Map<String, Object> map){
        return (String) map.get("endDate");
    }
	
	/**
	 * 判断是否可以申请退单
	 * @param map
	 * @return
	 */
	public static boolean canBorrowBack(Map<String, Object> borrowInfo, int canBackDate){
		String robWay = StringUtil.getString(borrowInfo.get("robWay"));
		String robPriceStr = StringUtil.getString(borrowInfo.get("robPrice"));
		String receiveStatus = StringUtil.getString(borrowInfo.get("robStatus"));
		Date createTime = DateUtil.toDateByString(StringUtil.getString(borrowInfo.get("createTime")),
				DateUtil.DATE_PATTERN_YYYY_MM_DD_HHMMSS);
		// 判断是否免费单
		if(BorrowConstant.RobWay_1.equals(robWay)){
			return false;
		}
		// 判断是否已申请退单
		if(BorrowConstant.receiveStatus_5.equals(receiveStatus)){
			return false;
		}
		
		//只有新订单  跟进中 和进行跟进的状态才可以退款
		if (!"1".equals(receiveStatus) && !"7".equals(receiveStatus) && !"8".equals(receiveStatus)) {
			return false;
		}
		
		// 判断抢单时间 3天内抢的单可退
		Date threeDayDate = DateUtil.toDateByString(DateUtil
				.toStringByParttern(
						DateUtil.getNextDay(new Date(), -canBackDate),
						DateUtil.DATE_PATTERN_YYYY_MM_DD),
				DateUtil.DATE_PATTERN_YYYY_MM_DD);
		if(createTime.getTime() < threeDayDate.getTime()){
			return false;
		}
		// 判断是否为免单劵或价格为0的单子
		double robPrice = NumberUtil.getDouble(robPriceStr, 0);
		if (robPrice == 0) {
			return false;
		}
		return true;
	}
	
	/**
	 * 信贷员之家每日统计
	 * @param recordDate
	 * @return
	 */
	public static Map<String,Object> statDayRecord(String recordDate){
		// -- 注册 ，工作认证  通过工作认证   充值人数  充值金额    抢单人数  挂卖量    挂卖成功数     挂卖金额
		AppParam custParam = new AppParam("customerService", "dayStat");
		custParam.addAttr("recordDate", recordDate);
		custParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_mjb));
		AppResult custResult = RemoteInvoke.getInstance().callNoTx(custParam);
		Map<String,Object> row = custResult.getRow(0);
		
		// 挂卖量
		AppParam transferParam = new AppParam("transferRecordService", "queryCount");
		transferParam.addAttr("recordDate", recordDate);
		transferParam.addAttr("appType", "2");
		transferParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_busi));
		AppResult transferResult = RemoteInvoke.getInstance().callNoTx(transferParam);
		row.put("loanNums", transferResult.getAttr(DuoduoConstant.TOTAL_SIZE));
		
		// 抢单人数    挂卖成功数     挂卖金额
		AppParam robParam = new AppParam("daiBorrowReService", "dayStat");
		robParam.addAttr("recordDate", recordDate);
		robParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_mjb));
		AppResult robResult = RemoteInvoke.getInstance().callNoTx(robParam);
		row.putAll(robResult.getRow(0));
		
		return row;
	}

}
