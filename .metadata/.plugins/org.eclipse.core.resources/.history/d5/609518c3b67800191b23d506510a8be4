package org.xxjr.busi.util.push.impl;

import java.net.URLEncoder;
import java.util.HashMap;
import java.util.Map;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.util.LogerUtil;
import org.ddq.common.util.StringUtil;
import org.ddq.zk.service.RemoteInvoke;
import org.jsoup.Connection.Method;
import org.springframework.util.StringUtils;
import org.xxjr.busi.util.CountGradeUtil;
import org.xxjr.busi.util.push.PushCode;
import org.xxjr.busi.util.push.PushPlatformUtils;
import org.xxjr.busi.util.push.PushUtil;
import org.xxjr.sys.util.NumberUtil;
import org.xxjr.sys.util.ServiceKey;
import org.xxjr.sys.util.SysParamsUtil;
@PushCode(23)
public class PushYongJieUtil implements PushUtil{

	@Override
	public int pushData(Map<String, Object> row, Integer pushType) {
		int status = 2;
		Map<String, Object> config = PushPlatformUtils.getConfigByCode(pushType);
		if ((!PushPlatformUtils.checkChannelOpen(config))) {
			LogerUtil.log(PushYongJieUtil.class, config.get("pushName") + "推送未打开");
			return 3;
		}
		if ((!PushPlatformUtils.checkChannelMaxCount(config))) {
			LogerUtil.log(PushYongJieUtil.class, config.get("pushName") + "推送已达上限");
			return 3;
		}
		if ((!PushPlatformUtils.checkChannelLimit(row, config))) {
			LogerUtil.log(PushYongJieUtil.class, config.get("pushName") + "筛选条件无法通过");
			return 4;
		}
		if ((!PushPlatformUtils.checkStopDate(config))) {
			LogerUtil.log(PushYongJieUtil.class, config.get("pushName") + "推送数据推送已暂停");
			return 5;
		}
		try {
			String url = SysParamsUtil.getStringParamByKey("push_yongjie_cfg_url", "http://101.132.126.166:8080/api/cust");
			Map<String, String> connParam = sendData(row);
			String response = PushPlatformUtils.origHttp(url, connParam, true, Method.POST);
			if (StringUtils.isEmpty(response)) {//如果没有错误返回，就代表成功了
				status = 1;
			}
			AppParam updateParam = new AppParam("thirdPushPoolService", "updateStatus");
			updateParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_busi_in));
			updateParam.addAttrs(row);
			updateParam.addAttr("pushType", pushType);
			updateParam.addAttr("message", response);
			updateParam.addAttr("status", status);
			RemoteInvoke.getInstance().call(updateParam);
		} catch (Exception e) {
			LogerUtil.error(PushYongJieUtil.class,e, "PushYongJieUtil error>>>>>>>>>>");
		}
		return status;
	}
	
	private static Map<String, String> sendData(Map<String, Object> row) throws Exception{
		Map<String, String> param = new HashMap<String, String>();
		param.put("custId", SysParamsUtil.getStringParamByKey("push_yongjie_cfg_custId", "yjduemi0"));
		param.put("source", SysParamsUtil.getStringParamByKey("push_yongjie_cfg_source", "jjxx"));
		param.put("username", URLEncoder.encode(StringUtil.objectToStr(row.get("applyName")), "UTF-8"));
		param.put("phone", StringUtil.objectToStr(row.get("telephone")));
		param.put("amount", NumberUtil.getInt(row.get("loanAmount"), 0)+"");
		param.put("customerIp", StringUtil.objectToStr(row.get("applyIp")));
		param.put("cityName", URLEncoder.encode(StringUtil.objectToStr(row.get("cityName")), "UTF-8"));
		param.put("sex", NumberUtil.getInt(row.get("sex"), 28)+"");
		
		//我们的：职业身份:1无固定职业 2企业主 3个体户 4上班族 
		//第三方接口:1-上班族 2-个体户 3-企业主  4-自由职业者
		int workType = NumberUtil.getInt(row.get("wrokType"), 1);
		if (workType == 1) {
			param.put("identityType", "4");
		}else if (workType == 2) {
			param.put("identityType", "3");
		}else if (workType == 3) {
			param.put("identityType", "2");
		}else if (workType == 4) {
			param.put("identityType", "1");
		}
		
		//我们的：房产类型1-其他房产  2-无房产 3-商品房（按揭） 4-商品房（全款）
		//第三方接口:1-无房 2-有房，已被抵押/按揭中  3-有房，红本在手 4-小产权
		int houseType = NumberUtil.getInt(row.get("houseType"), 2);
		if (houseType == 2) {
			param.put("houseInfo", "1");
		}else if (houseType == 3) {
			param.put("houseInfo", "2");
		}else if (houseType == 4) {
			param.put("houseInfo", "3");
		}
		
		//2-无车  3-贷款车 4-全款车
		//第三方接口:1-无 2-有车无欠款 3-有车有欠款
		int carType = NumberUtil.getInt(row.get("carType"), 2);
		param.put("carInfo", (carType -1)+"");
		
		int fundType = NumberUtil.getInt(row.get("fundType"), 2);
		param.put("isHasPublicFund", CountGradeUtil.judgeFundType(fundType) ? "1" : "0");
		
		param.put("isHasParticle", NumberUtil.getInt(row.get("havePinan"), 0) > 0 ? "1" : "0");
		
		int insurType = NumberUtil.getInt(row.get("insurType"), 0);
		param.put("warranty", CountGradeUtil.judgeInsurType(insurType) ? "3" : "1");
		
		param.put("workerWagesPay", NumberUtil.getInt(row.get("wagesType"), 2) == 1 ? "1" : "2");
		
		int income = 1000;
		if ((!StringUtils.isEmpty(row.get("income"))) && (NumberUtil.getDouble(row.get("income"), 0) > 0)) {
			income = NumberUtil.getInt(row.get("income"), 0);
		}else if ((!StringUtils.isEmpty(row.get("pubManageLine"))) && (NumberUtil.getDouble(row.get("pubManageLine"), 0) > 0)) {
			int pubManageLine = NumberUtil.getInt(row.get("pubManageLine"), 0);
			income = pubManageLine * 10000;
		}else if ((!StringUtils.isEmpty(row.get("cashMonth"))) && (NumberUtil.getDouble(row.get("cashMonth"), 0) > 0)) {
			income = NumberUtil.getInt(row.get("cashMonth"), 0);
		}
		param.put("cashIncome", income+"");
		return  param;
	}
}
