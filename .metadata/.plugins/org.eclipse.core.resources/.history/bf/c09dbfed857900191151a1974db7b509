package org.xxjr.job.listener.busi.sum;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.util.DateUtil;
import org.ddq.common.util.JsonUtil;
import org.ddq.common.util.LogerUtil;
import org.llw.ddq.job.core.BaseExecteJob;
import org.llw.ddq.job.util.JobConstant;
import org.llw.ddq.job.util.JobUtil;
import org.llw.xxjr.busi.util.borrow.MjbBorrowRobUtil;
import org.ddq.common.core.service.RemoteInvoke;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;
import org.xxjr.sys.util.ServiceKey;
import org.xxjr.sys.util.SysParamsUtil;



/***
 * 充值和抢单统计
 *
 */
@Lazy
@Component
public class RechargeRobSumJob implements BaseExecteJob {
	
		@Override
		public AppResult executeJob(AppParam param) {
			AppResult result = new AppResult();
			
			Object processId = param.getAttr(JobConstant.KEY_processId);
			//获取每日充值金额
			statRechargeAmount(processId);
			//统计抢单消费详情
			statSumRobRecord(processId);
			// 城市余额抢单
			leftBorrowSum(processId);
			//统计抢单券使用情况
			sumTicketRecord(processId);
			//统计推广数据
			sumTgRecord(processId);
			//用户注册分渠道统计
			sumRegisterChannel(processId);
			//推荐贷款活动统计
			referBorrowSum(processId);
			// 信贷员之家每日统计
			statXdyzjDaySummary(processId);
			return result;
		}
		
		//用户注册分渠道统计
		public AppResult sumRegisterChannel(Object processId) {
			AppResult result = new AppResult();
			try {
				String today = DateUtil.toStringByParttern(new Date(),DateUtil.DATE_PATTERN_YYYY_MM_DD);
				result = sumRegister(today);
				Object size = result.getAttr(DuoduoConstant.DAO_Insert_SIZE);
				// 如果当前为插入状态， 则重新统计昨天的数据
				if (result.isSuccess() && !StringUtils.isEmpty(size)&& (int) size > 0) {
					String yesterday = DateUtil.toStringByParttern(DateUtil.getNextDay(new Date(),-1), DateUtil.DATE_PATTERN_YYYY_MM_DD);
					sumRegister(yesterday);
				}
			} catch (Exception e) {
				LogerUtil.error(RechargeRobSumJob.class, e,
						"sumRegisterChannel >>>>>>>>>>>>>>>>>>error");
				JobUtil.addProcessExecute(processId, "统计app下载渠道数据报错：" + e.getMessage());
			}
			return result;
		}
		//用户注册分渠道统计
		public AppResult sumRegister(String date) {
			AppResult result = new AppResult();
			//获取统计数据
			AppParam queryParam = new AppParam("smsTelephoneService","queryChannelCount");
			queryParam.addAttr("today", date);
			queryParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_log));
			AppResult queryResult = RemoteInvoke.getInstance().callNoTx(queryParam);
			if(queryResult.isSuccess()){
				String sysAppType = SysParamsUtil.getStringParamByKey("sys_app_login_type","xxjr,xdjl,xxdk,dbt");
				String [] sysAppTypes = sysAppType.split(",");
				for(String appType : sysAppTypes){
					Map<String, Object> channelCount = new HashMap<String, Object>();
					for(Map<String, Object> queryResultMap : queryResult.getRows()){
						if(appType.equals(queryResultMap.get("appType"))){
							channelCount.put((String)queryResultMap.get("crst"), queryResultMap.get("count"));
						}
					}
					//将统计数据插入统计表
					AppParam insertParam = new AppParam("sumRegisterChannelService","save");
					insertParam.addAttr("recordDate", date);
					insertParam.addAttr("appType", appType);
					insertParam.addAttrs(channelCount);
					insertParam.addAttr("totalSize", queryResult.getAttr("totalSize"));
					insertParam.addAttr("sms", queryResult.getAttr("sms"));
					insertParam.setRmiServiceName(AppProperties
							.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sum));
					result = RemoteInvoke.getInstance().call(insertParam);
				}
			}
			return result;
		}
		
		//统计抢单券使用信息
		public AppResult sumTicketRecord(Object processId) {
			AppResult result = new AppResult();
			try {
				Date date = new Date();
				result = sumTicket(date);
				Object size = result.getAttr(DuoduoConstant.DAO_Insert_SIZE);
				//如果当前为插入状态， 则重新统计昨天的数据
				if (result.isSuccess() && !StringUtils.isEmpty(size)
						&& (int) size > 0) {
					Date yesterday = DateUtil.getNextDay(date, -1);
					sumTicket(yesterday);
				}
			} catch (Exception e) {
				LogerUtil.error(RechargeRobSumJob.class, e, "sumTicketRecord >>>>>>>>>>>>>>>>>>error");
				JobUtil.addProcessExecute(processId, "统计每日抢单券 报错：" + e.getMessage() );
			}
			return result;
		}
		
		//统计抢单券使用信息
		public AppResult sumTicket(Date date) {
	        AppResult result = new AppResult();
			Date startDate = DateUtil.getDayFirstSecond(date);
			Date endDate = DateUtil.getDayLastSecond(date);
			// 查询总的优惠金额，平均折扣
			AppParam daiParam = new AppParam();
			daiParam.setService("daiBorrowReService");
			daiParam.setMethod("queryTicketOfDate");
			daiParam.addAttr("startDate", startDate);
			daiParam.addAttr("endDate", endDate);
			daiParam.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START
							+ ServiceKey.Key_busi));
			AppResult daiResult = RemoteInvoke.getInstance().callNoTx(daiParam);
			// 查询tg表中的总的优惠金额，平均折扣
			AppParam tgParam = new AppParam();
			tgParam.setService("daiBorrowReTgService");
			tgParam.setMethod("queryTicketOfDate");
			tgParam.addAttr("startDate", startDate);
			tgParam.addAttr("endDate", endDate);
			tgParam.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START
							+ ServiceKey.Key_busi));
			AppResult tgResult = RemoteInvoke.getInstance().callNoTx(tgParam);
			// 查询抢单券的发放量和使用情况
			AppParam custParam = new AppParam();
			custParam.setService("custTicketService");
			custParam.setMethod("queryTicketOfDate");
			custParam.addAttr("startDate", startDate);
			custParam.addAttr("endDate", endDate);
			custParam.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START
							+ ServiceKey.Key_cust));
			AppResult custResult = RemoteInvoke.getInstance().callNoTx(custParam);
	        Map<String,Object> daiMap = new HashMap<String,Object>();
	        Map<String,Object> tgMap = new HashMap<String,Object>();
	        //保存统计信息
	      	AppParam saveParam = new AppParam();
	        if(!daiResult.getRows().isEmpty()){
	        	daiMap = daiResult.getRow(0);
	        	saveParam.getAttr().putAll(daiMap);
	        }
	        if(!tgResult.getRows().isEmpty()){
	        	tgMap = tgResult.getRow(0);
	        	saveParam.getAttr().putAll(tgMap);
	        }
	       // 如果两张表同时拥有当天的数据，则重新计算对应的值
			if (!daiMap.isEmpty() && !tgMap.isEmpty()) {
				Double saveAmount = Double.parseDouble(daiMap.get("saveAmount")
						.toString());
				Double tgsaveAmount = Double.parseDouble(tgMap.get("saveAmount")
						.toString());
				Double price = Double.parseDouble(daiMap.get("price")
						.toString());
				Double tgprice = Double.parseDouble(tgMap.get("price")
						.toString());
				Double discount = (price + tgprice)
						/ (price + tgprice + saveAmount + tgsaveAmount);
				Double usedNum = Double.parseDouble(daiMap.get("usedNum")
						.toString());
				Double tgusedNum = Double.parseDouble(tgMap.get("usedNum")
						.toString());
				saveParam.addAttr("saveAmount", saveAmount + tgsaveAmount);
				saveParam.addAttr("price", price + tgprice);
				saveParam.addAttr("discount", discount);
				saveParam.addAttr("usedNum", usedNum + tgusedNum);
	        }
			saveParam.setService("sumRobTicketService");
			saveParam.setMethod("save");
			saveParam.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START
							+ ServiceKey.Key_sum));
			if(!custResult.getRows().isEmpty()){
				saveParam.getAttr().putAll(custResult.getRow(0));
			}
			if(saveParam.getAttr().isEmpty()){
				saveParam.addAttr("recordDate", DateUtil.getSimpleFmt(date));
			}
			result = RemoteInvoke.getInstance().call(saveParam);
	        return result;
		}
		
	// 统计推广信息
	public AppResult sumTgRecord(Object processId) {
		AppResult result = new AppResult();
		try {
			Date date = new Date();
			result = sumTg(date);
			Object size = result.getAttr(DuoduoConstant.DAO_Insert_SIZE);
			// 如果当前为插入状态， 则重新统计昨天的数据
			if (result.isSuccess() && !StringUtils.isEmpty(size)
					&& (int) size > 0) {
				Date yesterday = DateUtil.getNextDay(date, -1);
				sumTg(yesterday);
			}
		} catch (Exception e) {
			LogerUtil.error(RechargeRobSumJob.class, e,
					"sumTgRecord >>>>>>>>>>>>>>>>>>error");
			JobUtil.addProcessExecute(processId, "统计推广 报错：" + e.getMessage());
		}
		return result;
	}		
		
	// 微店推广统计
	public AppResult sumTg(Date date) {
		AppResult result = new AppResult();
		Date startDate = DateUtil.getDayFirstSecond(date);
		Date endDate = DateUtil.getDayLastSecond(date);
		// 查询产品的推广情况
		AppParam prodParam = new AppParam();
		prodParam.setService("wdProductService");
		prodParam.setMethod("sumTgRecord");
		prodParam.addAttr("startDate", startDate);
		prodParam.addAttr("endDate", endDate);
		prodParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START
						+ ServiceKey.Key_busi));
		AppResult wdResult = RemoteInvoke.getInstance().callNoTx(prodParam);
		// 保存统计信息
		AppParam saveParam = new AppParam();
		saveParam.setService("sumWdProductTgService");
		saveParam.setMethod("save");
		saveParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START
						+ ServiceKey.Key_sum));
		saveParam.addAttrs(wdResult.getAttr());
		if(!saveParam.getAttr().isEmpty()){
			saveParam.addAttr("recordDate", DateUtil.getSimpleFmt(date));
			result = RemoteInvoke.getInstance().call(saveParam);
		}
		return result;
	}
	
		/**
		 * 统计充值金额
		 * @param day :某天
		 * @return
		 */
		private AppResult statRechargeAmount(Object processId){
			AppResult result = new AppResult();
			Date day = new Date();
			try{	
				result = statSingleDayRechargeAmount(day);
				//当前是插入操作,说明当前是当天第一次操作，同时刷新昨天的数据
				int optSize = (int) result.getAttr(DuoduoConstant.DAO_Insert_SIZE);
				if(optSize == 1){
					Date yesterday = DateUtil.getNextDay(day, -1);
					result = statSingleDayRechargeAmount(yesterday);
				}
			}catch(Exception e){
				LogerUtil.error(RechargeRobSumJob.class,e, "RechargeRobSumJob executeJob error");
				JobUtil.addProcessExecute(processId, "统计充值金额数据 报错：" + e.getMessage() );
			}
			return result;
		}
		
		/**
		 * 统计抢单消费
		 * @param day :某天
		 * @return
		 */
		private AppResult statSumRobRecord(Object processId){
			AppResult result = new AppResult();
			Date day = new Date();
			try{	
				result = sumRobRecord(day);
				//当前是插入操作,说明当前是当天第一次操作，同时刷新昨天的数据
				Object optSize = result.getAttr(DuoduoConstant.DAO_Insert_SIZE);
				if(optSize != null && optSize.toString().equals("1")){
					//重新统计有退款成功的抢单日期的记录
					AppParam params = new AppParam("daiBorrowReBackService","queryOfRob");
					params.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_busi));
                    params.addAttr("serviceStartTime", DateUtil.getSimpleFmt(DateUtil.getNextDay(day, -1)));
                    params.addAttr("status", 1);
                    params.setOrderBy("robTime");
                    params.setOrderValue("desc");
            		AppResult backResult = RemoteInvoke.getInstance().callNoTx(params);
				    for (Map<String, Object> map : backResult.getRows()) {
                          Date robTime = DateUtil.toDateByString(map.get("robTime").toString(), DateUtil.DATE_PATTERN_YYYY_MM_DD);
                          sumRobRecord(robTime);
				    }
				    Date yesterday = DateUtil.getNextDay(day, -1);
					result = sumRobRecord(yesterday);
				}
			}catch(Exception e){
				LogerUtil.error(RechargeRobSumJob.class,e, "RechargeRobSumJob executeJob error");
				JobUtil.addProcessExecute(processId, "统计抢单消费数据 报错：" + e.getMessage() );
			}
			return result;
		}

		/**
		 * 统计单天支付金额
		 * @param  day :天
		 * @return {@link AppResult}
		 */
		private AppResult statSingleDayRechargeAmount(Date day){
			AppResult result = new AppResult();
			Date start = DateUtil.getDayFirstSecond(day);
			Date end = DateUtil.getDayLastSecond(day);
			
			//获取充值统计
			AppParam params = new AppParam("rechargeService","queryDailySum");
			params.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_cust));
			params.addAttr("createTimeStart", start );
			params.addAttr("createTimeEnd", end );
			AppResult sumResult = RemoteInvoke.getInstance().callNoTx(params);
			LogerUtil.debug(RechargeRobSumJob.class, "rechargeService.queryDailySum params->"+JsonUtil.getInstance().object2JSON(result.getRows()));
			
			//单笔购买总金额
			AppParam wxPayParams = new AppParam("daiWxpayService","querySumAmount");
			wxPayParams.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_busi));
			wxPayParams.addAttr("createTimeStart", start );
			wxPayParams.addAttr("createTimeEnd", end );
			wxPayParams.addAttr("robWay", "3");
			AppResult wxPayResult = RemoteInvoke.getInstance().callNoTx(wxPayParams);
			Object amount = wxPayResult.getRow(0).get("amount");
			LogerUtil.debug(RechargeRobSumJob.class, "daiWxpayService.query amount->"+amount);
			
			//保存到统计表
			AppParam saveParams = new AppParam("sumRechargeRecordService","save");
			saveParams.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_sum));
			saveParams.addAttr("recordDate", start );
			saveParams.addAttr("cashSum", amount);
			saveParams.addAttrs(sumResult.getRow(0));
			result = RemoteInvoke.getInstance().call(saveParams);
			
			
			
			try {
				//获取充值统计
				AppParam queryParams = new AppParam("rechargeService","queryDailySum");
				queryParams.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_mjb));
				queryParams.addAttr("createTimeStart", start );
				queryParams.addAttr("createTimeEnd", end );
				AppResult queryResult = RemoteInvoke.getInstance().callNoTx(queryParams);
				LogerUtil.log(RechargeRobSumJob.class,"statistic mjb recharge amount.parmas->"+queryParams.toJson());

				if (queryResult.getRows().size() > 0) {
					//马甲包保存到统计表
					AppParam mjbParams = new AppParam("mjbRechargeRecordService","save");
					mjbParams.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_sum));
					mjbParams.addAttr("recordDate", start);
					mjbParams.addAttr("list", queryResult.getRows());
					RemoteInvoke.getInstance().call(mjbParams);
					LogerUtil.log(RechargeRobSumJob.class,"statistic mjb recharge amount.parmas->"+mjbParams.toJson());
				}
			} catch (Exception e) {
				LogerUtil.error(RechargeRobSumJob.class,e, "mjbRechargeRecord query error");
			}
			return result;
		}
		
		/**
		 * 统计当天抢单消费详情信息
		 */
		private static AppResult sumRobRecord(Date day){
			AppResult result = new AppResult();
			String recordDay = DateUtil.getSimpleFmt(day);
			//查询当天消费信息
			AppParam daiParams = new AppParam("daiBorrowReService","queryRobOfDate");
			daiParams.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_busi));
			daiParams.addAttr("recordDate", recordDay);
			result = RemoteInvoke.getInstance().call(daiParams);
			if(result.getRows().size() > 0){
				Map<String,Object> robInfo = result.getRow(0);
				
				//余额抢单总金额
				BigDecimal totalRec = new BigDecimal(robInfo.get("totalRecharge").toString())
		          .setScale(2, RoundingMode.HALF_UP);
				
				
				//保存到抢单消费详情表
				AppParam saveDeailParams = new AppParam("sumRobDeailRecordService","save");
				saveDeailParams.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_sum));
				saveDeailParams.addAttrs(robInfo);
				saveDeailParams.addAttr("recordDate", recordDay);
				saveDeailParams.addAttr("delDate",DateUtil.getNextDay(day, -7));
				saveDeailParams.addAttr("pureIncome", totalRec);
				
				saveDeailParams.addAttr("convertAmount", totalRec);
				
				RemoteInvoke.getInstance().call(saveDeailParams);
				
				//保存到抢单消费记录表
				AppParam saveParams = new AppParam("sumRobRecordService","save");
				saveParams.addAttrs(robInfo);
				saveParams.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_sum));
				saveParams.addAttr("recordDate", recordDay);
				saveParams.addAttr("pureIncome", totalRec);
				saveParams.addAttr("convertAmount", totalRec);
				result = RemoteInvoke.getInstance().call(saveParams);
				LogerUtil.debug(RechargeRobSumJob.class, "sumRobRecordService.save params->" + result.toJson());
			}
			return result;
		}
		
		
		/**
		 * 城市余单统计
		 * @return
		 */
		private AppResult leftBorrowSum(Object processId){
			AppResult result = new AppResult();
			try {
				// 今天
				String today = DateUtil.toStringByParttern(new Date(), DateUtil.DATE_PATTERN_YYYY_MM_DD);
				
				// 删除当天的统计
				AppParam delParam = new AppParam();
				delParam.setService("sumLeftBorrowService");
				delParam.setMethod("delete");
				delParam.addAttr("recordDate", today);
				delParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sum));
				AppResult deleteResult = RemoteInvoke.getInstance().call(delParam);
				
				if(0 == Integer.valueOf(deleteResult.getAttr(DuoduoConstant.DAO_Delete_SIZE).toString())){
					// 删掉昨天
					String yestoday = DateUtil.toStringByParttern(
							DateUtil.getNextDay(new Date(), -1),
							DateUtil.DATE_PATTERN_YYYY_MM_DD);
					delParam.addAttr("recordDate", yestoday);
					RemoteInvoke.getInstance().call(delParam);
					
					// 统计昨天
					statCitySummary(processId, yestoday);
				}
				
				// 统计当天
				statCitySummary(processId, today);
			} catch (Exception e) {
				LogerUtil.error(RechargeRobSumJob.class,e, "statCitySummary error");
				JobUtil.addProcessExecute(processId, "统计城市数据出错：" + e.getMessage() );
			}
			return result;
		}
		
		/**
		 * 按天统计城市
		 * @param day
		 * @return
		 */
		private void statCitySummary(Object processId, String recordDate){
			AppParam queryParam = new AppParam();
			queryParam.setService("daiBorrowExtService");
			queryParam.setMethod("querySumByCityName");
			queryParam.addAttr("recordDate", recordDate);
			queryParam.addAttr("endTime",  recordDate + " 23:59:59");
			queryParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_busi));
			AppResult queryResult = RemoteInvoke.getInstance().call(queryParam);
			if(queryResult.getRows().size() == 0){
				LogerUtil.error(RechargeRobSumJob.class, "querySumByCityName size 0");
				return;
			}
			
			AppParam addParam = new AppParam();
			addParam.setService("sumLeftBorrowService");
			addParam.setMethod("batchInsert");
			addParam.addAttr("list", queryResult.getRows());
			addParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sum));
			RemoteInvoke.getInstance().call(addParam);
		}
		
		//推荐贷款活动统计
		public void referBorrowSum(Object processId) {
			try {
				String today = DateUtil.toStringByParttern(new Date(),DateUtil.DATE_PATTERN_YYYY_MM_DD);
				//查询推荐贷款记录
				AppParam referParam = new AppParam();
				referParam.setService("daiReferRecordService");
				referParam.setMethod("referRecordSum");
				referParam.addAttr("startDate", today);
				referParam.addAttr("endDate",  today);
				referParam.setRmiServiceName(
						AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_busi_in));
				AppResult referResult = RemoteInvoke.getInstance().callNoTx(referParam);
				Map<String, Object> referInfo = null;
				if (referResult.getRows().size() >0) {
					referInfo = referResult.getRow(0);
				}
				//查询分享次数和申请提现金额和提现金额
				AppParam shareParam = new AppParam();
				shareParam.setService("shareRecordService");
				shareParam.setMethod("shareCountAndWithdrawInfo");
				shareParam.addAttr("startDate", today);
				shareParam.addAttr("endDate",  today);
				shareParam.setRmiServiceName(
						AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_cust));
				AppResult shareResult = RemoteInvoke.getInstance().callNoTx(shareParam);
				Map<String, Object> shareInfo = null;
				if (shareResult.getRows().size() >0) {
					shareInfo = shareResult.getRow(0);
				}
				
				if (StringUtils.isEmpty(shareInfo) && StringUtils.isEmpty(referInfo) ) {
					return;
				}
				
				AppParam saveParam = new AppParam();
				saveParam.setService("sumReferBorrowService");
				saveParam.setMethod("save");
				saveParam.addAttr("recordDate", today);
				if (!StringUtils.isEmpty(shareInfo)) {
					saveParam.addAttrs(shareInfo);
				}
				if (!StringUtils.isEmpty(referInfo)) {
					saveParam.addAttrs(referInfo);
				}
				saveParam.setRmiServiceName(
						AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sum));
				RemoteInvoke.getInstance().call(saveParam);
			} catch (Exception e) {
				LogerUtil.error(RechargeRobSumJob.class, e,
						"referBorrowSum >>>>>>>>>>>>>>>>>>error");
				JobUtil.addProcessExecute(processId, "推荐贷款统计数据报错：" + e.getMessage());
			}
		}
		
		/**
		 * 信贷员之家每日情况
		 * @param day :某天
		 * @return
		 */
		private AppResult statXdyzjDaySummary(Object processId){
			AppResult result = new AppResult();
			Date day = new Date();
			String recordDate = DateUtil.toStringByParttern(day, DateUtil.DATE_PATTERN_YYYY_MM_DD);
			try{	
				result = statSingleDaySummary(recordDate);
				//当前是插入操作,说明当前是当天第一次操作，同时刷新昨天的数据
				int optSize = (int) result.getAttr(DuoduoConstant.DAO_Insert_SIZE);
				if(optSize == 1){
					Date yesterday = DateUtil.getNextDay(day, -1);
					recordDate = DateUtil.toStringByParttern(yesterday, DateUtil.DATE_PATTERN_YYYY_MM_DD);
					result = statSingleDaySummary(recordDate);
				}
			}catch(Exception e){
				LogerUtil.error(this.getClass(), e, "statXdyzjDaySummary executeJob error");
				JobUtil.addProcessExecute(processId, "统计信贷员之家每日数据 报错：" + e.getMessage() );
			}
			return result;
		}
		
		/**
		 * 统计单天情况
		 * @param  day :天
		 * @return {@link AppResult}
		 */
		private AppResult statSingleDaySummary(String recordDate){
			AppResult result = new AppResult();
			Map<String,Object> summaryMap = MjbBorrowRobUtil.statDayRecord(recordDate);
			try {
				//保存到统计表
				AppParam saveParams = new AppParam("sumMjbdayRecordService","save");
				saveParams.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_sum));
				saveParams.addAttr("recordDate", recordDate);
				saveParams.addAttrs(summaryMap);
				result = RemoteInvoke.getInstance().call(saveParams);
			} catch (Exception e) {
				LogerUtil.error(this.getClass(),e, "statSingleDaySummary query error");
			}
			return result;
		}
}