package org.xxjr.mq.listener.receiver;

import java.util.Map;

import javax.annotation.PreDestroy;

import org.ddq.active.mq.XxjrMqSendUtil;
import org.ddq.active.mq.wxadmin.MQUtil;
import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.core.SpringAppContext;
import org.ddq.common.core.service.SoaManager;
import org.ddq.common.util.LogerUtil;
import org.llw.ddq.mq.rabbitmq.RabbitMqConfig;
import org.ddq.common.core.service.RemoteInvoke;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;
import org.xxjr.cust.util.info.CustomerUtil;
import org.xxjr.mq.listener.consumer.RabbitMqConsumer;
import org.xxjr.mq.listener.util.XxjrInitAnnotation;
import org.xxjr.sys.util.ServiceKey;

/**
 * mq消息接收
 * @author Administrator
 *
 */
@Component
@XxjrInitAnnotation(beanName="wxMessageReceiver",initMethod="init")
public class WxMessageReceiver extends RabbitMqConsumer{

	@Autowired
	private RabbitMqConfig rabbitMqConfig;
	
	@Value("${rabbit.queue.wxMessage}")
	private String queueName;

	public void onMessage(Map<String, Object> param) {
		try {
			LogerUtil.log(WxMessageReceiver.class,"Message params:" + param.toString());
			if(!StringUtils.isEmpty(param.get("mqMessageType"))){
				String type = param.get("mqMessageType").toString();
				AppParam mqParam = new AppParam();
				mqParam.setService("sendMqMessageService");
				if(MQUtil.MQ_MESSAGE_TYPE_1.equals(type)){
					// 发送微信消息
					mqParam.setMethod("sendTextMessage");
				}else if(MQUtil.MQ_MESSAGE_TYPE_2.equals(type)){
					// 生成海报
					mqParam.setMethod("getPosterQrCode");
				}else if(MQUtil.MQ_MESSAGE_TYPE_3.equals(type)){
					// 正常关注自动回复
					mqParam.addAttr("responseType", "1");
					mqParam.setMethod("subscribeAutoResponse");
				}else if(MQUtil.MQ_MESSAGE_TYPE_4.equals(type)){
					mqParam.setMethod("keywordAutoResponse");
				}else if(MQUtil.MQ_MESSAGE_TYPE_5.equals(type)){
					mqParam.setMethod("sceneQrcodeResponse");
				}else if(MQUtil.MQ_MESSAGE_TYPE_6.equals(type)){
					mqParam.setMethod("sendTemplateMessage");
				}
				mqParam.addAttrs(param);
				if (SpringAppContext.getBean("sendMqMessageService") != null) {
					SoaManager.getInstance().invoke(mqParam);;
				}else{
					mqParam.setRmiServiceName(AppProperties
							.getProperties(DuoduoConstant.RMI_SERVICE_START +
									ServiceKey.Key_wx));
					RemoteInvoke.getInstance().call(mqParam);
				}
				
			}
			//绑定用户微信信息
			bindWxInfo(param);
		} catch (Exception e) {
			LogerUtil.error(WxMessageReceiver.class, e, "WxMessageReceiver Message params:" + param.toString());
			XxjrMqSendUtil.saveFailureLog("WxMessageReceiver", param);
		}
	}
	
	/**
	 * 绑定微信openid或unionID信息
	 * @param param
	 */
	public static void bindWxInfo(Map<String, Object> param){
		Object unionid = param.get("unionid");
		Object openid = param.get("openid");
		if (!StringUtils.isEmpty(param.get("bindWxInfo"))
				&& !StringUtils.isEmpty(openid)
				&& !StringUtils.isEmpty(unionid)) {
			// 根据unionid查找用户信息
			AppParam queryParam = new AppParam();
			queryParam.addAttr("unionid", unionid);
			Map<String, Object> userInfo = CustomerUtil.queryCustInfo(queryParam);
			if (userInfo != null
					&& StringUtils.isEmpty(userInfo.get("openid"))) {
				// openid为空才补充openid信息
				CustomerUtil.updateOpenid(userInfo.get("customerId"), openid);
			}
			if (userInfo == null) {
				queryParam.clearAttr();
				queryParam.addAttr("openid", openid);
				userInfo = CustomerUtil.queryCustInfo(queryParam);
				if (userInfo != null
						&& StringUtils.isEmpty(userInfo.get("unionid"))) {
					// unionid为空补充unionid信息
					CustomerUtil.updateUnionid(userInfo.get("customerId"), openid, unionid);
				}
			}
		}
		
	}
	
	@Override
	public void init(String queueName ,RabbitMqConfig rabbitMqConfig) {
		super.init(queueName,rabbitMqConfig);
	}
	
    public void init() {
		init(queueName,rabbitMqConfig);
	}
	
	@PreDestroy
	public void destroy(){
		reaseResource();
	}
	
}
