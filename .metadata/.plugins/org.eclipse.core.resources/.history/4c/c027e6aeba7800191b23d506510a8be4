package org.xxjr.cust.info;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.ddq.active.mq.activity.RewardRefererUtil;
import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppResult;
import org.ddq.common.core.service.BaseService;
import org.ddq.common.core.service.SoaManager;
import org.ddq.common.exception.AppException;
import org.ddq.common.exception.DuoduoError;
import org.ddq.common.util.DateUtil;
import org.ddq.common.util.StringUtil;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import org.xxjr.cust.util.info.CustomerIdentify;
import org.xxjr.cust.util.invite.CustInviteUtil;
import org.xxjr.cust.util.member.TicketConfigUtils;
import org.xxjr.sys.util.NumberUtil;
import org.xxjr.sys.util.SysParamsUtil;

@Lazy
@Service
public class CustActivityRecordService extends BaseService {
	private static final String NAMESPACE = "CUSTACTIVITYRECORD";

	/**
	 * querys
	 * @param params
	 * @return
	 */
	public AppResult query(AppParam params) {
		return super.query(params, NAMESPACE);
	}
	
	/**
	 * queryByPage
	 * @param params
	 * @return
	 */
	public AppResult queryByPage(AppParam params) {
		return super.queryByPage(params, NAMESPACE);
	}
	
	/**
	 * queryCount
	 * @param params
	 * @return
	 */
	public AppResult queryCount(AppParam params) {
		int size = getDao().count(NAMESPACE, super.COUNT,params.getAttr(),params.getDataBase());
		AppResult result = new AppResult();
		result.putAttr(DuoduoConstant.TOTAL_SIZE, size);
		return result;
	}
	
	
	/**
	 * insert
	 * @param params
	 * @return
	 */
	public AppResult insert(AppParam params) {
		params.addAttr("createTime", new Date());
		return super.insert(params, NAMESPACE);
	}
	
	/**
	 * update
	 * @param params
	 * @return
	 */
	public AppResult update(AppParam params) {
		params.addAttr("updateTime", new Date());
		return super.update(params, NAMESPACE);
	}
	
	/**
	 * 初始化
	 * @param params
	 * @return
	 */
	public AppResult init(Object customerId) {
		AppParam addParam = new AppParam();
		addParam.addAttr("customerId", customerId);
		Map<String,Object> custInfo = CustomerIdentify.getCustIdentify(customerId.toString());
		addParam.addAttr("registerTime", custInfo.get("registerTime"));
		addParam.addAttr("referer", custInfo.get("referer"));
		addParam.addAttr("activityType", "2");
		addParam.addAttr("days3Reward", "0");
		addParam.addAttr("days7Reward", "0");
		addParam.addAttr("refererRechargeReward", "0");
		addParam.addAttr("refererIdentifyCardReward", "0");
		addParam.addAttr("friends3Reward", "0");
		addParam.addAttr("friends5Reward", "0");
		addParam.addAttr("friends10Reward", "0");
		return this.insert(addParam);
	}
	
	/**
	 * saveOrUpdate
	 * @param params
	 * @return
	 */
	public AppResult saveOrUpdate(AppParam params) {
		AppResult result = new AppResult();
		Object customerId = params.getAttr("customerId");
		if (StringUtils.isEmpty(customerId)) {
			return result;
		}
		Object refererRechargeReward = params.removeAttr("refererRechargeReward");
		Object refererIdentifyCardReward = params.removeAttr("refererIdentifyCardReward");
		AppParam param = new AppParam();
		param.addAttr("customerId", customerId);
		AppResult queryResult = queryCount(param);
		if (1 == (int)queryResult.getAttr(DuoduoConstant.TOTAL_SIZE)) {
			result = update(params);
		}else {
			Map<String, Object> custInfo = CustomerIdentify.getCustIdentify(customerId.toString());
			params.addAttr("registerTime", custInfo.get("registerTime"));
			params.addAttr("referer", custInfo.get("referer"));
			result = insert(params);
		}
		//好友首次充值或工作认证更新奖励记录
		String operator = StringUtil.getString(params.getAttr("operator"));
		if (("firstRecharge".equals(operator) || "identifyCard".equals(operator)) 
				&& !StringUtils.isEmpty(params.getAttr("selfId"))) {
			String selfId = StringUtil.getString(params.getAttr("selfId"));
			Map<String, Object> custInfo = CustomerIdentify.getCustIdentify(selfId);
			AppParam updateParam = new AppParam();
			updateParam.addAttr("customerId", selfId);
			updateParam.addAttr("referer", customerId);
			updateParam.addAttr("registerTime", custInfo.get("registerTime"));
			updateParam.addAttr("activityType", 2);
			updateParam.addAttr("refererRechargeReward", refererRechargeReward);
			updateParam.addAttr("refererIdentifyCardReward", refererIdentifyCardReward);
			AppParam queryParam = new AppParam();
			queryParam.addAttr("customerId", selfId);
			queryResult = queryCount(queryParam);
			if (1 == (int)queryResult.getAttr(DuoduoConstant.TOTAL_SIZE)) {
				update(updateParam);
			}else {
				insert(updateParam);
			}
		}
		return result;
	}
	
	/**
	 * delete
	 * @param params
	 * @return
	 */
	public AppResult delete(AppParam params) {
		String ids = (String) params.getAttr("ids");
		AppResult  result = null;
		if (!StringUtils.isEmpty(ids)) {
			for (String id : ids.split(",")) {
				AppParam param = new AppParam();
				param.addAttr("customerId", id);
				
				result = super.delete(param, NAMESPACE);
			}
		} else if (!StringUtils.isEmpty(params.getAttr("customerId"))) {
			result = super.delete(params, NAMESPACE);
		} else {
			throw new AppException(DuoduoError.DELETE_NO_ID);
		}
		return result;
	}
	
	/**
	 * 查询活动奖励情况
	 * @param params
	 * @return
	 */
	public AppResult queryRewardDetail(AppParam params){
		return super.query(params, NAMESPACE, "rewardDetail");
	}
	
	/**
	 * 根据抢单天数和抢单金额送免单券
	 * @param params
	 * @return
	 */
	public void continuousRobReward(AppParam params){
		String customerId = StringUtil.getString(params.getAttr("customerId"));
		int robDay = NumberUtil.getInt(params.getAttr("robDay"), 0);
		if(robDay != 3 && robDay != 7){
			return;
		}
		int days3Reward = 0;
		int days7Reward = 0;
		int ticketCount = 0;
		boolean noRecordFlag = false;
		AppParam param = new AppParam();
		param.addAttr("customerId", customerId);
		AppResult recordResult = queryRewardDetail(param);
		if (recordResult.getRows().size() > 0) {
			Map<String, Object> recordMap = recordResult.getRow(0);
			days3Reward = NumberUtil.getInt(recordMap.get("days3Reward"), 0); //连续3天抢单满额奖励 0- 未奖 1-已奖
			days7Reward = NumberUtil.getInt(recordMap.get("days7Reward"), 0); //连续7天抢单满额奖励 0- 未奖 1-已奖
			ticketCount = NumberUtil.getInt(recordMap.get("ticketCount"), 0); //已获得券数量
			int sendMaxCount = SysParamsUtil.getIntParamByKey("sendTicketMaxCountByActivity", 150);
			if(ticketCount >= sendMaxCount){//此次活动最多可获得150张券
				return;
			}
			if (StringUtils.isEmpty(recordMap.get("customerId"))) {// 邀请好友记录不存在，则初始化数据
				noRecordFlag = true;
			}
		}else{
			noRecordFlag = true;
		}
		// 未记录则添加记录
		if(noRecordFlag){
			this.init(customerId);
		}
		// 已奖励过则不再奖励
		String robDay3Reward = SysParamsUtil.getStringParamByKey("robDay3RewardValue", "25,2,0");// 连续3天奖励规则，2张5折抢单券
		String robDay7Reward = SysParamsUtil.getStringParamByKey("robDay7RewardValue", "25,4,0");// 连续7天奖励规则，4张5折抢单券
		int[] robDay3Arr = transferToInt(robDay3Reward.split(","));
		int[] robDay7Arr = transferToInt(robDay7Reward.split(","));
		// 连续3天大于等于奖励值，或连续7天大于等于奖励值，就不再进行奖励
		if((robDay == 3 && days3Reward >= robDay3Arr[1]) || (robDay == 7 && days7Reward == robDay7Arr[1])){
			return;
		}
		
		// 奖励免单券
		Map<String, Object> rewardMap = new HashMap<String, Object>(); 
		rewardMap.put("customerId", customerId);
		rewardMap.put("createDesc", "连续抢单" + robDay + "天获取");
		rewardMap.put("type", CustInviteUtil.TICKET_TYPE_FREE_TICKET);
		rewardMap.put("activityType", "2");
		String rewardValue = robDay == 7 ? robDay7Reward : robDay3Reward;
		
		List<Map<String,Object>> list = TicketConfigUtils.getTicketConfigIdList(rewardValue, rewardMap);
		
		AppParam ticketParam = new AppParam("custTicketService","directBatchInsert");
		ticketParam.addAttr("list", list);
		AppResult insertResult = SoaManager.getInstance().invoke(ticketParam);
		int size = (Integer)insertResult.getAttr(DuoduoConstant.DAO_Insert_SIZE);
		if (size >= 1) {//更新奖励记录
			AppParam updateParam = new AppParam();
			updateParam.addAttr("customerId", customerId);
			if (robDay == 3) {
				updateParam.addAttr("days3Reward", robDay3Arr[1]);// 连续3天强度奖励2张5折抢单券
			}else {
				updateParam.addAttr("days7Reward", robDay7Arr[1]);// 连续7天强度奖励4张5折抢单券
			}
			update(updateParam);
		}
	}
	
	/**
	 * 查询奖励情况
	 * @param params
	 * @return
	 */
	public void queryRewardSituation(AppParam params){
		Object customerId = params.getAttr("customerId");
		if (StringUtils.isEmpty(customerId)) {
			return;
		}
		int refererNums = 0;
		int friends3Reward = 0;
		int friends5Reward = 0;
		int friends10Reward = 0;
		boolean noRecordFlag = false;
		Date startDate = DateUtil.toDateByString(
				SysParamsUtil.getStringParamByKey(SysParamsUtil.KEY_invite_530_start_date, "2018-05-22"),
				DateUtil.DATE_PATTERN_YYYY_MM_DD);
		params.addAttr("startDate", startDate);
		AppResult rewardResult = queryRewardDetail(params);
		if(rewardResult.getRows().size() > 0){
			Map<String, Object> rewardMap = rewardResult.getRow(0);
			refererNums = NumberUtil.getInt(rewardMap.get("refererCount"),0);// 累计邀请完成数
			friends3Reward = NumberUtil.getInt(rewardMap.get("friends3Reward"),0);// 累计邀请好友3个用户：0-表示 未奖励 1-表示已奖励
			friends5Reward = NumberUtil.getInt(rewardMap.get("friends5Reward"),0);// 累计邀请好友5个用户
			friends10Reward = NumberUtil.getInt(rewardMap.get("friends10Reward"),0);// 累计邀请好友10个用户
			if (StringUtils.isEmpty(rewardMap.get("customerId"))) {// 邀请好友记录不存在，则初始化数据
				noRecordFlag = true;
			}
			int ticketCount = Integer.valueOf(rewardMap.get("ticketCount").toString());
			int sendMaxCount = SysParamsUtil.getIntParamByKey("sendTicketMaxCountByActivity", 150);
			if(ticketCount >= sendMaxCount){//此次活动最多可获得150张券
				return;
			}
		}
		// 未记录则添加记录
		if(noRecordFlag){
			this.init(customerId);
		}
		//逢3结尾或5结尾或10的倍数个用户通过工作认证和首次充值后，奖励推荐人, 3 5 10 13 15 20...
		if(refererNums > 2){
			int refererCount = 0;
			if(refererNums%10 == 0 && friends10Reward == 0){// friends10Reward若为1表示已奖励
				refererCount = 10;
			}else if ((refererNums-5)%10 == 0 && friends5Reward == 0){
				refererCount = 5;
			}else if ((refererNums-3)%10 == 0 && friends3Reward == 0){
				refererCount = 3;
			}else {
				return;
			}
			RewardRefererUtil.rewardByIdentifyCardAndRecharge(customerId,refererNums,refererCount);
		}
	}
	
	
	/**
	 * 将数字字符串类型数组转成数字型数组
	 * @param sourceArr
	 * @return
	 */
	public static int[] transferToInt(String[] sourceArr){
		int myLength = sourceArr.length;
		int[] intArray = new int[myLength];
		for(int i = 0; i < myLength;i++){
			intArray[i] = Integer.valueOf(sourceArr[i]);
		}
		return intArray;
	}
}
