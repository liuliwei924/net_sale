package org.xxjr.busi.util;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.core.SpringAppContext;
import org.ddq.common.core.service.RemoteInvoke;
import org.ddq.common.core.service.SoaManager;
import org.llw.model.cache.RedisUtils;
import org.springframework.util.StringUtils;
import org.xxjr.sys.util.ServiceKey;

/**
 *  动画模板
 * @author Administrator
 *
 */
public class AnimationTemplateUtil {
	
	private static final String ANIMATIONTEMPLATE = "animation_emplateInfo";

	/**
	 * 获取模板信息
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public static List<Map<String, Object>> getAnimationTemplate(){
		List<Map<String, Object>> applyTemplateInfo = (List<Map<String, Object>>) RedisUtils.getRedisService().get(ANIMATIONTEMPLATE);
		if (applyTemplateInfo == null) {
			applyTemplateInfo = refreshAnimationTemplate();
		}
		return applyTemplateInfo;
	}
	 
	/**
	 * 刷新模板信息
	 * @return
	 */
	public static List<Map<String, Object>> refreshAnimationTemplate() {
		List<Map<String, Object>> templateInfo = new ArrayList<Map<String,Object>>();
		
		AppParam param = new AppParam("animationTemplateService", "query");
		param.addAttr("isEnable", "1");
		param.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_zx));
		AppResult result = null;
		if (SpringAppContext.getBean("animationTemplateService") == null) {
			result = RemoteInvoke.getInstance().call(param);
		}else{
			result = SoaManager.getInstance().invoke(param);
		}
		if (result.getRows().size() > 0) {
			templateInfo = result.getRows();
			RedisUtils.getRedisService().set(ANIMATIONTEMPLATE, (Serializable)templateInfo, 60 * 60 * 48);
		}
		return templateInfo;
	}
		
	/**
	 * 根据id获取模板信息
	 * @return
	 */
	public static Map<String, Object> getApplyTemplateByTempId(String templateId){
		Map<String,Object> map = new HashMap<String, Object>();
		if(StringUtils.isEmpty(templateId)){
			return map;
		}
		List<Map<String, Object>> templates = getAnimationTemplate();
		for(Map<String, Object> row : templates){
			if(templateId.equals(row.get("templateId").toString())){
				return row;
			}
		}
		return map;
	}
	
}

