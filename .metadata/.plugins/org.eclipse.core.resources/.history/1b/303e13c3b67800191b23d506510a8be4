package org.xxjr.busi.util.push.impl;

import java.util.HashMap;
import java.util.Map;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.util.LogerUtil;
import org.ddq.common.util.StringUtil;
import org.ddq.zk.service.RemoteInvoke;
import org.springframework.util.StringUtils;
import org.xxjr.busi.util.CountGradeUtil;
import org.xxjr.busi.util.borrow.IdCardResolveUtil;
import org.xxjr.busi.util.push.PushCode;
import org.xxjr.busi.util.push.PushPlatformUtils;
import org.xxjr.busi.util.push.PushUtil;
import org.xxjr.sys.util.NumberUtil;
import org.xxjr.sys.util.ServiceKey;
import org.xxjr.sys.util.SysParamsUtil;
@PushCode(21)
public class PushKuaiUtil implements PushUtil {

	@Override
	public int pushData(Map<String, Object> row, Integer pushType) {
		int status = 0;
		Map<String, Object> config = PushPlatformUtils.getConfigByCode(pushType);
		try {
			if ((!PushPlatformUtils.checkChannelOpen(config))) {
				LogerUtil.log(PushKuaiUtil.class, config.get("pushName") + "推送未打开");
				return 3;
			}
			if ((!PushPlatformUtils.checkChannelMaxCount(config))) {
				LogerUtil.log(PushKuaiUtil.class, config.get("pushName") + "推送已达上限");
				return 3;
			}
			if ((!PushPlatformUtils.checkChannelLimit(row, config))) {
				LogerUtil.log(PushKuaiUtil.class, config.get("pushName") + "筛选条件无法通过");
				return 4;
			}
			if ((!PushPlatformUtils.checkStopDate(config))) {
				LogerUtil.log(PushKuaiUtil.class, config.get("pushName") + "推送数据推送已暂停");
				return 5;
			}
			
			String get_url = SysParamsUtil.getStringParamByKey("push_kuai_cfg_getUrl", "http://www.klqian.com/apiforkn/dataforapi.html");
			String code = SysParamsUtil.getStringParamByKey("push_kuai_cfg_code", "81FA10A5ACEC4B3CABD5C67891847C40");
			
			Map<String, String> valiTel = new HashMap<String, String>();
			valiTel.put("code", code);
			valiTel.put("mobile", StringUtil.objectToStr(row.get("telephone")));
			Map<String, Object> getRes = PushPlatformUtils.httpPost(get_url, valiTel, true);
			if (0 != NumberUtil.getInt(getRes.get("resultCode"), -1)) {
				LogerUtil.log(PushYiXinUtil.class, config.get("pushName") + "无法通过渠道的校验");
				return 4;
			}
			
			String url = SysParamsUtil.getStringParamByKey("push_kuai_cfg_url", "http://www.klqian.com/apiforkn/apifortestdata.html");
			Map<String, String> connParam = sendData(row);
			Map<String, Object> resMap = PushPlatformUtils.httpPost(url, connParam, true);
			if (0 == NumberUtil.getInt(resMap.get("resultCode"), -1)) {
				status = 1;
			}
			AppParam updateParam = new AppParam("thirdPushPoolService", "updateStatus");
			updateParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START+ServiceKey.Key_busi_in));
			updateParam.addAttrs(row);
			updateParam.addAttr("pushType", pushType);
			updateParam.addAttr("status", status);
			updateParam.addAttr("msg", resMap.get("Msg"));
			RemoteInvoke.getInstance().call(updateParam);
			LogerUtil.log(config.get("pushName") + "推送数据任务 PushFSLoanUtil end");
		} catch (Exception e) {
			LogerUtil.error(PushFSLoanUtil.class, e, "PushKuaiUtil >>>>>>>>>>>>>>>>>>error");
		}
		return status;
	}
	
	private static Map<String, String> sendData (Map<String, Object> row) {
		Map<String, String> connParam = new HashMap<String, String>();
		connParam.put("code", SysParamsUtil.getStringParamByKey("push_kuai_cfg_code", "81FA10A5ACEC4B3CABD5C67891847C40"));
		connParam.put("truename", StringUtil.objectToStr(row.get("applyName")));
		connParam.put("mobile", StringUtil.objectToStr(row.get("telephone")));
		connParam.put("city", StringUtil.objectToStr(row.get("cityName")));
		connParam.put("loanamount", StringUtil.objectToStr(row.get("loanAmount")));
		
		String identifyNo = StringUtil.getString(row.get("identifyNo"));
		String birthday = IdCardResolveUtil.getBirthday(identifyNo);
		int age = NumberUtil.getInt(row.get("age"), -1);
		birthday = PushPlatformUtils.getBirthDay(birthday, age);
		birthday = birthday.replaceAll("-", "");
		
		connParam.put("birthday", birthday);
		connParam.put("gender", NumberUtil.getInt(row.get("sex"), 1) == 1 ? "M" : "F");
		
		int houseType = NumberUtil.getInt(row.get("houseType"), 2);
		if (houseType == 1 || houseType == 3) {
			connParam.put("fangchan", "2");
		}else if(houseType == 4){
			connParam.put("fangchan", "3");
		}else {
			connParam.put("fangchan", "1");
		}
		
		int carType = NumberUtil.getInt(row.get("carType"), 2);
		if (carType == 3) {
			connParam.put("car", "2");
		}else if(carType == 4){
			connParam.put("car", "3");
		}else {
			connParam.put("car", "1");
		}
		
		int wagesType = NumberUtil.getInt(row.get("wagesType"), 1);
		connParam.put("gongzi", wagesType == 2 ? "2" : "1");
		
		int income = 5000;
		if ((!StringUtils.isEmpty(row.get("income"))) && (NumberUtil.getDouble(row.get("income"), 0) > 0)) {
			income = (int) NumberUtil.getDouble(row.get("income"));
		}else if ((!StringUtils.isEmpty(row.get("pubManageLine"))) && (NumberUtil.getDouble(row.get("pubManageLine"), 0) > 0)) {
			int pubManageLine = (int) NumberUtil.getDouble(row.get("pubManageLine"), 0);
			income = (pubManageLine * 10000);
		}else if ((!StringUtils.isEmpty(row.get("cashMonth"))) && (NumberUtil.getDouble(row.get("cashMonth"), 0) > 0)) {
			income = (int) NumberUtil.getDouble(row.get("cashMonth"), 0);
		}
		connParam.put("shouru", StringUtil.objectToStr(income));
		
		
		int socialType = NumberUtil.getInt(row.get("socialType"), 2);
		connParam.put("shebao", CountGradeUtil.judgeSocialType(socialType) ? "2" : "3");
		
		int insurType = NumberUtil.getInt(row.get("insurType"), 2);
		connParam.put("havedan", CountGradeUtil.judgeInsurType(insurType) ? "2" : "1");
		
		AppParam queryParam = new AppParam("areaService", "queryProvinceByCity");
		queryParam.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sys));
		queryParam.addAttr("cityName", row.get("cityName"));
		AppResult queryResult = RemoteInvoke.getInstance().call(queryParam);
		connParam.put("province", StringUtil.objectToStr(queryResult.getAttr("province")));
		
		return connParam;
	}
}
