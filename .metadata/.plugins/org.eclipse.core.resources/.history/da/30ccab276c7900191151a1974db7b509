package org.xxjr.job.listener.xxxj;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.util.DateUtil;
import org.ddq.common.util.LogerUtil;
import org.ddq.common.util.StringUtil;
import org.llw.ddq.job.util.JobUtil;
import org.ddq.common.core.service.RemoteInvoke;
import org.springframework.util.StringUtils;
import org.xxjr.sys.util.NumberUtil;
import org.xxjr.sys.util.ServiceKey;
import org.xxjr.sys.util.SysParamsUtil;

public class GenrateCoinsUtil {

	/**
	 * 每日凌晨发放一次狗币
	 * @param processId
	 * @return
	 */
	public static String genrateDayCoins(Object processId){
		try{
				int xjLimitSendHours = SysParamsUtil.getIntParamByKey("xjLimitSendHours", 48);
				int xjLimitSendSize = SysParamsUtil.getIntParamByKey("xjLimitSendSize", 100);
				//生成星舰币的随机基数
				String generateCoinsParams = SysParamsUtil.getStringParamByKey("generateCoinsParams", "66,122");
				String[] generateCoinsArr = generateCoinsParams.split(","); 
				
				//每隔几小时生成一次
				double everyHours = Double.parseDouble(SysParamsUtil.getStringParamByKey("generateCoinsHours", "2"));
				
				//生成星舰币的随机浮动数
				String generateCoinsFloat = SysParamsUtil.getStringParamByKey("generateCoinsFloat", "-6,6");
				String[] generateCoinsFloatArr = generateCoinsFloat.split(","); 
				Date todayDate = new Date();
				
				String today = DateUtil.toStringByParttern(todayDate, DateUtil.DATE_PATTERN_YYYY_MM_DD);
				
				String over24HourTime = DateUtil.toStringByParttern(todayDate, DateUtil.DATE_PATTERN_YYYY_MM_DD_HHMMSS);
				
				// 更新用户发放状态（已发放 TO 未发放）
				AppParam updateSendStatus = new AppParam("xjCustService", "updateSendStatusALL");
				updateSendStatus.addAttr("over24HourTime", over24HourTime);
				updateSendStatus.addAttr("today", today);
				updateSendStatus.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START
						+ ServiceKey.Key_XJ));
				RemoteInvoke.getInstance().callNoTx(updateSendStatus);
				
				AppParam custParams = new AppParam("xjCustService", "getGenrateCoinsCustCount");
				custParams.addAttr("over24HourTime", over24HourTime);
				custParams.addAttr("today", today);
				custParams.addAttr("limitSize", xjLimitSendSize);
				custParams.addAttr("limitSendTime", DateUtil.getNextHour(new Date(), -xjLimitSendHours));
				custParams.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START
										+ ServiceKey.Key_XJ));
				
				AppResult custResult = RemoteInvoke.getInstance().callNoTx(custParams);
				
				int custCount = NumberUtil.getInt(custResult.getAttr(DuoduoConstant.TOTAL_SIZE),0);
				
				StringBuffer msgBuf = new StringBuffer();
				int xhCount = 0;
				int totalSucSixze= 0;
				int totalErrSize= 0;
				if(custCount > 0){
					custParams.setMethod("getGenrateCoinsCust");
					custResult = RemoteInvoke.getInstance().callNoTx(custParams);
					int size = custResult.getRows().size();
					
					int totalTimes = custCount/xjLimitSendSize;
					totalTimes = totalTimes == 0 ? 1:totalTimes;
				
					while (size > 0 && xhCount < (totalTimes + 5)) {
						try{
							int startIndex = 0;
							List<Map<String,Object>> subList = splitList(custResult.getRows(), startIndex);
							while (subList != null && subList.size() > 0) {
								
								AppParam insertParams = new AppParam("xjSendCoinNowService", "sendCustCoins");
								insertParams.addAttr("custList", subList);
								insertParams.addAttr("sendLuckFlag", 1);//发幸运币
								insertParams.addAttr("everyHours", everyHours);
								insertParams.addAttr("generateCoinsArr",generateCoinsArr);
								insertParams.addAttr("generateCoinsFloatArr", generateCoinsFloatArr);
								insertParams.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START
										+ ServiceKey.Key_XJ));
								AppResult result = RemoteInvoke.getInstance().call(insertParams);
								
								totalSucSixze = totalSucSixze + NumberUtil.getInt(result.getAttr("sucSize"),0);
								totalErrSize = totalErrSize + NumberUtil.getInt(result.getAttr("errSize"),0);
								if(StringUtils.hasText(result.getMessage())){
									msgBuf.append(result.getMessage());
								}
								
								startIndex = startIndex + subList.size();
								subList = splitList(custResult.getRows(), startIndex);
							}
							
						}catch(Exception ex){
							LogerUtil.error(GenrateCoinsUtil.class,ex, "genrateDayCoins error,params=" + custResult.toJson());
						}
						
						custResult = RemoteInvoke.getInstance().callNoTx(custParams);
						size = custResult.getRows().size();
						xhCount ++ ;
					}
				}
				
				msgBuf.append(",应需发放人数:").append(custCount)
				.append(",实际发放人数:").append(totalSucSixze)
				.append(",失败发放人数:").append(totalErrSize)
				.append(",实际运行次数:").append(xhCount)
				.append(",每次发放人数：").append(xjLimitSendSize);
				
				return msgBuf.toString();
		}catch(Exception e){
			LogerUtil.error(GenrateCoinsUtil.class, e,"genrateDayCoins >>>>>>>>>>>>>>>>>>error");
			JobUtil.addProcessExecute(processId,"凌晨发币发币报错：" + e.toString());
		}
		
		return null;
	}
	
	private static List<Map<String,Object>> splitList(List<Map<String,Object>> orgList,int startIndex){
		int endIndex = startIndex + SysParamsUtil.getIntParamByKey("xjsendCoinsXhCount", 10);
		if(endIndex > orgList.size()){
			endIndex = orgList.size();
		}
		if(startIndex >= endIndex){
			return null;
		}
		return new ArrayList<Map<String,Object>>(orgList.subList(startIndex, endIndex));
	}
	
	/**
	 * 10分钟轮旬一次，超过24小没发放的用户
	 * @param processId
	 * @return
	 */
	public static String genrate24Coins(Object processId){
		try{
				int xjLimitSendHours = SysParamsUtil.getIntParamByKey("xjLimitSendHours", 48);
				int xjLimitSendSize = SysParamsUtil.getIntParamByKey("xjLimitSendSize", 100);
				//生成星舰币的随机基数
				String generateCoinsParams = SysParamsUtil.getStringParamByKey("generateCoinsParams", "66,122");
				String[] generateCoinsArr = generateCoinsParams.split(","); 
				
				//每隔几小时生成一次
				double everyHours = Double.parseDouble(SysParamsUtil.getStringParamByKey("generateCoinsHours", "2"));
				
				//生成星舰币的随机浮动数
				String generateCoinsFloat = SysParamsUtil.getStringParamByKey("generateCoinsFloat", "-6,6");
				String[] generateCoinsFloatArr = generateCoinsFloat.split(","); 
				
				Date todayDate = new Date();
				String day24HourTime = DateUtil.toStringByParttern(todayDate, 
						DateUtil.DATE_PATTERN_YYYY_MM_DD_HHMMSS);
		
				String today = DateUtil.toStringByParttern(todayDate, DateUtil.DATE_PATTERN_YYYY_MM_DD);
				
				AppParam custParams = new AppParam("xjCustService", "getGenrateCoinsCustCount");
				custParams.addAttr("today", today);
				custParams.addAttr("day24HourTime", day24HourTime);
				custParams.addAttr("limitSize", xjLimitSendSize);
				custParams.addAttr("limitSendTime", DateUtil.getNextHour(new Date(), -xjLimitSendHours));
				custParams.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START
										+ ServiceKey.Key_XJ));
				
				AppResult custResult = RemoteInvoke.getInstance().callNoTx(custParams);
				
				int custCount = NumberUtil.getInt(custResult.getAttr(DuoduoConstant.TOTAL_SIZE),0);
				
				StringBuffer msgBuf = new StringBuffer();
				int xhCount = 0;
				int totalSucSixze= 0;
				int totalErrSize= 0;
				if(custCount > 0){
					custParams.setMethod("getGenrateCoinsCust");
					custResult = RemoteInvoke.getInstance().callNoTx(custParams);
					int size = custResult.getRows().size();
					
					int totalTimes = custCount/xjLimitSendSize;
					totalTimes = totalTimes == 0 ? 1:totalTimes;
					
					String genrateDateStr = DateUtil.toStringByParttern(new Date(), "yyyy-MM-dd HH");
					Date genrateDate = DateUtil.toDateByString(genrateDateStr, "yyyy-MM-dd HH");
				
					while (size > 0 && xhCount < (totalTimes + 5)) {
						
						try{
							int startIndex = 0;
							List<Map<String,Object>> subList = splitList(custResult.getRows(), startIndex);
							while (subList != null && subList.size() > 0) {
								
								AppParam insertParams = new AppParam("xjSendCoinNowService", "sendCustCoins");
								insertParams.addAttr("custList", custResult.getRows());
								insertParams.addAttr("everyHours", everyHours);
								insertParams.addAttr("generateCoinsArr",generateCoinsArr);
								insertParams.addAttr("generateCoinsFloatArr", generateCoinsFloatArr);
								insertParams.addAttr("genrateDate", genrateDate);
								insertParams.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START
										+ ServiceKey.Key_XJ));
								AppResult result = RemoteInvoke.getInstance().call(insertParams);
								
								totalSucSixze = totalSucSixze + NumberUtil.getInt(result.getAttr("sucSize"),0);
								totalErrSize = totalErrSize + NumberUtil.getInt(result.getAttr("errSize"),0);
								if(StringUtils.hasText(result.getMessage())){
									msgBuf.append(result.getMessage());
								}
								
								startIndex = startIndex + subList.size();
								subList = splitList(custResult.getRows(), startIndex);
							}
							
							
						}catch(Exception ex){
							LogerUtil.error(GenrateCoinsUtil.class,ex, "genrateDayCoins error,params=" + custResult.toJson());
						}
						
						custResult = RemoteInvoke.getInstance().callNoTx(custParams);
						size = custResult.getRows().size();
						xhCount ++ ;
					}
					
				}
				
				 msgBuf.append(",【24】应需发放人数:").append(custCount)
				.append(",实际发放人数:").append(totalSucSixze)
				.append(",失败发放人数:").append(totalErrSize)
				.append(",实际运行次数:").append(xhCount)
				.append(",每次发放人数：").append(xjLimitSendSize);
				return msgBuf.toString();
		}catch(Exception e){
			LogerUtil.error(GenrateCoinsUtil.class, e,"genrate24Coins >>>>>>>>>>>>>>>>>>error");
			JobUtil.addProcessExecute(processId,"超过24小时用户发币报错：" + e.toString());
		}
		
		return null ;
	}
	
	
	/**
	 * 发放内部人员专属（奖励天狗币）
	 * 领取已解冻天狗币
	 * @param processId
	 * @return
	 */
	public static String grantRewardCoin(Object processId){
		StringBuffer msgBuf = new StringBuffer();
		try{
			AppParam param = new AppParam("frozenRecordService", "getRewardCoin");
			param.addAttr("sendTime", new Date());
			param.addAttr("sendStatus", "0");//0-未发放
			param.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START
					+ ServiceKey.Key_XJ));
			AppResult result = RemoteInvoke.getInstance().callNoTx(param);
			if(result.getRows() != null && result.getRows().size() > 0){
				Object customerId = null;
				for(Map<String,Object> coinMap : result.getRows()){
					try{
						customerId = coinMap.get("customerId");
						int frozenValue = NumberUtil.getInt(coinMap.get("frozenValue"));//冻结狗币数量
						String recordId = StringUtil.getString(coinMap.get("recordId"));
						AppParam paramReceive = new AppParam("frozenRecordService","receiveRewardCoin");
						paramReceive.addAttr("recordId", recordId);
						paramReceive.addAttr("customerId", customerId);
						paramReceive.addAttr("frozenValue", frozenValue);
						paramReceive.setRmiServiceName(AppProperties.getProperties(DuoduoConstant.RMI_SERVICE_START
								+ ServiceKey.Key_XJ));
						//领取解冻天狗币奖励
						AppResult resultReceive = RemoteInvoke.getInstance().call(paramReceive);
						if(resultReceive.isSuccess()){
							msgBuf.append("【奖励天狗币发放成功的用户：CUSTID=").append(customerId).append("】,");
						}
					}catch(Exception ex){
						msgBuf.append("【奖励天狗币发放失败的用户：CUSTID=").append(customerId)
						.append(",错误信息：").append(ex.toString()).append("】,");
						LogerUtil.error(GenrateCoinsUtil.class,ex, "grantRewardCoin error,customerId=" +customerId);
					}
				}
			}else{
				msgBuf.append("未查询到即将解冻的奖励记录~");
			}
		}catch(Exception e){
			LogerUtil.error(GenrateCoinsUtil.class,e, "grantRewardCoin error");
		}
		return msgBuf.toString();
	}
	
}	
