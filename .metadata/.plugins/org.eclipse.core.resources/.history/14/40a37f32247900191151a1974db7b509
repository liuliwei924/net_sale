package org.xxjr.busi.util;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.core.SpringAppContext;
import org.ddq.common.core.service.SoaManager;
import org.ddq.common.util.DateUtil;
import org.ddq.common.util.JsonUtil;
import org.ddq.common.util.LogerUtil;
import org.ddq.common.util.StringUtil;
import org.ddq.model.cache.RedisUtils;
import org.ddq.zk.service.RemoteInvoke;
import org.springframework.util.StringUtils;
import org.xxjr.sys.util.NumberUtil;
import org.xxjr.sys.util.ServiceKey;
import org.xxjr.sys.util.SysParamsUtil;

/**
 * 优质配置
 * @author 2017-02-15 By liulw
 *
 */
public class SeniorCfgUtils {

	/**
	 * 贷款申请优质单配置
	 */
	public static final String BORROW_SENIOR_CFG = "senior_cfg_redis_key";

	/**
	 * 卡牛配置
	 */
	public static final String BORROW_KANIU_CFG = "borrow_kaniu_cfg";

	/**
	 * 定价配置缓存
	 */
	public static final String BORROW_PRICE_CFG = "borrow_price_cfg_";

	/** 平台定价配置 */
	public static final String XXJR_PRICE_TYPE = "1";
	/** 卡牛定价配置 */
	public static final String KANIU_PRICE_TYPE = "2";


	/** 优质单配置类型 */
	public static final String SENIOR_TYPE_1 = "1";
	/** 优质客户类型 */
	public static final String SENIOR_TYPE_2 = "2";
	/**优质配置缓存7天*/
	public static final int borrow_senior_cfg_time = 60*60*24*7;



	@SuppressWarnings("unchecked")
	public static Map<String,Object> parseMap(Object obj){
		if(null == obj){
			return new HashMap<String, Object>();
		}
		return JsonUtil.getInstance().json2Object(obj.toString(), Map.class);
	}

	/**
	 * 获取贷款申请优质单配置
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public static Map<String, Object> getSeniorCfg(String type){
		List<Map<String,Object>> list = (List<Map<String,Object>>) RedisUtils.getRedisService().get(BORROW_SENIOR_CFG);
		Map<String, Object> seniorMap = null ;
		if(list == null || list.isEmpty()){
			list = refershSeniorCfg();
		}
		if(list != null && !list.isEmpty()){
			for(Map<String, Object> mapCfg : list){
				if(type.equals(mapCfg.get("type").toString())){
					seniorMap = mapCfg;
					break;
				}
			}
		}
		return seniorMap;
	}

	/***
	 *刷新贷款申请优质单配置
	 */
	public static List<Map<String,Object>> refershSeniorCfg(){
		AppResult result = new AppResult();
		AppParam param = new AppParam();
		param.setService("seniorCfgService");
		param.setMethod("query");
		param.addAttr("status", "1");
		param.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START
						+ ServiceKey.Key_busi));

		if (SpringAppContext.getBean("seniorCfgService") == null) {
			result = RemoteInvoke.getInstance().call(param);
		}else{
			result = SoaManager.getInstance().invoke(param);
		}

		if(result.getRows().size() > 0){
			List<Map<String, Object>> seniorCfg = result.getRows();
			RedisUtils.getRedisService().set(BORROW_SENIOR_CFG,
					(Serializable) seniorCfg, borrow_senior_cfg_time);

			return seniorCfg;
		}
		return null;
	}


	/**
	 * 获取卡牛配置
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public static List<Map<String, Object>> getKaniuCfg(){
		List<Map<String, Object>> list = (List<Map<String, Object>>) RedisUtils.getRedisService().get(BORROW_KANIU_CFG);
		if(list == null || list.isEmpty()){
			list = refershKaniuCfg();
		}
		return list;
	}

	/***
	 * 刷新卡牛配置
	 */
	public static List<Map<String, Object>> refershKaniuCfg(){
		AppResult result = new AppResult();
		AppParam param = new AppParam();
		param.setService("kaniuCfgService");
		param.setMethod("query");
		param.addAttr("status", "1");
		param.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START
						+ ServiceKey.Key_busi));

		if (SpringAppContext.getBean("kaniuCfgService") == null) {
			result = RemoteInvoke.getInstance().call(param);
		}else{
			result = SoaManager.getInstance().invoke(param);
		}

		List<Map<String, Object>> kaNiuCfg = result.getRows();
		RedisUtils.getRedisService().set(BORROW_KANIU_CFG,
				(Serializable) kaNiuCfg, borrow_senior_cfg_time);

		return kaNiuCfg;
	}


	/**
	 * 获取定价配置
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public static List<Map<String, Object>> getPriceCfg(String type){
		List<Map<String, Object>> list = (List<Map<String, Object>>) RedisUtils.getRedisService().get(BORROW_PRICE_CFG+type);
		if(list == null || list.size()==0){
			list = refershPriceCfg(type);
		}
		return list;
	}

	/***
	 * 刷新价格配置
	 */
	public static List<Map<String, Object>> refershPriceCfg(Object type){
		AppResult result = new AppResult();
		AppParam param = new AppParam();
		param.setService("priceCfgService");
		param.setMethod("query");
		param.addAttr("status", "1");
		param.addAttr("type", type);
		param.setOrderBy("price");
		param.setOrderValue("DESC");
		param.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START
						+ ServiceKey.Key_busi));
		if (SpringAppContext.getBean("priceCfgService") == null) {
			result = RemoteInvoke.getInstance().call(param);
		}else{
			result = SoaManager.getInstance().invoke(param);
		}

		List<Map<String, Object>> priceCfg = result.getRows();
		RedisUtils.getRedisService().set(BORROW_PRICE_CFG + type,
				(Serializable) priceCfg, borrow_senior_cfg_time);
		return priceCfg;
	}



	/************** 新的优质单配置 **************/

	/**
	 * 新的的优质单判断
	 * @param borrowMap
	 * @return
	 */
	public static int getApplyType(Map<String,Object> borrowMap){
		//1-优质单 2-普通单 3-无资料 4-垃圾单 5 不押车贷6 微店单
		String cityName = StringUtil.getString(borrowMap.get("cityName"));
		String channelDetail = StringUtil.getString(borrowMap.get("channelDetail"));
		String workType = StringUtil.getString(borrowMap.get("workType"));
		int houseType = NumberUtil.getInt(borrowMap.get("houseType"), 2);
		int carType = NumberUtil.getInt(borrowMap.get("carType"),0);
		int insurType = NumberUtil.getInt(borrowMap.get("insurType"),0);
		int socialType = NumberUtil.getInt(borrowMap.get("socialType"), 2);
		int fundType = NumberUtil.getInt(borrowMap.get("fundType"), 2);
		double loanAmount = NumberUtil.getDouble(borrowMap.get("loanAmount"), 0);
		double income = NumberUtil.getDouble(borrowMap.get("income"), 0);
		double pubManageLine = NumberUtil.getDouble(borrowMap.get("pubManageLine"), 0);

		int applyType = BorrowConstant.apply_type_2;
		Map<String,Object> config = getSeniorCfg(SENIOR_TYPE_1);
		if(config != null && !config.isEmpty()){
			String includeCity = StringUtil.getString(config.get("includeCity"));
			String includeChannel = StringUtil.getString(config.get("includeChannel"));
			double loanAmountCfg = NumberUtil.getDouble(config.get("loanAmount"), 0);
			double pubManageLineCfg = NumberUtil.getDouble(config.get("pubManageLine"), 0);
			double incomeCfg = NumberUtil.getDouble(config.get("income"), 0);
			int socialFundCfg = NumberUtil.getInt(config.get("socialFund"), 0);
			int haveHouseCfg = NumberUtil.getInt(config.get("haveHouse"), 0);
			//
			if(!StringUtils.isEmpty(includeChannel) && !StringUtils.isEmpty(channelDetail) 
					&& includeChannel.indexOf(channelDetail)>=0){
				// 匹配渠道则直接列为优质单
				applyType = BorrowConstant.apply_type_1;
			}else{
				// 所有城市
				if("all".equals(includeCity) || includeCity.contains(cityName)){
					//不满足贷款金额的直接退出
					if(!judgeLoanAmount(loanAmountCfg, loanAmount)){
						return  BorrowConstant.apply_type_2; 
					}
					// 3-商品住宅 4-商住两用房
					if(houseType == 3|| houseType == 4 ){
						return  BorrowConstant.apply_type_6; //准优质单
					}
					if(haveHouseCfg >0 && judgeAsset(haveHouseCfg, houseType, carType,insurType)){
						return BorrowConstant.apply_type_1; 
					}
					if (socialFundCfg > 0 && judgeSocialFund(socialFundCfg, socialType,
							fundType) ) {
						return BorrowConstant.apply_type_1; 
					}
					if((incomeCfg >0 && (judgeIncome(incomeCfg, income) ))
							|| (pubManageLineCfg>0 && judgeManageLine(workType, pubManageLineCfg, pubManageLine))){
						applyType = BorrowConstant.apply_type_1; 
					}
				}
			}
		}
		return applyType;
	}

	/**
	 * 新的的优质单客户判断（0-不是优质客户 1-是）
	 * @param borrowMap
	 * @return
	 */
	public static int getSeniorCustType(Map<String,Object> borrowMap){
		String cityName = StringUtil.getString(borrowMap.get("cityName"));
		String channelDetail = StringUtil.getString(borrowMap.get("channelDetail"));
		String workType = StringUtil.getString(borrowMap.get("workType"));
		int houseType = NumberUtil.getInt(borrowMap.get("houseType"), 2);
		int carType = NumberUtil.getInt(borrowMap.get("carType"),0);
		int insurType = NumberUtil.getInt(borrowMap.get("insurType"),0);
		int socialType = NumberUtil.getInt(borrowMap.get("socialType"), 2);
		int fundType = NumberUtil.getInt(borrowMap.get("fundType"), 2);
		double loanAmount = NumberUtil.getDouble(borrowMap.get("loanAmount"), 0);
		double income = NumberUtil.getDouble(borrowMap.get("income"), 0);
		double pubManageLine = NumberUtil.getDouble(borrowMap.get("pubManageLine"), 0);

		int seniorCustType =0;
		Map<String,Object> config = getSeniorCfg(SENIOR_TYPE_2);
		if(config != null && !config.isEmpty()){
			String includeCity = StringUtil.getString(config.get("includeCity"));
			String includeChannel = StringUtil.getString(config.get("includeChannel"));
			double loanAmountCfg = NumberUtil.getDouble(config.get("loanAmount"), 0);
			double pubManageLineCfg = NumberUtil.getDouble(config.get("pubManageLine"), 0);
			double incomeCfg = NumberUtil.getDouble(config.get("income"), 0);
			int socialFundCfg = NumberUtil.getInt(config.get("socialFund"), 0);
			int haveHouseCfg = NumberUtil.getInt(config.get("haveHouse"), 0);
			//
			if(!StringUtils.isEmpty(includeChannel) && !StringUtils.isEmpty(channelDetail) 
					&& includeChannel.indexOf(channelDetail)>=0){
				// 匹配渠道则直接列为优质单
				seniorCustType = 1;
			}else{
				// 所有城市
				if("all".equals(includeCity) || includeCity.contains(cityName)){
					//不满足贷款金额的直接退出
					if(!judgeLoanAmount(loanAmountCfg, loanAmount)){
						return 0; 
					}
					// 3-商品住宅 4-商住两用房
					if(houseType == 3|| houseType == 4 ){
						return  1; //优质客户
					}
					if(haveHouseCfg >0 && judgeAsset(haveHouseCfg, houseType, carType,insurType)){
						return  1; //优质客户
					}
					if (socialFundCfg > 0 && judgeSocialFund(socialFundCfg, socialType,fundType) ) {
						return  1; //优质客户
					}
					if((incomeCfg >0 && (judgeIncome(incomeCfg, income) ))
							|| (pubManageLineCfg>0 && judgeManageLine(workType, pubManageLineCfg, pubManageLine))){
						return  1; //优质客户
					}
				}
			}
		}
		return seniorCustType;
	}
	/**
	 * 判断收入
	 * @param incomeCfg
	 * @param income
	 * @return
	 */
	private static boolean judgeIncome(double incomeCfg, double income){
		if(incomeCfg <= 0){
			return true;
		}
		if(income >= incomeCfg){
			return true;
		}
		return false;
	}
	
	/**1无固定职业 2企业主 3个体户 4上班族  5-学生
	 * 判断收入
	 * @param incomeCfg
	 * @param income
	 * @return
	 */
	public static double randomIncome(int workType, double income){
		switch (workType) {
		case 1://无固定职业 
			double jobless = 3000 + Math.random() * 4000;//产生5000-6000的随机数
			jobless =  income < 1000 ? jobless : income;
			return new BigDecimal(jobless).setScale(2,BigDecimal.ROUND_HALF_UP).doubleValue();
		case 2://企业主 
			double business = 8000 + Math.random() * 40000;//产生10000-50000的随机数
			business = income < 1000 ? business : income;
			return new BigDecimal(business).setScale(2,BigDecimal.ROUND_HALF_UP).doubleValue();
		case 3://个体户
			double person = 5000 + Math.random() * 5000;//产生6000-10000的随机数
			person = income < 1000 ? person : income;
			return new BigDecimal(person).setScale(2,BigDecimal.ROUND_HALF_UP).doubleValue();
		case 4://上班族
			double worker = 3000 + Math.random() * 6000;//产生4000-10000的随机数
			worker = income < 1000 ? worker : income;
			return new BigDecimal(worker).setScale(2,BigDecimal.ROUND_HALF_UP).doubleValue();
		case 5://学生
			double student = 1000 + Math.random() * 1000;//产生1000-3000的随机数
			student = income < 1000 ? student : income;
			return new BigDecimal(student).setScale(2,BigDecimal.ROUND_HALF_UP).doubleValue();

		default:
			return 4000;
		}
	}
	
	
	/**转换对公流水
	 * @param incomeCfg
	 * @param income
	 * @return
	 */
	public static double tranPubLine(double pubManageLine){
		if(pubManageLine > 0 && pubManageLine < 1) return 0.9;
		if(pubManageLine >= 1 && pubManageLine < 3) return 2;
		if(pubManageLine >=3 && pubManageLine < 5) return 4;
		if(pubManageLine >=5 && pubManageLine < 10) return 8;
		if(pubManageLine >= 10 && pubManageLine < 30) return 20;
		if(pubManageLine >= 30 && pubManageLine < 1) return 31;
		else return 0;
	}
	
	/**转换对公流水
	 * @param incomeCfg
	 * @param income
	 * @return
	 */
	public static double tranTotalLine(double totalLine){
		if(totalLine > 0 && totalLine < 1) return 0.9;
		if(totalLine >= 1 && totalLine < 3) return 2;
		if(totalLine >=3 && totalLine < 5) return 4;
		if(totalLine >=5 && totalLine < 10) return 8;
		if(totalLine >= 10 && totalLine < 30) return 20;
		if(totalLine >= 30 && totalLine < 1) return 31;
		else return 0;
	}
	
    /**
     * 判断单的抢单类型 1-免费 2-积分抢  3-现金抢
     * @param loanAmount 金额
     * @param isSeniorCust 是否优质客户 1-是 0-否
     * @param grade 等级
     * @param isAutoSale 是否自动转 1-自动 0-手工
     * @return
     */
	public static int judgeRobType(double loanAmount,int isSeniorCust,String grade,int isAutoSale){
		if(isSeniorCust == 1 || isAutoSale == 0) return 3;//
		
		int loanAmtRobType = SysParamsUtil.getIntParamByKey("loanAmtRobType", 2);
		if(("E".equals(grade) || "F".equals(grade)) && loanAmount <= loanAmtRobType) 
			return 1;
		else 
			return 3;
	}
	
	
	/**
	 * 判断公司流水
	 * @param workType
	 * @param pubManageLineCfg
	 * @param pubManageLine
	 * @return
	 */
	private static boolean judgeManageLine(String workType ,double pubManageLineCfg, double pubManageLine){
		if(BorrowConstant.work_type_2.equals(workType)){
			if(pubManageLineCfg <= 0){
				return true;
			}
			if(pubManageLine >= pubManageLineCfg){
				return true;
			}
			return false;
		}
		return true;
	}

	/**
	 * 判断借款金额
	 * @param loanAmountCfg
	 * @param loanAmount
	 * @return
	 */
	private static boolean judgeLoanAmount(double loanAmountCfg, double loanAmount){
		if(loanAmountCfg <= 0){
			return true;
		}
		if(loanAmount >= loanAmountCfg){
			return true;
		}
		return false;
	}

	/**
	 * 判断房产  0无需房产 1需要房产 2-有车有房 3车，房，保单三者其一
	 * @param haveHouseCfg
	 * @param haveHouse
	 * @return
	 */
	private static boolean judgeAsset(int haveHouseCfg, int haveHouse,int carType,int insurType){
		switch (haveHouseCfg) {
		case 0://无需房产
			return true;
		case 1://需要房产
			
			return judgeHouse(haveHouseCfg, haveHouse);
		case 2://有车有房 
			return judgeHouse(haveHouseCfg, haveHouse) && judgeCar(haveHouseCfg,carType);
		case 3://车，房，保单三者其一
			return (judgeHouse(haveHouseCfg, haveHouse) || judgeCar(haveHouseCfg,carType) || insurType !=0);

		default:
			return false;
		}
	}

	/**
	 * 判断房产
	 * @param haveHouseCfg
	 * @param haveHouse
	 * @return
	 */
	private static boolean judgeHouse(int haveHouseCfg, int haveHouse){
		if(haveHouseCfg == 0){
			return true;
		}
		return (haveHouse >0 && haveHouse !=2);
	}

	
	/**
	 * 判断房产
	 * @param haveHouseCfg
	 * @param haveHouse
	 * @return
	 */
	private static boolean judgeCar(int haveHouseCfg, int carType){
		if(haveHouseCfg == 0){
			return true;
		}
		return !(carType<=0 || carType==2);
	}
	
	/**
	 * 判断社保公积金
	 * @param socialFundCfg
	 * @param socialType
	 * @param fundType
	 * @return
	 */
	private static boolean judgeSocialFund(int socialFundCfg, int socialType, int fundType){
		switch (socialFundCfg) {
		case 0://无要求
			return true;
		case 1://有社保
			return socialType == 1;
		case 2://有公积金
			return fundType == 1;
		case 3://有公积金，有社保
			return (fundType == 1 && socialType == 1);
		case 4://有公积金或有社保
			return (fundType == 1 || socialType == 1);
		default:
			return false;
		}
	}
	
	/**
	 * 房、车 、保单、社保公积金 都没有就算未填信息
	 * noHouseType 和 noCarType 无车和无房的类型不统一，需要自己传类型,默认都是2
	 */
	public static void haveDetail(Map<String, Object> param, String noHouseType, String noCarType) {
		if (StringUtils.isEmpty(noHouseType)) {
			noHouseType = "2";
		}
		if (StringUtils.isEmpty(noCarType)) {
			noCarType = "2";
		}
		
		double income = NumberUtil.getDouble(param.get("income"), 0);
		int wagesType = NumberUtil.getInt(param.get("wagesType"), 0);
		if(wagesType ==1 && income >= 3000){
			return ;
		}
		
		if ((!"1".equals(StringUtil.getString(param.get("fundType")))) && (!"1".equals(StringUtil.getString(param.get("socialType"))))
			&& (StringUtils.isEmpty(param.get("insurType")) || "0".equals(StringUtil.getString(param.get("insurType"))))
			&& (StringUtils.isEmpty(param.get("houseType")) || noHouseType.equals(StringUtil.getString(param.get("houseType"))))
			&& (StringUtils.isEmpty(param.get("carType")) || noCarType.equals(StringUtil.getString(param.get("carType"))))) {
			param.put("haveDetail", 0);
		}
	}
	
	/**
	 * 房、车 、保单、社保公积金 都没有就算未填信息
	 * noHouseType 和 noCarType 无车和无房的类型不统一，需要自己传类型,默认都是2
	 */
	public static int haveDetail(Map<String, Object> param) {
	    int haveDetail = 1;
	    
		double loanAmount = 0;
        if(StringUtils.isEmpty(param.get("loanAmount"))){
       	 loanAmount = NumberUtil.getDouble(param.get("applyAmount"),0);
        }else{
       	 loanAmount = NumberUtil.getDouble(param.get("loanAmount"),0);
        }
        
	    if(loanAmount <= 0){
	    	return 0;
	    }
	    
	   if(StringUtils.isEmpty(param.get("cityName"))){
		   return 0;
	   }
	    
		double income = NumberUtil.getDouble(param.get("income"), 0);
		int wagesType = NumberUtil.getInt(param.get("wagesType"), 0);
		if(wagesType ==1 && income >= 3000){
			return haveDetail;
		}
		
		int fundType = NumberUtil.getInt(param.get("fundType"), 0);
		int socialType = NumberUtil.getInt(param.get("socialType"), 0);
		int insurType = NumberUtil.getInt(param.get("insurType"), 0);
		int houseType = NumberUtil.getInt(param.get("houseType"), 2);
		int carType = NumberUtil.getInt(param.get("carType"), 2);
		
		if(!CountGradeUtil.judgeFundType(fundType) && !CountGradeUtil.judgeCar(carType)
		  && !CountGradeUtil.judgeInsurType(insurType) && !CountGradeUtil.judgeHouse(houseType)
		  && !CountGradeUtil.judgeSocialType(socialType)){
			haveDetail = 0;
		}
		
		return haveDetail ;
	}

	/**
	 * 更改转换状态
	 * @param borrowId 直借Id
	 * @param applyStatus  3-可转化 4-转化中 5-转化成功 6-转化失败
	 * @param handleType 1，下发处理 2，成功付款 3，不成功 4，退款处理
	 * @param robType 1-免费抢 2-积分抢 3-现金抢
	 * @param price 价格
	 * @param score 积分
	 * @return
	 */
	public static AppResult changeTranStatus(Object borrowId, String applyStatus,
			int handleType,int robWay,Object price,Object score,Object receiveId, Object discount,Object robTime){

		if(StringUtils.isEmpty(borrowId)){
			return new AppResult();
		}
		AppParam borrowParam = new AppParam("daiBorrowService", "query");
		borrowParam.addAttr("borrowId", borrowId);
		borrowParam.setRmiServiceName(AppProperties
				.getProperties(DuoduoConstant.RMI_SERVICE_START
						+ ServiceKey.Key_busi));
		
		AppResult result = new AppResult();
		if (SpringAppContext.getBean("daiBorrowService") == null) {
			result = RemoteInvoke.getInstance().call(borrowParam);
		}else{
			result = SoaManager.getInstance().invoke(borrowParam);
		}

		if(result.getRows().size() > 0){
			Map<String, Object> borrowInfo = result.getRow(0);
			if(!StringUtils.isEmpty(borrowInfo.get("applyId"))){
				
				Object applyId = borrowInfo.get("applyId");
				AppParam updateParam = new AppParam("borrowApplyService", "update");
				updateParam.addAttr("applyId", applyId);
				updateParam.addAttr("status", applyStatus+"");
				updateParam.setRmiServiceName(AppProperties
						.getProperties(DuoduoConstant.RMI_SERVICE_START
								+ ServiceKey.Key_busi_in));
				
				try{
					RemoteInvoke.getInstance().call(updateParam);
				}catch(Exception e){
					LogerUtil.error(SeniorCfgUtils.class, e, "borrowApplyService upate to sell:" +e);
				}
				
				AppParam insertSel  = new AppParam("borrowSelRecordService", "insert");
				insertSel.addAttr("applyId", applyId);
				insertSel.addAttr("handleType", handleType);
				insertSel.addAttr("robWay", robWay);
				insertSel.addAttr("channelDetail", borrowInfo.get("sourceName"));
				insertSel.addAttr("costScore", score);
				insertSel.addAttr("costPrice", price);
				insertSel.addAttr("borrowId", borrowId);
				insertSel.addAttr("receiveId", receiveId);
				insertSel.addAttr("discount", discount);
				insertSel.addAttr("createTime", robTime);
				insertSel.setRmiServiceName(AppProperties
						.getProperties(DuoduoConstant.RMI_SERVICE_START
								+ ServiceKey.Key_busi_in));
				try{
					RemoteInvoke.getInstance().call(insertSel);
				}catch(Exception e){
					LogerUtil.error(SeniorCfgUtils.class, e, "borrowSelRecordService insert:" +e);
				}
			}
		}
		return result;
	}

	/**
	 *不可挂卖，不可转普通单判断 
	 * @param applyId
	 * @return Map
	 */
	public static Map<String, Object> isCanSale(Object telephone){
		AppResult result = new AppResult();
		Map<String, Object> map = new HashMap<String, Object>();
		boolean isCanSale = false;
		String method = null;
		Object borrowId = null;
		
		AppParam queryParam = new AppParam("daiBorrowService", "queryNotSale");
		queryParam.addAttr("telephone", telephone);
		result = ServiceKey.doCallNoTx(queryParam, ServiceKey.Key_busi);
		
		List<Map<String, Object>> rows = result.getRows();
		if (rows.size()>0) {
			Map<String, Object> queryMap = rows.get(0);
			String status = StringUtil.getString(queryMap.get("status"));
			borrowId = queryMap.get("borrowId");
			String createTime = StringUtil.getString(queryMap.get("createTime"));
			if ("0,2,3,7".contains(status)) {
				
				AppParam param = new AppParam("daiBorrowReService","query");
				param.addAttr("borrowId", borrowId);
				param.setOrderBy("createTime");
				param.setOrderValue("DESC");
				result = ServiceKey.doCallNoTx(param, ServiceKey.Key_busi);
				int queryCount = result.getRows().size();
				
				if (queryCount == 0) {
					isCanSale = true ;
					method = "update";
				}else{
					Map<String,Object> robMap = result.getRow(0);
					String robTime = StringUtil.getString(robMap.get("createTime"));
					int month = SysParamsUtil.getIntParamByKey("robSaleMonth", 1);
					Date robDate =
							DateUtil.plus(DateUtil.toLocalDateTime(robTime,DateUtil.DATE_PATTERN_YYYY_MM_DD_HHMMSS), month, 
									DateUtil.ChronoUnit_MONTHS);
					if (new Date().getTime() > robDate.getTime()) {
						isCanSale = true ;
						method = "insert";
					}
				}
			}else if ("1".equals(status)) {
				int month = SysParamsUtil.getIntParamByKey("notSaleMonth", 1);
				Date date = DateUtil.plus(DateUtil.toLocalDateTime(createTime,DateUtil.DATE_PATTERN_YYYY_MM_DD_HHMMSS), month, 
						DateUtil.ChronoUnit_MONTHS);
				if (new Date().getTime() > date.getTime()) {
					isCanSale = true ;
					method = "insert";
				}
			}
		}else {
			isCanSale = true ;
			method = "insert";
		}
		map.put("isCanSale", isCanSale);
		map.put("method", method);
		map.put("borrowId", borrowId);
		return map;
	}
	/**
	 * 获取优质单单价(单位:元)
	 * @param cityName 城市
	 * @param isKf 是否客服跟进
	 * @return
	 */
	public static double getSeniorPrice(String cityName,boolean isKf){
		Map<String,Object> config = getSeniorCfg(SENIOR_TYPE_1);
		String includeCity = StringUtil.getString(config.get("includeCity"));
		int defaultSeniorPrice = SysParamsUtil.getIntParamByKey("defaultSeniorPrice", 100);
		if(includeCity.contains(cityName)){
			if(isKf){
				return NumberUtil.getDouble(config.get("robKfAmount"), defaultSeniorPrice);
			}else{
				return NumberUtil.getDouble(config.get("robAmount"), defaultSeniorPrice);
			}
		}else{
			return defaultSeniorPrice;
		}

	}
	/**
	 * 获取平台价格 积分
	 * @param borrowMap
	 * @return
	 */
	public static Map<String,Object> getXxjrPrice(Map<String,Object> borrowMap){

		Map<String,Object> result = new HashMap<String, Object>();
		result.put("price", 3000);
		result.put("score", 60);
		return result;
	}
	
}
