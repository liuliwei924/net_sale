package org.xxjr.store.web.action.account.fx;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.context.AppResult;
import org.ddq.common.exception.ExceptionUtil;
import org.ddq.common.util.LogerUtil;
import org.ddq.common.util.StringUtil;
import org.ddq.common.web.session.DuoduoSession;
import org.ddq.common.web.session.RequestUtil;
import org.ddq.model.cache.RedisUtils;
import org.ddq.zk.service.RemoteInvoke;
import org.springframework.stereotype.Controller;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.xxjr.busi.util.store.StoreUserUtil;
import org.xxjr.cust.util.info.CustomerIdentify;
import org.xxjr.fx.util.FxProdUtil;
import org.xxjr.fx.util.FxRefererUtil;
import org.xxjr.sys.util.ServiceKey;
import org.xxjr.sys.util.SysParamsUtil;

/**
 * 分销系统链接配置相关
 * @author Administrator
 *
 */
@Controller()
@RequestMapping("/account/fx/")
public class FxLinkConfAction {

	/**
	 * 查询链接列表
	 * @param request
	 * @return
	 */
	@RequestMapping("fxLinkConf/queryLinkList")
	@ResponseBody
	public AppResult queryLinkList(HttpServletRequest request) {
		AppResult result = new AppResult();
		try {
			AppParam params = new AppParam();
			RequestUtil.setAttr(params, request);
			params.setService("fxLinkCfgService");
			params.setMethod("queryLinkList");
			params.setOrderBy("createTime");
			params.setOrderValue("DESC");
			params.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sho));
			result = RemoteInvoke.getInstance().callNoTx(params);
		} catch (Exception e) {
			LogerUtil.error(this.getClass(), e, "queryLinkList error");
			ExceptionUtil.setExceptionMessage(e, result, DuoduoSession.getShowLog());
		}
		return result;
	}
	
	
	/**
	 * 添加链接信息
	 * @param request
	 * @return
	 */
	@RequestMapping("fxLinkConf/addLinkConfInfo")
	@ResponseBody
	public AppResult addPosterInfo(HttpServletRequest request) {
		AppResult result = new AppResult();
		try {
			String customerId = StoreUserUtil.getCustomerId(request);
			Map<String, Object> custInfo = CustomerIdentify.getCustIdentify(customerId);
			AppParam params = new AppParam();
			RequestUtil.setAttr(params, request);
			params.setService("fxLinkCfgService");
			params.setMethod("insert");
			params.addAttr("createBy", custInfo.get("realName"));// 创建人
			params.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sho));
			result = RemoteInvoke.getInstance().call(params);
			if(result.isSuccess()){
				RedisUtils.getRedisService().del(FxRefererUtil.KEY_FX_LINK_CONFIGS);
			}
		} catch (Exception e) {
			LogerUtil.error(this.getClass(), e, "addLinkConfInfo error");
			ExceptionUtil.setExceptionMessage(e, result, DuoduoSession.getShowLog());
		}
		return result;
	}
	
	
	/**
	 * 编辑链接信息
	 * @param request
	 * @return
	 */
	@RequestMapping("fxLinkConf/updateLinkInfo")
	@ResponseBody
	public AppResult updateLinkInfo(HttpServletRequest request) {
		AppResult result = new AppResult();
		try {
			String customerId = StoreUserUtil.getCustomerId(request);
			Map<String, Object> custInfo = CustomerIdentify.getCustIdentify(customerId);
			AppParam params = new AppParam();
			RequestUtil.setAttr(params, request);
			params.setService("fxLinkCfgService");
			params.setMethod("update");
			params.addAttr("updateBy", custInfo.get("realName"));// 修改人
			params.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sho));
			result = RemoteInvoke.getInstance().call(params);
			if(result.isSuccess()){
				RedisUtils.getRedisService().del(FxRefererUtil.KEY_FX_LINK_CONFIGS);
			}
		} catch (Exception e) {
			LogerUtil.error(this.getClass(), e, "updateLinkInfo error");
			ExceptionUtil.setExceptionMessage(e, result, DuoduoSession.getShowLog());
		}
		return result;
	}
	
	/**
	 * 查询所有产品信息
	 */
	@RequestMapping("fxLinkConf/queryProdList")
	@ResponseBody
	public AppResult queryProdList(HttpServletRequest request) {
		AppResult result = new AppResult();
		try {
			// 查询所有产品信息
			List<Map<String, Object>> prodList = FxProdUtil.getFxProdList(null);
			String shortLink = SysParamsUtil.getStringParamByKey("defaultFxShortLink", "http://a.xxjr.com/wxtg");
			String linkPrefix = SysParamsUtil.getStringParamByKey("fxLinkCopyAllPrefix", 
					"好东西分享给大家：高通过率申请信用卡通道(申请建议用客户本人手机，主要要你当地有的银行)");
			Map<String,Object> linkPreData = new HashMap<String,Object>();
			linkPreData.put("fxLinkCopyAllPrefix", "fxLinkCopyAllPrefix");
			linkPreData.put("linkPrefix", linkPrefix);
			result.putAttr("shortLink", shortLink);
			result.putAttr("linkPreData", linkPreData);
			result.putAttr("prodList", prodList);
		} catch (Exception e) {
			LogerUtil.error(this.getClass(), e, "queryProdList error");
			ExceptionUtil.setExceptionMessage(e, result, DuoduoSession.getShowLog());
		}
		return result;
	}
	
	/**
	 * 修改链接内容
	 */
	@RequestMapping("fxLinkConf/updateLinkPreInfo")
	@ResponseBody
	public AppResult updateLinkPreInfo(HttpServletRequest request) {
		AppResult result = new AppResult();
		try {
			String paramCode = request.getParameter("paramCode");
			if (StringUtils.isEmpty(paramCode)) {
				result.setSuccess(false);
				result.setMessage("链接key不能为空");
				return result;
			}
			String customerId = StoreUserUtil.getCustomerId(request);
			Map<String, Object> custInfo = CustomerIdentify.getCustIdentify(customerId);
			AppParam params = new AppParam();
			RequestUtil.setAttr(params, request);
			params.setService("sysParamsService");
			params.setMethod("update");
			params.addAttr("updateBy", custInfo.get("realName"));
			params.setRmiServiceName(AppProperties
					.getProperties(DuoduoConstant.RMI_SERVICE_START + ServiceKey.Key_sys));
			result = RemoteInvoke.getInstance().call(params);
			if(result.isSuccess()){
				SysParamsUtil.refreshValue(paramCode, StringUtil.getString(params.getAttr("paramValue")));
			}
		} catch (Exception e) {
			LogerUtil.error(this.getClass(), e, "updateLinkPreInfo error");
			ExceptionUtil.setExceptionMessage(e, result, DuoduoSession.getShowLog());
		}
		return result;
	}
	
}
