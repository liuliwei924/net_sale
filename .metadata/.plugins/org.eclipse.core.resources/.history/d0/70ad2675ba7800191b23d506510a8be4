package org.xxjr.cust.member;

import java.util.Date;
import java.util.List;
import java.util.Map;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppResult;
import org.ddq.common.core.service.BaseService;
import org.ddq.common.exception.AppException;
import org.ddq.common.exception.DuoduoError;
import org.springframework.context.annotation.Lazy;
import org.ddq.common.web.session.DuoduoSession;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import org.xxjr.sys.util.SysParamsUtil;


@Lazy
@Service
public class VipFreeService extends BaseService {
	private static final String NAMESPACE = "VIPFREE";

	/**
	 * querys
	 * @param params
	 * @return
	 */
	public AppResult query(AppParam params) {
		return super.query(params, NAMESPACE);
	}
	
	/**
	 * queryByPage
	 * @param params
	 * @return
	 */
	public AppResult queryByPage(AppParam params) {
		return super.queryByPage(params, NAMESPACE);
	}
	
	/**
	 * queryCount
	 * @param params
	 * @return
	 */
	public AppResult queryCount(AppParam params) {
		int size = getDao().count(NAMESPACE, super.COUNT,params.getAttr(),params.getDataBase());
		AppResult result = new AppResult();
		result.putAttr(DuoduoConstant.TOTAL_SIZE, size);
		return result;
	}
	
	/**
	 * 查询vip剩余抽奖次数
	 * <p>
	 * 	这个会员没有就插入一条记录
	 * </p>
	 * @param params
	 * @return
	 */
	public AppResult queryLotteryCount(AppParam params){
		Object customerId = params.getAttr("customerId");
		if(StringUtils.isEmpty(customerId)){
			throw new AppException(DuoduoError.UPDATE_NO_PARAMS);
		}
		AppParam queryParam = new AppParam();
		queryParam.addAttr("customerId", customerId);
		AppResult result = this.query(queryParam);
		List<Map<String, Object>> rows = result.getRows();
		Object lotteryCount = 3;
		if(rows.size() == 0){
			params.addAttr("lotteryCount", lotteryCount);
			params.addAttr("updateTime", new Date());
			this.insert(params);
		}else{
			lotteryCount = rows.get(0).get("lotteryCount");
		}
		result.putAttr("lotteryCount", lotteryCount);
		return result;
	}
	
	/**
	 * 查房价评估剩余次数
	 * @param params
	 * @return
	 */
	public AppResult queryEvalCount(AppParam params){
		Object customerId = params.getAttr("customerId");
		if(StringUtils.isEmpty(customerId)){
			throw new AppException(DuoduoError.UPDATE_NO_PARAMS);
		}
		AppParam queryParam = new AppParam();
		queryParam.addAttr("customerId", customerId);
		AppResult result = this.query(queryParam);
		List<Map<String, Object>> rows = result.getRows();
		Object evaluateCount = SysParamsUtil.getIntParamByKey("maxVipEvalCount", 5);
		if(rows.size() == 0){
			params.addAttr("evaluateCount", evaluateCount);
			params.addAttr("updateTime", new Date());
			this.insert(params);
		}else{
			evaluateCount = rows.get(0).get("evaluateCount");
		}
		result.putAttr("evaluateCount", evaluateCount);
		return result;
	}
	
	/**
	 * 查找普通用户剩余免费抢单
	 * @param params
	 * @return
	 */
	public AppResult queryFreeRobCount(AppParam params){
		Object customerId = params.getAttr("customerId");
		if(StringUtils.isEmpty(customerId)){
			throw new AppException(DuoduoError.UPDATE_NO_PARAMS);
		}
		AppParam queryParam = new AppParam();
		queryParam.addAttr("customerId", customerId);
		AppResult result = this.query(queryParam);
		List<Map<String, Object>> rows = result.getRows();
		Object freeRobCount = 3;
		if(rows.size() == 0){
			params.addAttr("freeRobCount", freeRobCount);
			params.addAttr("updateTime", new Date());
			this.insert(params);
		}else{
			freeRobCount = rows.get(0).get("freeRobCount");
		}
		result.putAttr("freeRobCount", freeRobCount);
		return result;
	}
	
	/**
	 * 查找剩余可申请退款次数
	 * @param params
	 * @return
	 */
	public AppResult queryRefundCount(AppParam params){
		Object customerId = params.getAttr("customerId");
		if(StringUtils.isEmpty(customerId)){
			throw new AppException(DuoduoError.UPDATE_NO_PARAMS);
		}
		AppParam queryParam = new AppParam();
		queryParam.addAttr("customerId", customerId);
		AppResult result = this.query(queryParam);
		List<Map<String, Object>> rows = result.getRows();
		Object refundCount = 1;
		if(rows.size() == 0){
			params.addAttr("refundCount", refundCount);
			params.addAttr("updateTime", new Date());
			this.insert(params);
		}else{
			refundCount = rows.get(0).get("refundCount");
		}
		result.putAttr("refundCount", refundCount);
		return result;
	}
	
	/**
	 * insert
	 * @param params
	 * @return
	 */
	public AppResult insert(AppParam params) {
		params.addAttr("createTime", new Date());
		params.addAttr("createBy", DuoduoSession.getUserName());
		return super.insert(params, NAMESPACE);
	}
	
	/**
	 * update
	 * @param params
	 * @return
	 */
	public AppResult update(AppParam params) {
		return super.update(params, NAMESPACE);
	}
	
	/**
	 * 每月增加会员申请退款次数
	 * @param params
	 * @return
	 */
	public AppResult addRefundCount(AppParam params) {
		AppResult result = new AppResult();
		int size = super.getDao().update(NAMESPACE, "addRefundCount", params.getAttr(), params.getDataBase());
		result.putAttr(DuoduoConstant.DAO_Update_SIZE, size);
		return result;
	}
	
	/**
	 * 定时任务，减去会员免费次数
	 * @param params
	 * @return
	 */
	public AppResult resetFreeCount(AppParam params){
		AppResult result = new AppResult();
		params.addAttr("evaluateCount", SysParamsUtil.getIntParamByKey("maxVipEvalCount", 5));
		int size = this.getDao().update(NAMESPACE, "resetFreeCount", params.getAttr(), params.getDataBase());
		result.putAttr(DuoduoConstant.DAO_Update_SIZE, size);
		return result;
	}
	
	/**
	 * delete
	 * @param params
	 * @return
	 */
	public AppResult delete(AppParam params) {
		String ids = (String) params.getAttr("ids");
		AppResult  result = null;
		if (!StringUtils.isEmpty(ids)) {
			for (String id : ids.split(",")) {
				AppParam param = new AppParam();
				param.addAttr("customerId", id);
				
				result = super.delete(param, NAMESPACE);
			}
		} else if (!StringUtils.isEmpty(params.getAttr("customerId"))) {
			result = super.delete(params, NAMESPACE);
		} else {
			throw new AppException(DuoduoError.DELETE_NO_ID);
		}
		return result;
	}
	
	/**
	 * 批量关闭过期VIP的部分特权
	 * @param context
	 * @return
	 */
	public AppResult batchRemoveVipPrivilege(AppParam context){
		int size = super.getDao().update(NAMESPACE, "batchRemoveVipPrivilege", context.getAttr(), context.getDataBase());
		AppResult backContext = new AppResult();
		backContext.putAttr(DuoduoConstant.DAO_Update_SIZE, size);
		return backContext;
	}
}
