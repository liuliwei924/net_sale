package org.xxjr.busi.util.push.impl;

import java.io.Serializable;
import java.io.UnsupportedEncodingException;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppProperties;
import org.ddq.common.util.LogerUtil;
import org.ddq.common.util.StringUtil;
import org.ddq.model.cache.RedisUtils;
import org.ddq.zk.service.RemoteInvoke;
import org.springframework.util.StringUtils;
import org.xxjr.busi.util.CountGradeUtil;
import org.xxjr.busi.util.push.PushCode;
import org.xxjr.busi.util.push.PushPlatformUtils;
import org.xxjr.busi.util.push.PushUtil;
import org.xxjr.sys.util.NumberUtil;
import org.xxjr.sys.util.ServiceKey;
import org.xxjr.sys.util.SysParamsUtil;

import com.alibaba.fastjson.JSONObject;

/***
 * 推送小钱包数据任务
 * @author ZQH
 *
 */
@PushCode(1)
public class PushXqbUtil implements PushUtil{
	
	private final static String HEX = "0123456789ABCDEF";
    private static final int keyLenght = 16;
    private static final String defaultV = "0";
	
	public int pushData(Map<String, Object> row, Integer pushType) {
		
		Map<String, Object> config = PushPlatformUtils.getConfigByCode(pushType);
		
		if ((!PushPlatformUtils.checkChannelOpen(config))) {
			LogerUtil.log(PushXqbUtil.class, config.get("pushName") + "推送未打开");
			return 3;
		}
		if ((!PushPlatformUtils.checkChannelMaxCount(config))) {
			LogerUtil.log(PushXqbUtil.class, config.get("pushName") + "推送已达上限");
			return 3;
		}
		if ((!PushPlatformUtils.checkChannelLimit(row, config))) {
			LogerUtil.log(PushXqbUtil.class, config.get("pushName") + "筛选条件无法通过");
			return 4;
		}
		if ((!PushPlatformUtils.checkStopDate(config))) {
			LogerUtil.log(PushXqbUtil.class, config.get("pushName") + "推送数据推送已暂停");
			return 5;
		}
		int status = 2;
		try {
			//处理数据
			String params = dealParams(row);
			
			String url = SysParamsUtil.getStringParamByKey("push_xqb_cfg_insert", "https://if.xqb24.com/xqb/paph/sub/single_ob");
			String key = SysParamsUtil.getStringParamByKey("push_xqb_cfg_key", "19BPQIB1NM1QUIMY");
			
			Map<String, String> connParam = new HashMap<String, String>();
			connParam.put("params", encrypt(params, key));
			connParam.put("token", getXqbtoken());
			
			Map<String, Object> res = PushPlatformUtils.httpPost(url, connParam, true);
			
			int code = NumberUtil.getInt(res.get("status"),-1);
			String msg = StringUtil.getString(res.get("msg"));
			if(10000 == code){//推送成功
				status = 1;
			}

			//处理结果
			AppParam updateParam = new AppParam("thirdPushPoolService", "updateStatus");
			updateParam.addAttrs(row);
			updateParam.addAttr("status", status);
			updateParam.addAttr("message", msg);
			updateParam.addAttr("pushType", pushType);
			updateParam.setRmiServiceName(AppProperties.
					getProperties(DuoduoConstant.RMI_SERVICE_START+ ServiceKey.Key_busi_in));
			RemoteInvoke.getInstance().call(updateParam);
			LogerUtil.log("推送小钱包数据任务 AutoPushXqbJob end");
		} catch (Exception e) {
			LogerUtil.error(PushXqbUtil.class, e, "AutoPushXqbJob >>>>>>>>>>>>>>>>>>error");
		}
		return status;
	}

	/***
	 * 处理传递的参数
	 * @param list
	 * @return
	 */
	private static String dealParams(Map<String,Object> map){
		JSONObject context = new JSONObject();
		String name = StringUtil.getString(map.get("applyName"));//姓名
		String mobile = StringUtil.getString(map.get("telephone"));//手机号
		Object gender = covertParams(map.get("sex"),1);//性别 1男 2女
		Object birthdate = covertParams(map.get("age"),2);//;//出生日期
		Object id_card_no = map.get("identifyNo");//身份证号码
		Object loan_amount =StringUtil.getString(map.get("loanAmount"));//贷款需求金额
		Object occupation_type = covertParams(map.get("workType"),4);//职业类型
		Object work_time = "2";//工作年限默认2-现单位6-12个月
		Object salary_payment = covertParams(map.get("wagesType"),5);//;//工资发放形式
		Object credit_card = covertParams(map.get("creditType"),6);//有过信用卡
		Object live_time = "1";//当地居住时间默认1-半年以上
		Object house_loan =covertParams(map.get("houseType"),7);//名下房产
		Object car_loan = covertParams(map.get("carType"),8);//名下私家车
		Object life_policy = StringUtil.getString(map.get("insurType"));//名下寿险保单

		context.put("name",name);
		context.put("mobile",mobile);
		context.put("gender",gender);
		context.put("birthdate",birthdate);
		context.put("idCardNo",id_card_no);
		context.put("loanAmount",(NumberUtil.getInt(loan_amount, 1) * 10000));
		context.put("occupationType",occupation_type);
		context.put("workTime",work_time);
		context.put("salaryPayment",salary_payment);
		context.put("creditCard",credit_card);
		context.put("liveTime",live_time);
		context.put("houseLoan",house_loan);
		context.put("carLoan",car_loan);
		context.put("lifePolicy",life_policy);
		context.put("source", SysParamsUtil.getStringParamByKey("push_xqb_cfg_source", "xqb-22"));
		return context.toJSONString();
	}
	
	/***
	 * 参数转换
	 * @param obj
	 * @return
	 */
	public static Object covertParams(Object obj,int type){
		if(1 == type){//性别
			if(StringUtils.isEmpty(obj)) return 1;
			return Integer.parseInt(obj.toString()) == 1?1:2;
		}else if(2==type){//生日
			if(NumberUtil.getInt(obj, 0) <= 0 ){
				obj = (int)(Math.random() * 12 + 23);//随机23岁-35岁
			}
			int	year = Calendar.getInstance().get(Calendar.YEAR);
			int birthYear = year - Integer.parseInt(obj.toString());
			int month = (int)(Math.random() * 12 + 1);
			String smonth = month + "";
			int day = (int)(Math.random() * 28 + 1);
			String sday = day + "";
			if(month <10){
				smonth = "0"+smonth;
			} 
			if(day <10){
				sday = "0"+sday;
			} 
			return birthYear +"-"+ smonth +"-" + sday;		
		}else if(3==type){//月收入范围

		}else if(4==type){//职业类型
			switch(NumberUtil.getInt(obj, 1)){
			case 1: return 5; 
			case 2: return 3;
			case 3: return 4;
			case 4: return 2;
			}		

		}else if(5==type){//工资发放形式
			return NumberUtil.getInt(obj, 1) == 1?1:3;
		}else if(6==type){//有过信用卡
			return 1;
		}else if(7==type){//名下房产
			return CountGradeUtil.judgeHouse(NumberUtil.getInt(obj, 2))?1:0;
		}else if(8==type){//名下车产
			return CountGradeUtil.judgeCar(NumberUtil.getInt(obj, 2))?1:0;
		}
		return obj;
	}
	
	private static String getXqbtoken () {
		String token = StringUtil.objectToStr(RedisUtils.getRedisService().get("pushXqbToken"));
		if (StringUtils.isEmpty(token)) {
			String url = SysParamsUtil.getStringParamByKey("push_xqb_cfg_token", "https://if.xqb24.com/xqb/paph/getToken");
			String key = SysParamsUtil.getStringParamByKey("push_xqb_cfg_key", "19BPQIB1NM1QUIMY");
			JSONObject gtObj = new JSONObject();
			gtObj.put("account", SysParamsUtil.getStringParamByKey("push_xqb_cfg_user", "dsw"));
			gtObj.put("password", SysParamsUtil.getStringParamByKey("push_xqb_cfg_pwd", "d123456"));
			Map<String, String> connParam = new HashMap<String, String>();
			connParam.put("params", encrypt(gtObj.toJSONString(), key));
			try {
				Map<String, Object> res = PushPlatformUtils.httpPost(url, connParam, true);
				token = StringUtil.objectToStr(res.get("token"));
				int s = (int) (60 * 60 * 1.9);
				RedisUtils.getRedisService().set("pushXqbToken", (Serializable)token, s);
			} catch (Exception e) {
				LogerUtil.error(PushPlatformUtils.class, e, "getXqbtoken error");
			}
			
		}
		return token;
	}
	
	private static String encrypt(String src, String key) {
        try {
            byte[] rawKey = toMakekey(key, keyLenght, defaultV).getBytes();
            byte[] result = encrypt(rawKey, src.getBytes("utf-8"));
            //System.out.println(byteToHexString(result));
            return toHex(result);
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
	
	
	private static byte[] encrypt(byte[] key, byte[] src) throws Exception {
        SecretKeySpec skeySpec = new SecretKeySpec(key, "AES");
        Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);
        byte[] encrypted = cipher.doFinal(src);
        return encrypted;
    }
	
	private static String toMakekey(String str, int strLength, String val) {
        int strLen = str.length();
        if (strLen < strLength) {
            while (strLen < strLength) {
                StringBuffer buffer = new StringBuffer();
                buffer.append(str).append(val);
                str = buffer.toString();
                strLen = str.length();
            }
        }
        return str;
    }
	
	public static String byteToHexString(byte[] data){
		StringBuffer sb = new StringBuffer();
		if(data != null){
			sb.append("\n[");
			for(int i=0;i<data.length;i++){
				int value = data[i]&0xFF;
				String str = Integer.toHexString(value);
				if(str.length() ==1){
					sb.append("0");
				}
				sb.append(str.toUpperCase()).append(" ,");
				if((i>0)&&(i%16==0)){
					sb.append('\n');
				}
			}
			if(sb.indexOf(",")>0){
				sb.setLength(sb.length()-1);
			}
			sb.append("]");
		}
		return sb.toString();
	}
	
	public static String toHex(String txt) {
		return toHex(txt.getBytes());
	}
	 
	 public static String toHex(byte[] buf) {
		 if (buf == null)
			 return "";
		 StringBuffer result = new StringBuffer(2 * buf.length);
		 for (int i = 0; i < buf.length; i++) {
			 appendHex(result, buf[i]);
		 }
		 return result.toString();
	 }
	 private static void appendHex(StringBuffer sb, byte b) {
		 sb.append(HEX.charAt((b >> 4) & 0x0f)).append(HEX.charAt(b & 0x0f));
	 }
}
