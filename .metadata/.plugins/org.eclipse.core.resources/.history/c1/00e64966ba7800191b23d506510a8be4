package org.xxjr.cust.invite;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.ddq.common.constant.DuoduoConstant;
import org.ddq.common.context.AppParam;
import org.ddq.common.context.AppResult;
import org.ddq.common.core.service.BaseService;
import org.ddq.common.core.service.SoaManager;
import org.ddq.common.exception.AppException;
import org.ddq.common.exception.DuoduoError;
import org.ddq.common.exception.SysException;
import org.ddq.common.util.DateUtil;
import org.ddq.common.util.StringUtil;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import org.xxjr.cust.util.invite.CustInviteUtil;
import org.xxjr.cust.util.member.TicketConfigUtils;
import org.xxjr.sys.util.SysParamsUtil;

@Lazy
@Service
public class CustWxFansService extends BaseService {
	private static final String NAMESPACE = "CUSTWXFANS";

	/**
	 * querys
	 * @param params
	 * @return
	 */
	public AppResult query(AppParam params) {
		return super.query(params, NAMESPACE);
	}
	
	/**
	 * 查询邀请概况
	 * @param params
	 * @return
	 */
	public AppResult querySummary(AppParam params) {
		return super.query(params, NAMESPACE, "querySummary");
	}
	
	/**
	 * queryByPage
	 * @param params
	 * @return
	 */
	public AppResult queryByPage(AppParam params) {
		return super.queryByPage(params, NAMESPACE);
	}
	
	/**
	 * 查询信用卡推荐申请
	 * @param params
	 * @return
	 */
	public AppResult queryRecordByPage(AppParam params) {
		return super.queryByPage(params, NAMESPACE, "queryRecord", "queryRecordCount");
	}
	
	/**
	 * queryCount
	 * @param params
	 * @return
	 */
	public AppResult queryCount(AppParam params) {
		int size = getDao().count(NAMESPACE, super.COUNT,params.getAttr(),params.getDataBase());
		AppResult result = new AppResult();
		result.putAttr(DuoduoConstant.TOTAL_SIZE, size);
		return result;
	}
	
	/**
	 * 查询邀请列表
	 * @param params
	 * @return
	 */
	public AppResult queryInviteList(AppParam params) {
		params.addAttr("inviteRewardNum",
				SysParamsUtil.getIntParamByKey("inviteRewardNum", 20));
		return super.queryByPage(params, NAMESPACE, "queryInviteList", "queryInviteListCount");
	}
	
	/**
	 * 核卡列表
	 * @param params
	 * @return
	 */
	public AppResult queryNuclearCardList(AppParam params) {
		return super.queryByPage(params, NAMESPACE, "queryNuclearCard", "queryNuclearCardCount");
	}
	
    /**
	 * 信贷经理关注小小攒钱公众号奖励对应的邀请奖励，活动结束后发送核卡奖励
	 * @param params
	 * @return
	 */
	public AppResult sendInviteReward(AppParam params) {
		AppResult result = new AppResult();
		String ids = StringUtil.getString(params.getAttr("ids"));
        if(StringUtils.isEmpty(ids)){
        	throw new SysException("缺少必要参数");
        }
        params.addAttr("array", ids.split(","));
		result = this.queryInviteList(params);
		
		int sendNum = 0;//邀请应奖励单数
		int totalNum = 0;
		int inviteRewardNum = SysParamsUtil.getIntParamByKey("inviteRewardNumPer", 20);
		// 查免单券配置
        Map<String, Object> ticketInfo = TicketConfigUtils.getFreeTickeConfig(1000, 0, 50, 30, 0);
		for(Map<String,Object> inviteMap : result.getRows()){
			Object customerId = inviteMap.get("customerId");
			int sendInviteTicketNum = Integer.parseInt(inviteMap.get("sendInviteTicketNum")
					.toString());//已发送的邀请奖励单数
			int fansNum = Integer.parseInt(inviteMap.get("fansNum")
					.toString());//粉丝数
			sendNum = fansNum/inviteRewardNum - sendInviteTicketNum;//当前应发邀请奖励单数
			
			//每邀请20名好友关注，送一张50元免单券
			if(sendNum > 0){
				Map<String, Object> rewardMap = new HashMap<String, Object>(); 
				rewardMap.put("customerId", customerId);
				rewardMap.put("createDesc", "邀请好友关注小小攒钱获取");
				rewardMap.put("type", CustInviteUtil.TICKET_TYPE_FXINVITE_SEND);
				rewardMap.put("activityType", "3");
				String rewardValue = ticketInfo.get("configId") +","+ sendNum + ",0";
				List<Map<String,Object>> list = TicketConfigUtils.getTicketConfigIdList(rewardValue, rewardMap);
				
				AppParam ticketParam = new AppParam("custTicketService","directBatchInsert");
				ticketParam.addAttr("list", list);
				AppResult insertResult = SoaManager.getInstance().invoke(ticketParam);
				if(insertResult.isSuccess()){
					totalNum += sendNum;
				}
			}
		}
		result.setMessage("共发送邀请奖励免单券：" + totalNum + "张");
		return result;
	}
	
	/**
	 * 发送核卡奖励
	 */
	public AppResult sendNuclearCardReward(AppParam params){
		AppResult result = new AppResult();
		String ids = StringUtil.getString(params.getAttr("ids"));
        if(StringUtils.isEmpty(ids)){
        	throw new SysException("缺少必要参数");
        }
		int totalNum = 0;
        String inviteEndDate = SysParamsUtil.getStringParamByKey(
				SysParamsUtil.KEY_invite_xxzq_enddate, "2018-11-30");
        Date endDate =  DateUtil.toDateByString(inviteEndDate,
    			DateUtil.DATE_PATTERN_YYYY_MM_DD);
        // 查免单券配置
        Map<String, Object> ticketInfo = TicketConfigUtils.getFreeTickeConfig(1000, 0, 50, 30, 0);
        //活动结束后每2张核卡发送一张50元免单券
		if (endDate.compareTo(new Date()) <= 0) {
			AppParam queryParam = new AppParam();
			queryParam.addAttr("array", ids.split(","));
			AppResult queryResult = this.queryNuclearCardList(queryParam);
			for(Map<String,Object> applyMap : queryResult.getRows()){
				int sendNcTicketNum = Integer.parseInt(applyMap.get(
						"sendNcTicketNum").toString());//已发送的核卡奖励数
				int ncNum = Integer.parseInt(applyMap.get("ncNum").toString());//核卡数
				int sendNcNum = ncNum - sendNcTicketNum; //应发的核卡奖励数
				
				if(sendNcNum > 0){
					Map<String, Object> rewardMap = new HashMap<String, Object>(); 
					rewardMap.put("customerId", applyMap.get("customerId"));
					rewardMap.put("createDesc", "邀请好友办卡获取");
					rewardMap.put("type", CustInviteUtil.TICKET_TYPE_FXNC_SEND);
					rewardMap.put("activityType", "3");
					String rewardValue = ticketInfo.get("configId") +","+ sendNcNum + ",0";
					List<Map<String,Object>> list = TicketConfigUtils.getTicketConfigIdList(rewardValue, rewardMap);
					
					AppParam ticketParam = new AppParam("custTicketService","directBatchInsert");
					ticketParam.addAttr("list", list);
					AppResult insertResult = SoaManager.getInstance().invoke(ticketParam);
					if(insertResult.isSuccess()){
						totalNum += sendNcNum;
					}
				}
			}
		}
		result.setMessage("共发送核卡奖励免单券：" + totalNum + "张");
		return result;
	}
	/**
	 * insert
	 * @param params
	 * @return
	 */
	public AppResult insert(AppParam params) {
		params.addAttr("subscribeTime", new Date());
		return super.insert(params, NAMESPACE);
	}
	
	/**
	 * update
	 * @param params
	 * @return
	 */
	public AppResult update(AppParam params) {
		return super.update(params, NAMESPACE);
	}
	
	/**
	 * delete
	 * @param params
	 * @return
	 */
	public AppResult delete(AppParam params) {
		String ids = (String) params.getAttr("ids");
		AppResult  result = null;
		if (!StringUtils.isEmpty(ids)) {
			for (String id : ids.split(",")) {
				AppParam param = new AppParam();
				param.addAttr("fansId", id);
				
				result = super.delete(param, NAMESPACE);
			}
		} else if (!StringUtils.isEmpty(params.getAttr("fansId"))) {
			result = super.delete(params, NAMESPACE);
		} else {
			throw new AppException(DuoduoError.DELETE_NO_ID);
		}
		return result;
	}
}
